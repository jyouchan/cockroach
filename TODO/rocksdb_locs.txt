All locations where rocksdb occurs

./c-deps/rocksdb/WINDOWS_PORT.md:46:* Replaced `dirent.h` for `port/dirent.h` (very few places) with the implementation of the relevant interfaces within `rocksdb::port` namespace
./c-deps/rocksdb/WINDOWS_PORT.md:47:* Replaced `sys/time.h` to `port/sys_time.h` (few places) implemented equivalents within `rocksdb::port`
./c-deps/rocksdb/WINDOWS_PORT.md:78:Thread-Local storage plays a significant role for RocksDB performance. Rather than creating a separate implementation we chose to create inline wrappers that forward `pthread_specific` calls to Windows `Tls` interfaces within `rocksdb::port` namespace. This leaves the existing meat of the logic in tact and unchanged and just as maintainable.
./c-deps/rocksdb/memtable/memtablerep_bench.cc:583:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/memtable/memtablerep_bench.cc:590:  rocksdb::Options options;
./c-deps/rocksdb/memtable/memtablerep_bench.cc:592:  std::unique_ptr<rocksdb::MemTableRepFactory> factory;
./c-deps/rocksdb/memtable/memtablerep_bench.cc:594:    factory.reset(new rocksdb::SkipListFactory);
./c-deps/rocksdb/memtable/memtablerep_bench.cc:597:    factory.reset(new rocksdb::VectorRepFactory);
./c-deps/rocksdb/memtable/memtablerep_bench.cc:599:    factory.reset(rocksdb::NewHashSkipListRepFactory(
./c-deps/rocksdb/memtable/memtablerep_bench.cc:603:        rocksdb::NewFixedPrefixTransform(FLAGS_prefix_length));
./c-deps/rocksdb/memtable/memtablerep_bench.cc:605:    factory.reset(rocksdb::NewHashLinkListRepFactory(
./c-deps/rocksdb/memtable/memtablerep_bench.cc:610:        rocksdb::NewFixedPrefixTransform(FLAGS_prefix_length));
./c-deps/rocksdb/memtable/memtablerep_bench.cc:612:    factory.reset(rocksdb::NewHashCuckooRepFactory(
./c-deps/rocksdb/memtable/memtablerep_bench.cc:616:        rocksdb::NewFixedPrefixTransform(FLAGS_prefix_length));
./c-deps/rocksdb/memtable/memtablerep_bench.cc:623:  rocksdb::InternalKeyComparator internal_key_comp(
./c-deps/rocksdb/memtable/memtablerep_bench.cc:624:      rocksdb::BytewiseComparator());
./c-deps/rocksdb/memtable/memtablerep_bench.cc:625:  rocksdb::MemTable::KeyComparator key_comp(internal_key_comp);
./c-deps/rocksdb/memtable/memtablerep_bench.cc:626:  rocksdb::Arena arena;
./c-deps/rocksdb/memtable/memtablerep_bench.cc:627:  rocksdb::WriteBufferManager wb(FLAGS_write_buffer_size);
./c-deps/rocksdb/memtable/memtablerep_bench.cc:635:  std::unique_ptr<rocksdb::MemTableRep> memtablerep;
./c-deps/rocksdb/memtable/memtablerep_bench.cc:636:  rocksdb::Random64 rng(FLAGS_seed);
./c-deps/rocksdb/memtable/memtablerep_bench.cc:639:    std::unique_ptr<rocksdb::KeyGenerator> key_gen;
./c-deps/rocksdb/memtable/memtablerep_bench.cc:641:    rocksdb::Slice name;
./c-deps/rocksdb/memtable/memtablerep_bench.cc:646:      name = rocksdb::Slice(benchmarks, sep - benchmarks);
./c-deps/rocksdb/memtable/memtablerep_bench.cc:649:    std::unique_ptr<rocksdb::Benchmark> benchmark;
./c-deps/rocksdb/memtable/memtablerep_bench.cc:650:    if (name == rocksdb::Slice("fillseq")) {
./c-deps/rocksdb/memtable/memtablerep_bench.cc:652:      key_gen.reset(new rocksdb::KeyGenerator(&rng, rocksdb::SEQUENTIAL,
./c-deps/rocksdb/memtable/memtablerep_bench.cc:654:      benchmark.reset(new rocksdb::FillBenchmark(memtablerep.get(),
./c-deps/rocksdb/memtable/memtablerep_bench.cc:656:    } else if (name == rocksdb::Slice("fillrandom")) {
./c-deps/rocksdb/memtable/memtablerep_bench.cc:658:      key_gen.reset(new rocksdb::KeyGenerator(&rng, rocksdb::UNIQUE_RANDOM,
./c-deps/rocksdb/memtable/memtablerep_bench.cc:660:      benchmark.reset(new rocksdb::FillBenchmark(memtablerep.get(),
./c-deps/rocksdb/memtable/memtablerep_bench.cc:662:    } else if (name == rocksdb::Slice("readrandom")) {
./c-deps/rocksdb/memtable/memtablerep_bench.cc:663:      key_gen.reset(new rocksdb::KeyGenerator(&rng, rocksdb::RANDOM,
./c-deps/rocksdb/memtable/memtablerep_bench.cc:665:      benchmark.reset(new rocksdb::ReadBenchmark(memtablerep.get(),
./c-deps/rocksdb/memtable/memtablerep_bench.cc:667:    } else if (name == rocksdb::Slice("readseq")) {
./c-deps/rocksdb/memtable/memtablerep_bench.cc:668:      key_gen.reset(new rocksdb::KeyGenerator(&rng, rocksdb::SEQUENTIAL,
./c-deps/rocksdb/memtable/memtablerep_bench.cc:671:          new rocksdb::SeqReadBenchmark(memtablerep.get(), &sequence));
./c-deps/rocksdb/memtable/memtablerep_bench.cc:672:    } else if (name == rocksdb::Slice("readwrite")) {
./c-deps/rocksdb/memtable/memtablerep_bench.cc:674:      key_gen.reset(new rocksdb::KeyGenerator(&rng, rocksdb::RANDOM,
./c-deps/rocksdb/memtable/memtablerep_bench.cc:676:      benchmark.reset(new rocksdb::ReadWriteBenchmark<
./c-deps/rocksdb/memtable/memtablerep_bench.cc:677:          rocksdb::ConcurrentReadBenchmarkThread>(memtablerep.get(),
./c-deps/rocksdb/memtable/memtablerep_bench.cc:679:    } else if (name == rocksdb::Slice("seqreadwrite")) {
./c-deps/rocksdb/memtable/memtablerep_bench.cc:681:      key_gen.reset(new rocksdb::KeyGenerator(&rng, rocksdb::RANDOM,
./c-deps/rocksdb/memtable/memtablerep_bench.cc:683:      benchmark.reset(new rocksdb::ReadWriteBenchmark<
./c-deps/rocksdb/memtable/memtablerep_bench.cc:684:          rocksdb::SeqConcurrentReadBenchmarkThread>(memtablerep.get(),
./c-deps/rocksdb/tools/rdb/db_wrapper.h:28:    static bool AddToBatch(rocksdb::WriteBatch& batch, bool del,
./c-deps/rocksdb/tools/rdb/db_wrapper.h:30:    static bool AddToBatch(rocksdb::WriteBatch& batch, bool del,
./c-deps/rocksdb/tools/rdb/db_wrapper.h:51:    rocksdb::Options options_;
./c-deps/rocksdb/tools/rdb/db_wrapper.h:52:    rocksdb::Status status_;
./c-deps/rocksdb/tools/rdb/db_wrapper.h:53:    rocksdb::DB* db_;
./c-deps/rocksdb/tools/rdb/db_wrapper.h:54:    std::unordered_map<std::string, rocksdb::ColumnFamilyHandle*>
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:86:  std::vector<std::string> cfs = { rocksdb::kDefaultColumnFamilyName };
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:100:    db_wrapper->status_ = rocksdb::DB::Open(
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:106:  std::vector<rocksdb::ColumnFamilyDescriptor> families;
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:109:    families.push_back(rocksdb::ColumnFamilyDescriptor(
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:110:        cfs[i], rocksdb::ColumnFamilyOptions()));
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:113:  std::vector<rocksdb::ColumnFamilyHandle*> handles;
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:114:  db_wrapper->status_ = rocksdb::DB::Open(
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:161:        rocksdb::ReadOptions(), key, &value);
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:164:        rocksdb::ReadOptions(), db_wrapper->columnFamilies_[cf], key, &value);
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:190:      rocksdb::WriteOptions(), key, value
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:194:      rocksdb::WriteOptions(),
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:220:        rocksdb::WriteOptions(), arg0);
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:226:        rocksdb::WriteOptions(), db_wrapper->columnFamilies_[arg1], arg0);
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:234:  std::unique_ptr<rocksdb::Iterator> iterator;
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:239:    iterator.reset(db_wrapper->db_->NewIterator(rocksdb::ReadOptions()));
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:246:        rocksdb::ReadOptions(), db_wrapper->columnFamilies_[arg0]));
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:277:  rocksdb::ColumnFamilyHandle* cf;
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:279:      rocksdb::ColumnFamilyOptions(), cf_name, &cf);
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:290:bool DBWrapper::AddToBatch(rocksdb::WriteBatch& batch, bool del,
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:321:bool DBWrapper::AddToBatch(rocksdb::WriteBatch& batch, bool del,
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:366:  rocksdb::WriteBatch batch;
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:406:  db_wrapper->status_ = db_wrapper->db_->Write(rocksdb::WriteOptions(), &batch);
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:415:  rocksdb::Slice begin     = *v8::String::Utf8Value(args[0]->ToString());
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:416:  rocksdb::Slice end       = *v8::String::Utf8Value(args[1]->ToString());
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:426:  rocksdb::Slice begin  = *v8::String::Utf8Value(args[0]->ToString());
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:427:  rocksdb::Slice end    = *v8::String::Utf8Value(args[1]->ToString());
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:443:  rocksdb::Slice begin     = *v8::String::Utf8Value(args[0]->ToString());
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:444:  rocksdb::Slice end       = *v8::String::Utf8Value(args[1]->ToString());
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:475:  rocksdb::Slice begin  = *v8::String::Utf8Value(args[0]->ToString());
./c-deps/rocksdb/tools/rdb/db_wrapper.cc:476:  rocksdb::Slice end    = *v8::String::Utf8Value(args[1]->ToString());
./c-deps/rocksdb/tools/sst_dump_tool.cc:195:  rocksdb::InternalKeyComparator ikc(opts.comparator);
./c-deps/rocksdb/tools/sst_dump_tool.cc:225:  Status s = rocksdb::ReadTableProperties(file, file_size, table_magic_number,
./c-deps/rocksdb/tools/sst_dump_tool.cc:495:        in_key = rocksdb::LDBCommand::HexToString(in_key);
./c-deps/rocksdb/tools/sst_dump_tool.cc:502:      Slice sl_key = rocksdb::Slice(in_key);
./c-deps/rocksdb/tools/sst_dump_tool.cc:526:      from_key = rocksdb::LDBCommand::HexToString(from_key);
./c-deps/rocksdb/tools/sst_dump_tool.cc:529:      to_key = rocksdb::LDBCommand::HexToString(to_key);
./c-deps/rocksdb/tools/sst_dump_tool.cc:540:  rocksdb::Env* env = rocksdb::Env::Default();
./c-deps/rocksdb/tools/sst_dump_tool.cc:541:  rocksdb::Status st = env->GetChildren(dir_or_file, &filenames);
./c-deps/rocksdb/tools/sst_dump_tool.cc:550:      rocksdb::Slice(from_key).ToString(true).c_str(),
./c-deps/rocksdb/tools/sst_dump_tool.cc:551:      rocksdb::Slice(to_key).ToString(true).c_str());
./c-deps/rocksdb/tools/sst_dump_tool.cc:565:    rocksdb::SstFileReader reader(filename, verify_checksum,
./c-deps/rocksdb/tools/sst_dump_tool.cc:622:      const rocksdb::TableProperties* table_properties;
./c-deps/rocksdb/tools/sst_dump_tool.cc:624:      std::shared_ptr<const rocksdb::TableProperties>
./c-deps/rocksdb/tools/sst_dump_tool.cc:642:                  rocksdb::GetDeletedKeys(
./c-deps/rocksdb/tools/sst_dump_tool.cc:646:          uint64_t merge_operands = rocksdb::GetMergeOperands(
./c-deps/rocksdb/tools/ldb_cmd_test.cc:26:    auto actual = rocksdb::LDBCommand::HexToString(inPair.first);
./c-deps/rocksdb/tools/ldb_cmd_test.cc:31:    auto reverse = rocksdb::LDBCommand::StringToHex(actual);
./c-deps/rocksdb/tools/ldb_cmd_test.cc:42:      rocksdb::LDBCommand::HexToString(badInput);
./c-deps/rocksdb/tools/sst_dump.cc:11:  rocksdb::SSTDumpTool tool;
./c-deps/rocksdb/tools/ldb_cmd.cc:1597:  ret.push_back("--" + ARG_NEW_LEVELS + "=" + rocksdb::ToString(new_levels));
./c-deps/rocksdb/tools/ldb_cmd.cc:2808:  rocksdb::SstFileReader reader(filename, false, output_hex);
./c-deps/rocksdb/tools/ldb_cmd.cc:2819:    const rocksdb::TableProperties* table_properties;
./c-deps/rocksdb/tools/ldb_cmd.cc:2821:    std::shared_ptr<const rocksdb::TableProperties>
./c-deps/rocksdb/tools/ldb_cmd.cc:2835:                << rocksdb::GetDeletedKeys(
./c-deps/rocksdb/tools/ldb_cmd.cc:2895:  rocksdb::VectorLogPtr wal_files;
./c-deps/rocksdb/tools/db_bench_tool.cc:286:DEFINE_int64(db_write_buffer_size, rocksdb::Options().db_write_buffer_size,
./c-deps/rocksdb/tools/db_bench_tool.cc:292:DEFINE_int64(write_buffer_size, rocksdb::Options().write_buffer_size,
./c-deps/rocksdb/tools/db_bench_tool.cc:296:             rocksdb::Options().max_write_buffer_number,
./c-deps/rocksdb/tools/db_bench_tool.cc:301:             rocksdb::Options().min_write_buffer_number_to_merge,
./c-deps/rocksdb/tools/db_bench_tool.cc:312:             rocksdb::Options().max_write_buffer_number_to_maintain,
./c-deps/rocksdb/tools/db_bench_tool.cc:326:             rocksdb::Options().max_background_jobs,
./c-deps/rocksdb/tools/db_bench_tool.cc:343:             rocksdb::Options().max_background_compactions,
./c-deps/rocksdb/tools/db_bench_tool.cc:357:             rocksdb::Options().max_background_flushes,
./c-deps/rocksdb/tools/db_bench_tool.cc:361:static rocksdb::CompactionStyle FLAGS_compaction_style_e;
./c-deps/rocksdb/tools/db_bench_tool.cc:362:DEFINE_int32(compaction_style, (int32_t) rocksdb::Options().compaction_style,
./c-deps/rocksdb/tools/db_bench_tool.cc:365:static rocksdb::CompactionPri FLAGS_compaction_pri_e;
./c-deps/rocksdb/tools/db_bench_tool.cc:366:DEFINE_int32(compaction_pri, (int32_t)rocksdb::Options().compaction_pri,
./c-deps/rocksdb/tools/db_bench_tool.cc:416:             rocksdb::BlockBasedTableOptions().metadata_block_size,
./c-deps/rocksdb/tools/db_bench_tool.cc:428:             static_cast<int32_t>(rocksdb::BlockBasedTableOptions().block_size),
./c-deps/rocksdb/tools/db_bench_tool.cc:432:             rocksdb::BlockBasedTableOptions().block_restart_interval,
./c-deps/rocksdb/tools/db_bench_tool.cc:437:             rocksdb::BlockBasedTableOptions().index_block_restart_interval,
./c-deps/rocksdb/tools/db_bench_tool.cc:442:             rocksdb::BlockBasedTableOptions().read_amp_bytes_per_bit,
./c-deps/rocksdb/tools/db_bench_tool.cc:452:DEFINE_int32(open_files, rocksdb::Options().max_open_files,
./c-deps/rocksdb/tools/db_bench_tool.cc:456:DEFINE_int32(file_opening_threads, rocksdb::Options().max_file_opening_threads,
./c-deps/rocksdb/tools/db_bench_tool.cc:519:static class std::shared_ptr<rocksdb::Statistics> dbstats;
./c-deps/rocksdb/tools/db_bench_tool.cc:539:DEFINE_int64(target_file_size_base, rocksdb::Options().target_file_size_base,
./c-deps/rocksdb/tools/db_bench_tool.cc:543:             rocksdb::Options().target_file_size_multiplier,
./c-deps/rocksdb/tools/db_bench_tool.cc:547:              rocksdb::Options().max_bytes_for_level_base,
./c-deps/rocksdb/tools/db_bench_tool.cc:561:             rocksdb::Options().level0_stop_writes_trigger,
./c-deps/rocksdb/tools/db_bench_tool.cc:566:             rocksdb::Options().level0_slowdown_writes_trigger,
./c-deps/rocksdb/tools/db_bench_tool.cc:571:             rocksdb::Options().level0_file_num_compaction_trigger,
./c-deps/rocksdb/tools/db_bench_tool.cc:677:static enum rocksdb::CompressionType StringToCompressionType(const char* ctype) {
./c-deps/rocksdb/tools/db_bench_tool.cc:681:    return rocksdb::kNoCompression;
./c-deps/rocksdb/tools/db_bench_tool.cc:683:    return rocksdb::kSnappyCompression;
./c-deps/rocksdb/tools/db_bench_tool.cc:685:    return rocksdb::kZlibCompression;
./c-deps/rocksdb/tools/db_bench_tool.cc:687:    return rocksdb::kBZip2Compression;
./c-deps/rocksdb/tools/db_bench_tool.cc:689:    return rocksdb::kLZ4Compression;
./c-deps/rocksdb/tools/db_bench_tool.cc:691:    return rocksdb::kLZ4HCCompression;
./c-deps/rocksdb/tools/db_bench_tool.cc:693:    return rocksdb::kXpressCompression;
./c-deps/rocksdb/tools/db_bench_tool.cc:695:    return rocksdb::kZSTD;
./c-deps/rocksdb/tools/db_bench_tool.cc:698:  return rocksdb::kSnappyCompression;  // default value
./c-deps/rocksdb/tools/db_bench_tool.cc:703:    return rocksdb::kDefaultColumnFamilyName;
./c-deps/rocksdb/tools/db_bench_tool.cc:713:static enum rocksdb::CompressionType FLAGS_compression_type_e =
./c-deps/rocksdb/tools/db_bench_tool.cc:714:    rocksdb::kSnappyCompression;
./c-deps/rocksdb/tools/db_bench_tool.cc:758:static rocksdb::Env* FLAGS_env = rocksdb::Env::Default();
./c-deps/rocksdb/tools/db_bench_tool.cc:781:DEFINE_int32(perf_level, rocksdb::PerfLevel::kDisable, "Level of perf collection");
./c-deps/rocksdb/tools/db_bench_tool.cc:846:DEFINE_uint64(max_compaction_bytes, rocksdb::Options().max_compaction_bytes,
./c-deps/rocksdb/tools/db_bench_tool.cc:860:DEFINE_bool(mmap_read, rocksdb::Options().allow_mmap_reads,
./c-deps/rocksdb/tools/db_bench_tool.cc:863:DEFINE_bool(mmap_write, rocksdb::Options().allow_mmap_writes,
./c-deps/rocksdb/tools/db_bench_tool.cc:866:DEFINE_bool(use_direct_reads, rocksdb::Options().use_direct_reads,
./c-deps/rocksdb/tools/db_bench_tool.cc:870:            rocksdb::Options().use_direct_io_for_flush_and_compaction,
./c-deps/rocksdb/tools/db_bench_tool.cc:873:DEFINE_bool(advise_random_on_open, rocksdb::Options().advise_random_on_open,
./c-deps/rocksdb/tools/db_bench_tool.cc:879:  rocksdb::Options().access_hint_on_compaction_start;
./c-deps/rocksdb/tools/db_bench_tool.cc:884:DEFINE_bool(use_adaptive_mutex, rocksdb::Options().use_adaptive_mutex,
./c-deps/rocksdb/tools/db_bench_tool.cc:887:DEFINE_uint64(bytes_per_sync,  rocksdb::Options().bytes_per_sync,
./c-deps/rocksdb/tools/db_bench_tool.cc:892:DEFINE_uint64(wal_bytes_per_sync,  rocksdb::Options().wal_bytes_per_sync,
./c-deps/rocksdb/tools/db_bench_tool.cc:1381:  rocksdb::port::Thread reporting_thread_;
./c-deps/rocksdb/tools/db_bench_tool.cc:1891:      case rocksdb::kSnappyCompression:
./c-deps/rocksdb/tools/db_bench_tool.cc:1895:      case rocksdb::kZlibCompression:
./c-deps/rocksdb/tools/db_bench_tool.cc:1899:      case rocksdb::kBZip2Compression:
./c-deps/rocksdb/tools/db_bench_tool.cc:1903:      case rocksdb::kLZ4Compression:
./c-deps/rocksdb/tools/db_bench_tool.cc:1907:      case rocksdb::kLZ4HCCompression:
./c-deps/rocksdb/tools/db_bench_tool.cc:1911:      case rocksdb::kXpressCompression:
./c-deps/rocksdb/tools/db_bench_tool.cc:1915:      case rocksdb::kZSTD:
./c-deps/rocksdb/tools/db_bench_tool.cc:1994:    if (FLAGS_compression_type_e != rocksdb::kNoCompression) {
./c-deps/rocksdb/tools/db_bench_tool.cc:2161:      FLAGS_env = new ReportFileOpEnv(rocksdb::Env::Default());
./c-deps/rocksdb/tools/db_bench_tool.cc:2814:        case rocksdb::kSnappyCompression: {
./c-deps/rocksdb/tools/db_bench_tool.cc:2827:      case rocksdb::kZlibCompression:
./c-deps/rocksdb/tools/db_bench_tool.cc:2832:      case rocksdb::kBZip2Compression:
./c-deps/rocksdb/tools/db_bench_tool.cc:2837:      case rocksdb::kLZ4Compression:
./c-deps/rocksdb/tools/db_bench_tool.cc:2842:      case rocksdb::kLZ4HCCompression:
./c-deps/rocksdb/tools/db_bench_tool.cc:2847:      case rocksdb::kXpressCompression:
./c-deps/rocksdb/tools/db_bench_tool.cc:2852:      case rocksdb::kZSTD:
./c-deps/rocksdb/tools/db_bench_tool.cc:3027:      rocksdb::CuckooTableOptions table_options;
./c-deps/rocksdb/tools/db_bench_tool.cc:3967:    if (FLAGS_perf_level > rocksdb::PerfLevel::kDisable) {
./c-deps/rocksdb/tools/db_bench_tool.cc:4049:    if (FLAGS_perf_level > rocksdb::PerfLevel::kDisable) {
./c-deps/rocksdb/tools/db_bench_tool.cc:4127:    if (FLAGS_perf_level > rocksdb::PerfLevel::kDisable) {
./c-deps/rocksdb/tools/db_bench_tool.cc:4284:    if (FLAGS_perf_level > rocksdb::PerfLevel::kDisable) {
./c-deps/rocksdb/tools/db_bench_tool.cc:4944:    if (FLAGS_perf_level > rocksdb::PerfLevel::kDisable) {
./c-deps/rocksdb/tools/db_bench_tool.cc:5106:    if (FLAGS_perf_level > rocksdb::PerfLevel::kDisable) {
./c-deps/rocksdb/tools/db_bench_tool.cc:5229:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/tools/db_bench_tool.cc:5237:  FLAGS_compaction_style_e = (rocksdb::CompactionStyle) FLAGS_compaction_style;
./c-deps/rocksdb/tools/db_bench_tool.cc:5257:    dbstats = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/tools/db_bench_tool.cc:5259:  FLAGS_compaction_pri_e = (rocksdb::CompactionPri)FLAGS_compaction_pri;
./c-deps/rocksdb/tools/db_bench_tool.cc:5261:  std::vector<std::string> fanout = rocksdb::StringSplit(
./c-deps/rocksdb/tools/db_bench_tool.cc:5289:    FLAGS_env  = new rocksdb::HdfsEnv(FLAGS_hdfs);
./c-deps/rocksdb/tools/db_bench_tool.cc:5293:    FLAGS_compaction_fadvice_e = rocksdb::Options::NONE;
./c-deps/rocksdb/tools/db_bench_tool.cc:5295:    FLAGS_compaction_fadvice_e = rocksdb::Options::NORMAL;
./c-deps/rocksdb/tools/db_bench_tool.cc:5297:    FLAGS_compaction_fadvice_e = rocksdb::Options::SEQUENTIAL;
./c-deps/rocksdb/tools/db_bench_tool.cc:5299:    FLAGS_compaction_fadvice_e = rocksdb::Options::WILLNEED;
./c-deps/rocksdb/tools/db_bench_tool.cc:5310:                                  rocksdb::Env::Priority::HIGH);
./c-deps/rocksdb/tools/db_bench_tool.cc:5312:                                  rocksdb::Env::Priority::BOTTOM);
./c-deps/rocksdb/tools/db_bench_tool.cc:5314:                                  rocksdb::Env::Priority::LOW);
./c-deps/rocksdb/tools/db_bench_tool.cc:5319:    rocksdb::Env::Default()->GetTestDirectory(&default_db_path);
./c-deps/rocksdb/tools/db_bench_tool.cc:5330:  rocksdb::Benchmark benchmark;
./c-deps/rocksdb/tools/write_stress.cc:303:  rocksdb::WriteStress write_stress;
./c-deps/rocksdb/tools/db_bench.cc:22:int main(int argc, char** argv) { return rocksdb::db_bench_tool(argc, argv); }
./c-deps/rocksdb/tools/db_stress.cc:143:DEFINE_uint64(db_write_buffer_size, rocksdb::Options().db_write_buffer_size,
./c-deps/rocksdb/tools/db_stress.cc:147:             static_cast<int32_t>(rocksdb::Options().write_buffer_size),
./c-deps/rocksdb/tools/db_stress.cc:151:             rocksdb::Options().max_write_buffer_number,
./c-deps/rocksdb/tools/db_stress.cc:156:             rocksdb::Options().min_write_buffer_number_to_merge,
./c-deps/rocksdb/tools/db_stress.cc:167:             rocksdb::Options().max_write_buffer_number_to_maintain,
./c-deps/rocksdb/tools/db_stress.cc:181:              rocksdb::Options().memtable_prefix_bloom_size_ratio,
./c-deps/rocksdb/tools/db_stress.cc:185:DEFINE_int32(open_files, rocksdb::Options().max_open_files,
./c-deps/rocksdb/tools/db_stress.cc:193:DEFINE_int32(compaction_style, rocksdb::Options().compaction_style, "");
./c-deps/rocksdb/tools/db_stress.cc:196:             rocksdb::Options().level0_file_num_compaction_trigger,
./c-deps/rocksdb/tools/db_stress.cc:200:             rocksdb::Options().level0_slowdown_writes_trigger,
./c-deps/rocksdb/tools/db_stress.cc:204:             rocksdb::Options().level0_stop_writes_trigger,
./c-deps/rocksdb/tools/db_stress.cc:208:             static_cast<int32_t>(rocksdb::BlockBasedTableOptions().block_size),
./c-deps/rocksdb/tools/db_stress.cc:212:             rocksdb::Options().max_background_compactions,
./c-deps/rocksdb/tools/db_stress.cc:228:DEFINE_int32(max_background_flushes, rocksdb::Options().max_background_flushes,
./c-deps/rocksdb/tools/db_stress.cc:297:DEFINE_bool(mmap_read, rocksdb::Options().allow_mmap_reads,
./c-deps/rocksdb/tools/db_stress.cc:300:DEFINE_bool(mmap_write, rocksdb::Options().allow_mmap_writes,
./c-deps/rocksdb/tools/db_stress.cc:303:DEFINE_bool(use_direct_reads, rocksdb::Options().use_direct_reads,
./c-deps/rocksdb/tools/db_stress.cc:307:            rocksdb::Options().use_direct_io_for_flush_and_compaction,
./c-deps/rocksdb/tools/db_stress.cc:311:static std::shared_ptr<rocksdb::Statistics> dbstats;
./c-deps/rocksdb/tools/db_stress.cc:332:DEFINE_int64(target_file_size_base, rocksdb::Options().target_file_size_base,
./c-deps/rocksdb/tools/db_stress.cc:339:              rocksdb::Options().max_bytes_for_level_base,
./c-deps/rocksdb/tools/db_stress.cc:418:enum rocksdb::CompressionType StringToCompressionType(const char* ctype) {
./c-deps/rocksdb/tools/db_stress.cc:422:    return rocksdb::kNoCompression;
./c-deps/rocksdb/tools/db_stress.cc:424:    return rocksdb::kSnappyCompression;
./c-deps/rocksdb/tools/db_stress.cc:426:    return rocksdb::kZlibCompression;
./c-deps/rocksdb/tools/db_stress.cc:428:    return rocksdb::kBZip2Compression;
./c-deps/rocksdb/tools/db_stress.cc:430:    return rocksdb::kLZ4Compression;
./c-deps/rocksdb/tools/db_stress.cc:432:    return rocksdb::kLZ4HCCompression;
./c-deps/rocksdb/tools/db_stress.cc:434:    return rocksdb::kXpressCompression;
./c-deps/rocksdb/tools/db_stress.cc:436:    return rocksdb::kZSTD;
./c-deps/rocksdb/tools/db_stress.cc:439:  return rocksdb::kSnappyCompression; //default value
./c-deps/rocksdb/tools/db_stress.cc:442:enum rocksdb::ChecksumType StringToChecksumType(const char* ctype) {
./c-deps/rocksdb/tools/db_stress.cc:444:  auto iter = rocksdb::checksum_type_string_map.find(ctype);
./c-deps/rocksdb/tools/db_stress.cc:445:  if (iter != rocksdb::checksum_type_string_map.end()) {
./c-deps/rocksdb/tools/db_stress.cc:449:  return rocksdb::kCRC32c;
./c-deps/rocksdb/tools/db_stress.cc:452:std::string ChecksumTypeToString(rocksdb::ChecksumType ctype) {
./c-deps/rocksdb/tools/db_stress.cc:454:      rocksdb::checksum_type_string_map.begin(),
./c-deps/rocksdb/tools/db_stress.cc:455:      rocksdb::checksum_type_string_map.end(),
./c-deps/rocksdb/tools/db_stress.cc:456:      [&](const std::pair<std::string, rocksdb::ChecksumType>&
./c-deps/rocksdb/tools/db_stress.cc:458:  assert(iter != rocksdb::checksum_type_string_map.end());
./c-deps/rocksdb/tools/db_stress.cc:480:static enum rocksdb::CompressionType FLAGS_compression_type_e =
./c-deps/rocksdb/tools/db_stress.cc:481:    rocksdb::kSnappyCompression;
./c-deps/rocksdb/tools/db_stress.cc:484:static enum rocksdb::ChecksumType FLAGS_checksum_type_e = rocksdb::kCRC32c;
./c-deps/rocksdb/tools/db_stress.cc:488:static rocksdb::Env* FLAGS_env = rocksdb::Env::Default();
./c-deps/rocksdb/tools/db_stress.cc:1738:        rocksdb::ColumnFamilyMetaData cf_meta_data;
./c-deps/rocksdb/tools/db_stress.cc:2234:        static_cast<rocksdb::CompactionStyle>(FLAGS_compaction_style);
./c-deps/rocksdb/tools/db_stress.cc:2449:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/tools/db_stress.cc:2454:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/tools/db_stress.cc:2459:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/tools/db_stress.cc:2463:    dbstats = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/tools/db_stress.cc:2469:    FLAGS_env  = new rocksdb::HdfsEnv(FLAGS_hdfs);
./c-deps/rocksdb/tools/db_stress.cc:2477:                                  rocksdb::Env::Priority::BOTTOM);
./c-deps/rocksdb/tools/db_stress.cc:2536:      rocksdb::Env::Default()->GetTestDirectory(&default_db_path);
./c-deps/rocksdb/tools/db_stress.cc:2544:  rocksdb::StressTest stress;
./c-deps/rocksdb/tools/dump/rocksdb_undump.cc:39:  rocksdb::UndumpOptions undump_options;
./c-deps/rocksdb/tools/dump/rocksdb_undump.cc:44:  rocksdb::Options db_options;
./c-deps/rocksdb/tools/dump/rocksdb_undump.cc:46:    rocksdb::Options parsed_options;
./c-deps/rocksdb/tools/dump/rocksdb_undump.cc:47:    rocksdb::Status s = rocksdb::GetOptionsFromString(
./c-deps/rocksdb/tools/dump/rocksdb_undump.cc:56:  rocksdb::DbUndumpTool tool;
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:23:                     rocksdb::Options options) {
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:24:  rocksdb::DB* dbptr;
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:25:  rocksdb::Status status;
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:26:  std::unique_ptr<rocksdb::WritableFile> dumpfile;
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:35:  rocksdb::Env* env = rocksdb::Env::Default();
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:39:  status = rocksdb::DB::OpenForReadOnly(options, dump_options.db_path, &dbptr);
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:46:  const std::unique_ptr<rocksdb::DB> db(dbptr);
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:49:                                rocksdb::EnvOptions());
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:56:  rocksdb::Slice magicslice(magicstr, 8);
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:63:  rocksdb::Slice versionslice(versionstr, 8);
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:82:  rocksdb::Slice infoslice(json, strlen(json));
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:84:  rocksdb::EncodeFixed32(infosize, (uint32_t)infoslice.size());
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:85:  rocksdb::Slice infosizeslice(infosize, 4);
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:97:  const std::unique_ptr<rocksdb::Iterator> it(
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:98:      db->NewIterator(rocksdb::ReadOptions()));
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:101:    rocksdb::EncodeFixed32(keysize, (uint32_t)it->key().size());
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:102:    rocksdb::Slice keysizeslice(keysize, 4);
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:115:    rocksdb::EncodeFixed32(valsize, (uint32_t)it->value().size());
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:116:    rocksdb::Slice valsizeslice(valsize, 4);
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:137:                       rocksdb::Options options) {
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:138:  rocksdb::DB* dbptr;
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:139:  rocksdb::Status status;
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:140:  rocksdb::Env* env;
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:141:  std::unique_ptr<rocksdb::SequentialFile> dumpfile;
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:142:  rocksdb::Slice slice;
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:148:  env = rocksdb::Env::Default();
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:151:                                  rocksdb::EnvOptions());
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:179:  uint32_t infosize = rocksdb::DecodeFixed32(slice.data());
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:187:  status = rocksdb::DB::Open(options, undump_options.db_path, &dbptr);
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:194:  const std::unique_ptr<rocksdb::DB> db(dbptr);
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:203:    rocksdb::Slice keyslice;
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:204:    rocksdb::Slice valslice;
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:208:    keysize = rocksdb::DecodeFixed32(slice.data());
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:229:    valsize = rocksdb::DecodeFixed32(slice.data());
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:243:    status = db->Put(rocksdb::WriteOptions(), keyslice, valslice);
./c-deps/rocksdb/tools/dump/db_dump_tool.cc:251:    status = db->CompactRange(rocksdb::CompactRangeOptions(), nullptr, nullptr);
./c-deps/rocksdb/tools/dump/rocksdb_dump.cc:40:  rocksdb::DumpOptions dump_options;
./c-deps/rocksdb/tools/dump/rocksdb_dump.cc:45:  rocksdb::Options db_options;
./c-deps/rocksdb/tools/dump/rocksdb_dump.cc:47:    rocksdb::Options parsed_options;
./c-deps/rocksdb/tools/dump/rocksdb_dump.cc:48:    rocksdb::Status s = rocksdb::GetOptionsFromString(
./c-deps/rocksdb/tools/dump/rocksdb_dump.cc:57:  rocksdb::DbDumpTool tool;
./c-deps/rocksdb/tools/blob_dump.cc:15:using namespace rocksdb::blob_db;
./c-deps/rocksdb/tools/ldb.cc:11:  rocksdb::LDBTool tool;
./c-deps/rocksdb/tools/sst_dump_test.cc:43:  std::shared_ptr<rocksdb::TableFactory> tf;
./c-deps/rocksdb/tools/sst_dump_test.cc:44:  tf.reset(new rocksdb::BlockBasedTableFactory(table_options));
./c-deps/rocksdb/tools/sst_dump_test.cc:52:  rocksdb::InternalKeyComparator ikc(opts.comparator);
./c-deps/rocksdb/tools/sst_dump_test.cc:112:  rocksdb::SSTDumpTool tool;
./c-deps/rocksdb/tools/sst_dump_test.cc:122:  table_options_.filter_policy.reset(rocksdb::NewBloomFilterPolicy(10, true));
./c-deps/rocksdb/tools/sst_dump_test.cc:134:  rocksdb::SSTDumpTool tool;
./c-deps/rocksdb/tools/sst_dump_test.cc:144:  table_options_.filter_policy.reset(rocksdb::NewBloomFilterPolicy(10, false));
./c-deps/rocksdb/tools/sst_dump_test.cc:156:  rocksdb::SSTDumpTool tool;
./c-deps/rocksdb/tools/sst_dump_test.cc:166:  table_options_.filter_policy.reset(rocksdb::NewBloomFilterPolicy(10, false));
./c-deps/rocksdb/tools/sst_dump_test.cc:178:  rocksdb::SSTDumpTool tool;
./c-deps/rocksdb/tools/sst_dump_test.cc:188:  table_options_.filter_policy.reset(rocksdb::NewBloomFilterPolicy(10, false));
./c-deps/rocksdb/tools/sst_dump_test.cc:200:  rocksdb::SSTDumpTool tool;
./c-deps/rocksdb/tools/reduce_levels_test.cc:83:  rocksdb::Options opt;
./c-deps/rocksdb/tools/reduce_levels_test.cc:86:  rocksdb::Status st = rocksdb::DB::Open(opt, dbname_, &db_);
./c-deps/rocksdb/tools/reduce_levels_test.cc:94:  std::vector<std::string> args = rocksdb::ReduceDBLevelsCommand::PrepareArgs(
./c-deps/rocksdb/tools/db_sanity_test.cc:294:  bool sanity_ok = rocksdb::RunSanityTests(command, path);
./c-deps/rocksdb/cache/cache_bench.cc:160:    rocksdb::Env* env = rocksdb::Env::Default();
./c-deps/rocksdb/cache/cache_bench.cc:273:  rocksdb::CacheBench bench;
./c-deps/rocksdb/utilities/lua/rocks_lua_test.cc:54:      std::shared_ptr<rocksdb::lua::RocksLuaCompactionFilterFactory>*
./c-deps/rocksdb/utilities/lua/rocks_lua_test.cc:60:        std::make_shared<rocksdb::lua::RocksLuaCompactionFilterFactory>(
./c-deps/rocksdb/utilities/lua/rocks_lua_test.cc:379:  std::shared_ptr<rocksdb::lua::RocksLuaCompactionFilterFactory> factory;
./c-deps/rocksdb/utilities/lua/rocks_lua_test.cc:383:      rocksdb::DB::Properties::kNumEntriesActiveMemTable, &count));
./c-deps/rocksdb/utilities/lua/rocks_lua_test.cc:386:      rocksdb::DB::Properties::kNumEntriesImmMemTables, &count));
./c-deps/rocksdb/utilities/lua/rocks_lua_test.cc:391:      rocksdb::BottommostLevelCompaction::kForce;
./c-deps/rocksdb/utilities/lua/rocks_lua_test.cc:479:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/utilities/geodb/geodb_impl.cc:264:  std::string lat = rocksdb::ToString(pos.latitude);
./c-deps/rocksdb/utilities/geodb/geodb_impl.cc:265:  std::string lon = rocksdb::ToString(pos.longitude);
./c-deps/rocksdb/utilities/column_aware_encoding_exp.cc:161:  rocksdb::ColumnAwareEncodingExp::Run(sst_file);
./c-deps/rocksdb/utilities/merge_operators/string_append/stringappend_test.cc:145:  std::unique_ptr<rocksdb::Iterator> it(db_->NewIterator(ReadOptions()));
./c-deps/rocksdb/utilities/merge_operators/string_append/stringappend_test.cc:469:    db->Flush(rocksdb::FlushOptions());
./c-deps/rocksdb/utilities/merge_operators/string_append/stringappend_test.cc:477:    db->Flush(rocksdb::FlushOptions());
./c-deps/rocksdb/utilities/merge_operators/string_append/stringappend_test.cc:548:    db->Flush(rocksdb::FlushOptions());
./c-deps/rocksdb/utilities/merge_operators/max.cc:12:using rocksdb::Slice;
./c-deps/rocksdb/utilities/merge_operators/max.cc:13:using rocksdb::Logger;
./c-deps/rocksdb/utilities/merge_operators/max.cc:14:using rocksdb::MergeOperator;
./c-deps/rocksdb/utilities/redis/README:2:Right now it is written as a simple tag-on in the rocksdb::RedisLists class.
./c-deps/rocksdb/utilities/redis/redis_lists_test.cc:880:    return rocksdb::manual_redis_test(destructive);
./c-deps/rocksdb/utilities/table_properties_collectors/compact_on_deletion_collector_test.cc:28:  rocksdb::TablePropertiesCollectorFactory::Context context;
./c-deps/rocksdb/utilities/table_properties_collectors/compact_on_deletion_collector_test.cc:30:      rocksdb::TablePropertiesCollectorFactory::Context::kUnknownColumnFamily;
./c-deps/rocksdb/utilities/table_properties_collectors/compact_on_deletion_collector_test.cc:41:  rocksdb::Random rnd(301);
./c-deps/rocksdb/utilities/table_properties_collectors/compact_on_deletion_collector_test.cc:61:      auto factory = rocksdb::NewCompactOnDeletionCollectorFactory(
./c-deps/rocksdb/utilities/table_properties_collectors/compact_on_deletion_collector_test.cc:65:        std::unique_ptr<rocksdb::TablePropertiesCollector> collector(
./c-deps/rocksdb/utilities/table_properties_collectors/compact_on_deletion_collector_test.cc:71:                                  rocksdb::kEntryDelete, 0, 0);
./c-deps/rocksdb/utilities/table_properties_collectors/compact_on_deletion_collector_test.cc:75:                                  rocksdb::kEntryPut, 0, 0);
./c-deps/rocksdb/utilities/table_properties_collectors/compact_on_deletion_collector_test.cc:93:      auto factory = rocksdb::NewCompactOnDeletionCollectorFactory(
./c-deps/rocksdb/utilities/table_properties_collectors/compact_on_deletion_collector_test.cc:97:        std::unique_ptr<rocksdb::TablePropertiesCollector> collector(
./c-deps/rocksdb/utilities/table_properties_collectors/compact_on_deletion_collector_test.cc:104:                                  rocksdb::kEntryPut, 0, 0);
./c-deps/rocksdb/utilities/table_properties_collectors/compact_on_deletion_collector_test.cc:110:                                  rocksdb::kEntryDelete, 0, 0);
./c-deps/rocksdb/utilities/table_properties_collectors/compact_on_deletion_collector_test.cc:114:                                  rocksdb::kEntryPut, 0, 0);
./c-deps/rocksdb/utilities/table_properties_collectors/compact_on_deletion_collector_test.cc:121:                                  rocksdb::kEntryPut, 0, 0);
./c-deps/rocksdb/utilities/table_properties_collectors/compact_on_deletion_collector_test.cc:140:      std::unique_ptr<rocksdb::TablePropertiesCollector> collector;
./c-deps/rocksdb/utilities/table_properties_collectors/compact_on_deletion_collector_test.cc:141:      auto factory = rocksdb::NewCompactOnDeletionCollectorFactory(
./c-deps/rocksdb/utilities/table_properties_collectors/compact_on_deletion_collector_test.cc:153:                                    rocksdb::kEntryDelete, 0, 0);
./c-deps/rocksdb/utilities/table_properties_collectors/compact_on_deletion_collector_test.cc:156:                                    rocksdb::kEntryPut, 0, 0);
./c-deps/rocksdb/utilities/blob_db/blob_db_iterator.h:15:using rocksdb::ManagedSnapshot;
./c-deps/rocksdb/utilities/blob_db/blob_db.h:82:  using rocksdb::StackableDB::Put;
./c-deps/rocksdb/utilities/blob_db/blob_db.h:95:  using rocksdb::StackableDB::Delete;
./c-deps/rocksdb/utilities/blob_db/blob_db.h:134:  using rocksdb::StackableDB::Get;
./c-deps/rocksdb/utilities/blob_db/blob_db.h:139:  using rocksdb::StackableDB::MultiGet;
./c-deps/rocksdb/utilities/blob_db/blob_db.h:160:  using rocksdb::StackableDB::SingleDelete;
./c-deps/rocksdb/utilities/blob_db/blob_db.h:167:  using rocksdb::StackableDB::Merge;
./c-deps/rocksdb/utilities/blob_db/blob_db.h:177:  using rocksdb::StackableDB::NewIterator;
./c-deps/rocksdb/utilities/transactions/write_prepared_transaction_test.cc:237:    rocksdb::SyncPoint::GetInstance()->LoadDependency({
./c-deps/rocksdb/utilities/transactions/write_prepared_transaction_test.cc:249:    rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/utilities/transactions/write_prepared_transaction_test.cc:252:      rocksdb::port::Thread t1(
./c-deps/rocksdb/utilities/transactions/write_prepared_transaction_test.cc:254:      rocksdb::port::Thread t2([&]() { wp_db->CheckAgainstSnapshots(entry); });
./c-deps/rocksdb/utilities/transactions/write_prepared_transaction_test.cc:259:    rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/utilities/transactions/write_prepared_transaction_test.cc:265:    rocksdb::SyncPoint::GetInstance()->LoadDependency({
./c-deps/rocksdb/utilities/transactions/write_prepared_transaction_test.cc:277:    rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/utilities/transactions/write_prepared_transaction_test.cc:280:      rocksdb::port::Thread t1(
./c-deps/rocksdb/utilities/transactions/write_prepared_transaction_test.cc:282:      rocksdb::port::Thread t2([&]() { wp_db->CheckAgainstSnapshots(entry); });
./c-deps/rocksdb/utilities/transactions/write_prepared_transaction_test.cc:287:    rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/utilities/transactions/write_prepared_transaction_test.cc:638:    rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/utilities/transactions/write_prepared_transaction_test.cc:641:    rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/utilities/transactions/write_prepared_transaction_test.cc:659:    rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/utilities/transactions/write_prepared_transaction_test.cc:708:    rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/utilities/transactions/write_prepared_transaction_test.cc:709:    rocksdb::SyncPoint::GetInstance()->ClearAllCallBacks();
./c-deps/rocksdb/utilities/transactions/transaction_test.cc:179:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/utilities/transactions/transaction_test.cc:229:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/utilities/transactions/transaction_test.cc:235:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/utilities/transactions/transaction_test.cc:236:  rocksdb::SyncPoint::GetInstance()->ClearAllCallBacks();
./c-deps/rocksdb/utilities/transactions/transaction_test.cc:400:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/utilities/transactions/transaction_test.cc:403:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/utilities/transactions/transaction_test.cc:423:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/utilities/transactions/transaction_test.cc:424:  rocksdb::SyncPoint::GetInstance()->ClearAllCallBacks();
./c-deps/rocksdb/utilities/transactions/transaction_test.cc:525:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/utilities/transactions/transaction_test.cc:528:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/utilities/transactions/transaction_test.cc:547:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/utilities/transactions/transaction_test.cc:548:  rocksdb::SyncPoint::GetInstance()->ClearAllCallBacks();
./c-deps/rocksdb/utilities/transactions/transaction_test.cc:597:    rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/utilities/transactions/transaction_test.cc:600:    rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/utilities/transactions/transaction_test.cc:620:    rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/utilities/transactions/transaction_test.cc:621:    rocksdb::SyncPoint::GetInstance()->ClearAllCallBacks();
./c-deps/rocksdb/utilities/transactions/transaction_test.cc:1257:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/utilities/transactions/transaction_test.cc:1278:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/utilities/transactions/transaction_test.cc:1289:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/utilities/transactions/transaction_test.cc:1290:  rocksdb::SyncPoint::GetInstance()->ClearAllCallBacks();
./c-deps/rocksdb/utilities/transactions/transaction_test.cc:4691:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/utilities/transactions/transaction_test.cc:4693:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/utilities/transactions/transaction_test.cc:4711:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/utilities/transactions/transaction_test.cc:4731:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/utilities/checkpoint/checkpoint_test.cc:62:    rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/utilities/checkpoint/checkpoint_test.cc:63:    rocksdb::SyncPoint::GetInstance()->LoadDependency({});
./c-deps/rocksdb/utilities/checkpoint/checkpoint_test.cc:64:    rocksdb::SyncPoint::GetInstance()->ClearAllCallBacks();
./c-deps/rocksdb/utilities/checkpoint/checkpoint_test.cc:279:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/utilities/checkpoint/checkpoint_test.cc:283:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/utilities/checkpoint/checkpoint_test.cc:303:  rocksdb::port::Thread t([&]() {
./c-deps/rocksdb/utilities/checkpoint/checkpoint_test.cc:318:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/utilities/checkpoint/checkpoint_test.cc:354:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/utilities/checkpoint/checkpoint_test.cc:372:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/utilities/checkpoint/checkpoint_test.cc:377:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/utilities/checkpoint/checkpoint_test.cc:381:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/utilities/checkpoint/checkpoint_test.cc:424:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/utilities/checkpoint/checkpoint_test.cc:436:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/utilities/checkpoint/checkpoint_test.cc:438:  rocksdb::port::Thread t([&]() {
./c-deps/rocksdb/utilities/checkpoint/checkpoint_test.cc:450:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/utilities/checkpoint/checkpoint_test.cc:515:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/utilities/checkpoint/checkpoint_test.cc:520:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/utilities/checkpoint/checkpoint_test.cc:521:  rocksdb::port::Thread t([&]() {
./c-deps/rocksdb/utilities/checkpoint/checkpoint_test.cc:535:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/utilities/checkpoint/checkpoint_test.cc:561:  std::vector<rocksdb::ColumnFamilyHandle*> cf_handles;
./c-deps/rocksdb/utilities/checkpoint/checkpoint_test.cc:582:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/utilities/env_librados_test.cc:392:  rocksdb::Random64 r1(time(nullptr));
./c-deps/rocksdb/utilities/env_librados_test.cc:428:  rocksdb::Random64 r2(time(nullptr));
./c-deps/rocksdb/utilities/env_librados_test.cc:470:  rocksdb::Random64 r1(time(nullptr));
./c-deps/rocksdb/utilities/env_librados_test.cc:509:  rocksdb::Random64 r2(time(nullptr));
./c-deps/rocksdb/utilities/env_librados_test.cc:554:  rocksdb::Random64 r1(time(nullptr));
./c-deps/rocksdb/utilities/env_librados_test.cc:593:  rocksdb::Random64 r2(time(nullptr));
./c-deps/rocksdb/utilities/env_librados_test.cc:639:  rocksdb::Random64 r1(time(nullptr));
./c-deps/rocksdb/utilities/env_librados_test.cc:691:  rocksdb::Random64 r2(time(nullptr));
./c-deps/rocksdb/utilities/env_librados_test.cc:938:  rocksdb::Random64 r1(time(nullptr));
./c-deps/rocksdb/utilities/env_librados_test.cc:981:  rocksdb::Random64 r2(time(nullptr));
./c-deps/rocksdb/utilities/write_batch_with_index/write_batch_with_index_test.cc:1792:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/utilities/simulator_cache/sim_cache_test.cc:37:    options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/utilities/simulator_cache/sim_cache_test.cc:215:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/utilities/backupable/backupable_db_test.cc:1009:    rocksdb::GetLatestOptionsFileName(db_->GetName(), options_.env, &name);
./c-deps/rocksdb/utilities/backupable/backupable_db_test.cc:1404:  rocksdb::SyncPoint::GetInstance()->LoadDependency({
./c-deps/rocksdb/utilities/backupable/backupable_db_test.cc:1410:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/utilities/backupable/backupable_db_test.cc:1412:  rocksdb::port::Thread flush_thread{[this]() { ASSERT_OK(db_->Flush(FlushOptions())); }};
./c-deps/rocksdb/utilities/backupable/backupable_db_test.cc:1417:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/utilities/backupable/backupable_db_test.cc:1583:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/utilities/backupable/backupable_db.cc:254:    return GetPrivateDirRel() + "/" + rocksdb::ToString(backup_id) +
./c-deps/rocksdb/utilities/backupable/backupable_db.cc:273:                            "_" + rocksdb::ToString(checksum_value) + "_" +
./c-deps/rocksdb/utilities/backupable/backupable_db.cc:274:                                rocksdb::ToString(file_size));
./c-deps/rocksdb/utilities/backupable/backupable_db.cc:287:    return GetBackupMetaDir() + "/" + rocksdb::ToString(backup_id);
./c-deps/rocksdb/utilities/backupable/backupable_db.cc:579:    if (backup_id == 0 || file != rocksdb::ToString(backup_id)) {
./c-deps/rocksdb/utilities/backupable/backupable_db.cc:1656:      if (line != rocksdb::ToString(checksum_value)) {
./c-deps/rocksdb/utilities/cassandra/cassandra_format_test.cc:13:using namespace rocksdb::cassandra;
./c-deps/rocksdb/utilities/cassandra/cassandra_serialize_test.cc:9:using namespace rocksdb::cassandra;
./c-deps/rocksdb/utilities/cassandra/format.cc:39:  rocksdb::cassandra::Serialize<int8_t>(mask_, dest);
./c-deps/rocksdb/utilities/cassandra/format.cc:40:  rocksdb::cassandra::Serialize<int8_t>(index_, dest);
./c-deps/rocksdb/utilities/cassandra/format.cc:45:  int8_t mask = rocksdb::cassandra::Deserialize<int8_t>(src, offset);
./c-deps/rocksdb/utilities/cassandra/format.cc:75:  rocksdb::cassandra::Serialize<int64_t>(timestamp_, dest);
./c-deps/rocksdb/utilities/cassandra/format.cc:76:  rocksdb::cassandra::Serialize<int32_t>(value_size_, dest);
./c-deps/rocksdb/utilities/cassandra/format.cc:82:  int8_t mask = rocksdb::cassandra::Deserialize<int8_t>(src, offset);
./c-deps/rocksdb/utilities/cassandra/format.cc:84:  int8_t index = rocksdb::cassandra::Deserialize<int8_t>(src, offset);
./c-deps/rocksdb/utilities/cassandra/format.cc:86:  int64_t timestamp = rocksdb::cassandra::Deserialize<int64_t>(src, offset);
./c-deps/rocksdb/utilities/cassandra/format.cc:88:  int32_t value_size = rocksdb::cassandra::Deserialize<int32_t>(src, offset);
./c-deps/rocksdb/utilities/cassandra/format.cc:110:  rocksdb::cassandra::Serialize<int32_t>(ttl_, dest);
./c-deps/rocksdb/utilities/cassandra/format.cc:141:  int8_t mask = rocksdb::cassandra::Deserialize<int8_t>(src, offset);
./c-deps/rocksdb/utilities/cassandra/format.cc:143:  int8_t index = rocksdb::cassandra::Deserialize<int8_t>(src, offset);
./c-deps/rocksdb/utilities/cassandra/format.cc:145:  int64_t timestamp = rocksdb::cassandra::Deserialize<int64_t>(src, offset);
./c-deps/rocksdb/utilities/cassandra/format.cc:147:  int32_t value_size = rocksdb::cassandra::Deserialize<int32_t>(src, offset);
./c-deps/rocksdb/utilities/cassandra/format.cc:151:  int32_t ttl =  rocksdb::cassandra::Deserialize<int32_t>(src, offset);
./c-deps/rocksdb/utilities/cassandra/format.cc:175:  rocksdb::cassandra::Serialize<int32_t>(local_deletion_time_, dest);
./c-deps/rocksdb/utilities/cassandra/format.cc:176:  rocksdb::cassandra::Serialize<int64_t>(marked_for_delete_at_, dest);
./c-deps/rocksdb/utilities/cassandra/format.cc:188:  int8_t mask = rocksdb::cassandra::Deserialize<int8_t>(src, offset);
./c-deps/rocksdb/utilities/cassandra/format.cc:190:  int8_t index = rocksdb::cassandra::Deserialize<int8_t>(src, offset);
./c-deps/rocksdb/utilities/cassandra/format.cc:193:    rocksdb::cassandra::Deserialize<int32_t>(src, offset);
./c-deps/rocksdb/utilities/cassandra/format.cc:196:    rocksdb::cassandra::Deserialize<int64_t>(src, offset);
./c-deps/rocksdb/utilities/cassandra/format.cc:234:  rocksdb::cassandra::Serialize<int32_t>(local_deletion_time_, dest);
./c-deps/rocksdb/utilities/cassandra/format.cc:235:  rocksdb::cassandra::Serialize<int64_t>(marked_for_delete_at_, dest);
./c-deps/rocksdb/utilities/cassandra/format.cc:305:    rocksdb::cassandra::Deserialize<int32_t>(src, offset);
./c-deps/rocksdb/utilities/cassandra/format.cc:308:    rocksdb::cassandra::Deserialize<int64_t>(src, offset);
./c-deps/rocksdb/utilities/persistent_cache/persistent_cache_test.cc:27:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/utilities/persistent_cache/persistent_cache_test.cc:35:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/utilities/persistent_cache/persistent_cache_test.cc:137:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/utilities/persistent_cache/persistent_cache_test.cc:138:  rocksdb::SyncPoint::GetInstance()->SetCallBack("NewRandomAccessFile:O_DIRECT",
./c-deps/rocksdb/utilities/persistent_cache/persistent_cache_test.cc:140:  rocksdb::SyncPoint::GetInstance()->SetCallBack("NewWritableFile:O_DIRECT",
./c-deps/rocksdb/utilities/persistent_cache/persistent_cache_test.cc:150:  rocksdb::SyncPoint::GetInstance()->SetCallBack( 
./c-deps/rocksdb/utilities/persistent_cache/persistent_cache_test.cc:157:  rocksdb::SyncPoint::GetInstance()->ClearAllCallBacks();
./c-deps/rocksdb/utilities/persistent_cache/persistent_cache_test.cc:273:  rocksdb::SyncPoint::GetInstance()->ClearTrace();
./c-deps/rocksdb/utilities/persistent_cache/persistent_cache_test.cc:274:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/utilities/persistent_cache/persistent_cache_test.cc:296:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/utilities/persistent_cache/persistent_cache_test.cc:297:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/utilities/persistent_cache/persistent_cache_test.cc:299:  rocksdb::SyncPoint::GetInstance()->SetCallBack("NewRandomAccessFile:O_DIRECT",
./c-deps/rocksdb/utilities/persistent_cache/persistent_cache_test.cc:319:    options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/utilities/persistent_cache/persistent_cache_bench.cc:332:  std::shared_ptr<rocksdb::PersistentCacheTier> cache;
./c-deps/rocksdb/utilities/persistent_cache/persistent_cache_bench.cc:335:    cache = rocksdb::NewBlockCache();
./c-deps/rocksdb/utilities/persistent_cache/persistent_cache_bench.cc:338:    cache = rocksdb::NewVolatileCache();
./c-deps/rocksdb/utilities/persistent_cache/persistent_cache_bench.cc:341:    cache = rocksdb::NewTieredCache();
./c-deps/rocksdb/utilities/persistent_cache/persistent_cache_bench.cc:352:  std::unique_ptr<rocksdb::CacheTierBenchmark> benchmark(
./c-deps/rocksdb/utilities/persistent_cache/persistent_cache_bench.cc:353:      new rocksdb::CacheTierBenchmark(std::move(cache)));
./c-deps/rocksdb/utilities/persistent_cache/block_cache_tier.h:144:  rocksdb::port::Thread insert_th_;                       // Insert thread
./c-deps/rocksdb/utilities/persistent_cache/hash_table_bench.cc:284:    rocksdb::SimpleImpl impl;
./c-deps/rocksdb/utilities/persistent_cache/hash_table_bench.cc:285:    rocksdb::HashTableBenchmark _(&impl, FLAGS_nsec, FLAGS_nthread_write,
./c-deps/rocksdb/utilities/persistent_cache/hash_table_bench.cc:293:    rocksdb::GranularLockImpl impl;
./c-deps/rocksdb/utilities/persistent_cache/hash_table_bench.cc:294:    rocksdb::HashTableBenchmark _(&impl, FLAGS_nsec, FLAGS_nthread_write,
./c-deps/rocksdb/utilities/option_change_migration/option_change_migration_test.cc:422:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/util/rate_limiter_test.cc:135:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/util/rate_limiter_test.cc:159:      rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/util/rate_limiter_test.cc:201:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/util/rate_limiter_test.cc:206:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/util/rate_limiter_test.cc:221:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/util/slice_transform_test.cc:101:  last_options_.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/util/log_write_bench.cc:80:  rocksdb::RunBenchmark();
./c-deps/rocksdb/util/hash_test.cc:19:  using rocksdb::Hash;
./c-deps/rocksdb/util/delete_scheduler_test.cc:36:    rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/util/delete_scheduler_test.cc:37:    rocksdb::SyncPoint::GetInstance()->LoadDependency({});
./c-deps/rocksdb/util/delete_scheduler_test.cc:38:    rocksdb::SyncPoint::GetInstance()->ClearAllCallBacks();
./c-deps/rocksdb/util/delete_scheduler_test.cc:109:  rocksdb::SyncPoint::GetInstance()->LoadDependency({
./c-deps/rocksdb/util/delete_scheduler_test.cc:115:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/util/delete_scheduler_test.cc:125:    rocksdb::SyncPoint::GetInstance()->ClearTrace();
./c-deps/rocksdb/util/delete_scheduler_test.cc:126:    rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/util/delete_scheduler_test.cc:164:    rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/util/delete_scheduler_test.cc:176:  rocksdb::SyncPoint::GetInstance()->LoadDependency({
./c-deps/rocksdb/util/delete_scheduler_test.cc:182:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/util/delete_scheduler_test.cc:193:    rocksdb::SyncPoint::GetInstance()->ClearTrace();
./c-deps/rocksdb/util/delete_scheduler_test.cc:194:    rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/util/delete_scheduler_test.cc:247:    rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/util/delete_scheduler_test.cc:256:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/util/delete_scheduler_test.cc:260:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/util/delete_scheduler_test.cc:276:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/util/delete_scheduler_test.cc:286:  rocksdb::SyncPoint::GetInstance()->LoadDependency({
./c-deps/rocksdb/util/delete_scheduler_test.cc:290:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/util/delete_scheduler_test.cc:312:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/util/delete_scheduler_test.cc:322:  rocksdb::SyncPoint::GetInstance()->LoadDependency({
./c-deps/rocksdb/util/delete_scheduler_test.cc:326:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/util/delete_scheduler_test.cc:353:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/util/delete_scheduler_test.cc:363:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/util/delete_scheduler_test.cc:366:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/util/delete_scheduler_test.cc:388:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/util/delete_scheduler_test.cc:398:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/util/delete_scheduler_test.cc:401:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/util/delete_scheduler_test.cc:418:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/util/delete_scheduler_test.cc:425:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/util/delete_scheduler_test.cc:428:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/util/delete_scheduler_test.cc:431:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/util/delete_scheduler_test.cc:435:  rocksdb::SyncPoint::GetInstance()->LoadDependency({
./c-deps/rocksdb/util/delete_scheduler_test.cc:439:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/util/delete_scheduler_test.cc:453:    rocksdb::SyncPoint::GetInstance()->ClearTrace();
./c-deps/rocksdb/util/delete_scheduler_test.cc:454:    rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/util/delete_scheduler_test.cc:500:    rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/util/delete_scheduler_test.cc:507:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/util/delete_scheduler_test.cc:510:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/util/delete_scheduler_test.cc:513:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/util/delete_scheduler_test.cc:536:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/util/event_logger.cc:53:  rocksdb::Log(logger, "%s %s", Prefix(), jwriter.Get().c_str());
./c-deps/rocksdb/util/event_logger.cc:63:  rocksdb::LogToBuffer(log_buffer, "%s %s", Prefix(), jwriter.Get().c_str());
./c-deps/rocksdb/util/autovector_test.cc:208:    key = "item-" + rocksdb::ToString(index++);
./c-deps/rocksdb/util/filelock_test.cc:19:  rocksdb::Env* env_;
./c-deps/rocksdb/util/filelock_test.cc:22:               env_(rocksdb::Env::Default()) {
./c-deps/rocksdb/util/slice_test.cc:67:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/util/timer_queue.h:219:  rocksdb::port::Thread m_th;
./c-deps/rocksdb/util/testutil.h:462:  bool Filter(int level, const rocksdb::Slice& key, const rocksdb::Slice& value,
./c-deps/rocksdb/util/testutil.h:470:  bool FilterMergeOperand(int level, const rocksdb::Slice& key,
./c-deps/rocksdb/util/testutil.h:471:                          const rocksdb::Slice& value) const override {
./c-deps/rocksdb/util/logging.h:23:  rocksdb::Log(InfoLogLevel::HEADER_LEVEL, LGR, FMT, ##__VA_ARGS__)
./c-deps/rocksdb/util/logging.h:26:  rocksdb::Log(InfoLogLevel::DEBUG_LEVEL, LGR, PREPEND_FILE_LINE(FMT), \
./c-deps/rocksdb/util/logging.h:30:  rocksdb::Log(InfoLogLevel::INFO_LEVEL, LGR, PREPEND_FILE_LINE(FMT), \
./c-deps/rocksdb/util/logging.h:34:  rocksdb::Log(InfoLogLevel::WARN_LEVEL, LGR, PREPEND_FILE_LINE(FMT), \
./c-deps/rocksdb/util/logging.h:38:  rocksdb::Log(InfoLogLevel::ERROR_LEVEL, LGR, PREPEND_FILE_LINE(FMT), \
./c-deps/rocksdb/util/logging.h:42:  rocksdb::Log(InfoLogLevel::FATAL_LEVEL, LGR, PREPEND_FILE_LINE(FMT), \
./c-deps/rocksdb/util/logging.h:46:  rocksdb::LogToBuffer(LOG_BUF, PREPEND_FILE_LINE(FMT), ##__VA_ARGS__)
./c-deps/rocksdb/util/logging.h:49:  rocksdb::LogToBuffer(LOG_BUF, MAX_LOG_SIZE, PREPEND_FILE_LINE(FMT), \
./c-deps/rocksdb/util/testharness.h:34:#define ASSERT_OK(s) ASSERT_PRED_FORMAT1(rocksdb::test::AssertStatus, s)
./c-deps/rocksdb/util/testharness.h:36:#define EXPECT_OK(s) EXPECT_PRED_FORMAT1(rocksdb::test::AssertStatus, s)
./c-deps/rocksdb/util/sync_point.h:138:#define TEST_SYNC_POINT(x) rocksdb::SyncPoint::GetInstance()->Process(x)
./c-deps/rocksdb/util/sync_point.h:140:  rocksdb::SyncPoint::GetInstance()->Process(x + std::to_string(index))
./c-deps/rocksdb/util/sync_point.h:142:  rocksdb::SyncPoint::GetInstance()->Process(x, y)
./c-deps/rocksdb/util/thread_local_test.cc:556:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/util/thread_local_test.cc:566:    rocksdb::port::Thread th(&AccessThreadLocal, nullptr);
./c-deps/rocksdb/util/fault_injection_test_env.cc:42:  rocksdb::Slice result;
./c-deps/rocksdb/util/auto_roll_logger_test.cc:283:  rocksdb::port::Thread flush_thread;
./c-deps/rocksdb/util/auto_roll_logger_test.cc:294:  rocksdb::SyncPoint::GetInstance()->LoadDependencyAndMarkers(
./c-deps/rocksdb/util/auto_roll_logger_test.cc:303:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/util/auto_roll_logger_test.cc:311:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/util/auto_roll_logger_test.cc:454:  rocksdb::DB* db;
./c-deps/rocksdb/util/auto_roll_logger_test.cc:455:  rocksdb::Options options;
./c-deps/rocksdb/util/auto_roll_logger_test.cc:469:  ASSERT_OK(rocksdb::DB::Open(options, kTestDir, &db));
./c-deps/rocksdb/table/cleanable_test.cc:274:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/table/index_builder.h:39:      const rocksdb::InternalKeyComparator* comparator,
./c-deps/rocksdb/table/index_builder.h:284:      const rocksdb::InternalKeyComparator* comparator,
./c-deps/rocksdb/table/cuckoo_table_reader_test.cc:547:  if (rocksdb::port::kLittleEndian) {
./c-deps/rocksdb/table/block_prefix_index.cc:20:  return rocksdb::Hash(s.data(), s.size(), 0);
./c-deps/rocksdb/table/partitioned_filter_block_test.cc:72:    auto filter_bits_reader = dynamic_cast<rocksdb::FullFilterBitsBuilder*>(
./c-deps/rocksdb/table/block_based_filter_block.cc:51:  std::string key_str = rocksdb::ToString(key);
./c-deps/rocksdb/table/block_based_filter_block.cc:240:  AppendItem(&result, s_fb, rocksdb::ToString(num_));
./c-deps/rocksdb/table/block_based_filter_block.cc:248:      result.append(" filter block # " + rocksdb::ToString(index + 1) + "\n");
./c-deps/rocksdb/table/block_test.cc:273:    std::shared_ptr<Statistics> stats = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/table/block_test.cc:356:    std::shared_ptr<Statistics> stats = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/table/block_test.cc:390:    std::shared_ptr<Statistics> stats = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/table/block_test.cc:426:    std::shared_ptr<Statistics> stats = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/table/block_test.cc:466:  std::shared_ptr<Statistics> stats = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/table/block.h:41:// BlockReadAmpBitmap is a bitmap that map the rocksdb::Block data bytes to
./c-deps/rocksdb/table/table_reader_bench.cc:77:  rocksdb::InternalKeyComparator ikc(opts.comparator);
./c-deps/rocksdb/table/table_reader_bench.cc:280:  std::shared_ptr<rocksdb::TableFactory> tf;
./c-deps/rocksdb/table/table_reader_bench.cc:281:  rocksdb::Options options;
./c-deps/rocksdb/table/table_reader_bench.cc:283:    options.prefix_extractor.reset(rocksdb::NewFixedPrefixTransform(
./c-deps/rocksdb/table/table_reader_bench.cc:286:  rocksdb::ReadOptions ro;
./c-deps/rocksdb/table/table_reader_bench.cc:287:  rocksdb::EnvOptions env_options;
./c-deps/rocksdb/table/table_reader_bench.cc:289:  options.compression = rocksdb::CompressionType::kNoCompression;
./c-deps/rocksdb/table/table_reader_bench.cc:295:    rocksdb::CuckooTableOptions table_options;
./c-deps/rocksdb/table/table_reader_bench.cc:297:    tf.reset(rocksdb::NewCuckooTableFactory(table_options));
./c-deps/rocksdb/table/table_reader_bench.cc:307:    rocksdb::PlainTableOptions plain_table_options;
./c-deps/rocksdb/table/table_reader_bench.cc:312:    tf.reset(new rocksdb::PlainTableFactory(plain_table_options));
./c-deps/rocksdb/table/table_reader_bench.cc:313:    options.prefix_extractor.reset(rocksdb::NewFixedPrefixTransform(
./c-deps/rocksdb/table/table_reader_bench.cc:320:    tf.reset(new rocksdb::BlockBasedTableFactory());
./c-deps/rocksdb/table/table_reader_bench.cc:330:    rocksdb::TableReaderBenchmark(options, env_options, ro, FLAGS_num_keys1,
./c-deps/rocksdb/table/block_based_table_reader.cc:753:    s = rocksdb::ReadMetaBlock(rep->file.get(), prefetch_buffer.get(),
./c-deps/rocksdb/table/block_based_table_reader.cc:755:                               rep->ioptions, rocksdb::kCompressionDictBlock,
./c-deps/rocksdb/table/block_based_table_reader.cc:2149:      if (meta_iter->key() == rocksdb::kPropertiesBlock) {
./c-deps/rocksdb/table/block_based_table_reader.cc:2153:      } else if (meta_iter->key() == rocksdb::kCompressionDictBlock) {
./c-deps/rocksdb/table/block_based_table_reader.cc:2162:      } else if (meta_iter->key() == rocksdb::kRangeDelBlock) {
./c-deps/rocksdb/table/block_based_table_reader.cc:2174:  const rocksdb::TableProperties* table_properties;
./c-deps/rocksdb/table/block_based_table_reader.cc:2189:    rocksdb::BlockBasedTableOptions table_options;
./c-deps/rocksdb/table/block_based_table_reader.cc:2190:    table_options.filter_policy.reset(rocksdb::NewBloomFilterPolicy(1));
./c-deps/rocksdb/table/block_based_table_reader.cc:2234:    out_file->Append(rocksdb::ToString(compression_dict.size()));
./c-deps/rocksdb/table/block_based_table_reader.cc:2362:    out_file->Append(rocksdb::ToString(block_id));
./c-deps/rocksdb/table/block_based_table_reader.cc:2397:    out_file->Append(rocksdb::ToString(num_datablocks));
./c-deps/rocksdb/table/block_based_table_reader.cc:2399:    out_file->Append(rocksdb::ToString(datablock_size_min));
./c-deps/rocksdb/table/block_based_table_reader.cc:2401:    out_file->Append(rocksdb::ToString(datablock_size_max));
./c-deps/rocksdb/table/block_based_table_reader.cc:2403:    out_file->Append(rocksdb::ToString(datablock_size_avg));
./c-deps/rocksdb/table/format.cc:207:                  rocksdb::ToString(table_magic_number_) + "\n  ");
./c-deps/rocksdb/table/format.cc:209:    result.append("checksum: " + rocksdb::ToString(checksum_) + "\n  ");
./c-deps/rocksdb/table/format.cc:212:    result.append("footer version: " + rocksdb::ToString(version_) + "\n  ");
./c-deps/rocksdb/table/format.cc:214:                  rocksdb::ToString(table_magic_number_) + "\n  ");
./c-deps/rocksdb/table/format.cc:354:  rocksdb::CompressionType compression_type;
./c-deps/rocksdb/table/format.cc:436:  compression_type = static_cast<rocksdb::CompressionType>(slice.data()[n]);
./c-deps/rocksdb/table/table_test.cc:2210:            table_options.block_cache = std::shared_ptr<rocksdb::Cache>(
./c-deps/rocksdb/table/table_test.cc:2213:                rocksdb::NewBloomFilterPolicy(10, block_based_filter));
./c-deps/rocksdb/table/table_test.cc:2334:  rocksdb::SyncPoint::GetInstance()->LoadDependencyAndMarkers(
./c-deps/rocksdb/table/table_test.cc:2352:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/table/table_test.cc:2371:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/table/table_test.cc:2853:class TestPrefixExtractor : public rocksdb::SliceTransform {
./c-deps/rocksdb/table/table_test.cc:2858:  rocksdb::Slice Transform(const rocksdb::Slice& src) const override {
./c-deps/rocksdb/table/table_test.cc:2860:    return rocksdb::Slice(src.data(), 3);
./c-deps/rocksdb/table/table_test.cc:2863:  bool InDomain(const rocksdb::Slice& src) const override {
./c-deps/rocksdb/table/table_test.cc:2868:  bool InRange(const rocksdb::Slice& dst) const override { return true; }
./c-deps/rocksdb/table/table_test.cc:2870:  bool IsValid(const rocksdb::Slice& src) const {
./c-deps/rocksdb/table/table_test.cc:2892:  rocksdb::Options options;
./c-deps/rocksdb/table/table_test.cc:2893:  options.compaction_style = rocksdb::kCompactionStyleUniversal;
./c-deps/rocksdb/table/table_test.cc:2899:  rocksdb::BlockBasedTableOptions bbto;
./c-deps/rocksdb/table/table_test.cc:2900:  bbto.filter_policy.reset(rocksdb::NewBloomFilterPolicy(10));
./c-deps/rocksdb/table/table_test.cc:2907:  rocksdb::DB* db;
./c-deps/rocksdb/table/table_test.cc:2908:  ASSERT_OK(rocksdb::DB::Open(options, kDBPath, &db));
./c-deps/rocksdb/table/table_test.cc:2915:      db->Put(rocksdb::WriteOptions(), key, "1");
./c-deps/rocksdb/table/table_properties.cc:111:                 column_family_id == rocksdb::TablePropertiesCollectorFactory::
./c-deps/rocksdb/table/table_properties.cc:114:                     : rocksdb::ToString(column_family_id),
./c-deps/rocksdb/HISTORY.md:415:* Add rocksdb::GetThreadList(), which in the future will return the current status of all
./c-deps/rocksdb/env/env_test.cc:950:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/env/env_test.cc:1012:  rocksdb::SyncPoint::GetInstance()->ClearTrace();
./c-deps/rocksdb/env/env_test.cc:1135:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/env/env_test.cc:1142:      rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/env/env_test.cc:1185:  rocksdb::SyncPoint::GetInstance()->ClearTrace();
./c-deps/rocksdb/env/env_test.cc:1191:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/env/env_test.cc:1204:        rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/env/env_test.cc:1235:    rocksdb::SyncPoint::GetInstance()->ClearTrace();
./c-deps/rocksdb/include/rocksdb/table_properties.h:154:      rocksdb::TablePropertiesCollectorFactory::Context::kUnknownColumnFamily;
./c-deps/rocksdb/include/rocksdb/db.h:138:  // in rocksdb::kDefaultColumnFamilyName
./c-deps/rocksdb/include/rocksdb/db.h:156:  // in rocksdb::kDefaultColumnFamilyName.
./c-deps/rocksdb/include/rocksdb/db_dump_tool.h:27:           rocksdb::Options options = rocksdb::Options());
./c-deps/rocksdb/include/rocksdb/db_dump_tool.h:42:           rocksdb::Options options = rocksdb::Options());
./c-deps/rocksdb/include/rocksdb/utilities/lua/rocks_lua_compaction_filter.h:159:class RocksLuaCompactionFilter : public rocksdb::CompactionFilter {
./c-deps/rocksdb/include/rocksdb/thread_status.h:41:// rocksdb::GetThreadList().
./c-deps/rocksdb/monitoring/statistics_test.cc:32:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/db_dynamic_level_test.cc:195:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_dynamic_level_test.cc:198:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_dynamic_level_test.cc:217:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_dynamic_level_test.cc:243:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_dynamic_level_test.cc:244:  rocksdb::SyncPoint::GetInstance()->ClearAllCallBacks();
./c-deps/rocksdb/db/db_dynamic_level_test.cc:246:  rocksdb::SyncPoint::GetInstance()->LoadDependency({
./c-deps/rocksdb/db/db_dynamic_level_test.cc:252:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_dynamic_level_test.cc:254:  rocksdb::port::Thread thread([this] {
./c-deps/rocksdb/db/db_dynamic_level_test.cc:271:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_dynamic_level_test.cc:272:  rocksdb::SyncPoint::GetInstance()->ClearAllCallBacks();
./c-deps/rocksdb/db/db_dynamic_level_test.cc:335:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_dynamic_level_test.cc:336:  rocksdb::SyncPoint::GetInstance()->ClearAllCallBacks();
./c-deps/rocksdb/db/db_dynamic_level_test.cc:339:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_dynamic_level_test.cc:344:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_dynamic_level_test.cc:379:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_dynamic_level_test.cc:382:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_dynamic_level_test.cc:394:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_dynamic_level_test.cc:463:  rocksdb::port::Thread t([&]() {
./c-deps/rocksdb/db/db_dynamic_level_test.cc:500:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/c.cc:42:using rocksdb::BytewiseComparator;
./c-deps/rocksdb/db/c.cc:43:using rocksdb::Cache;
./c-deps/rocksdb/db/c.cc:44:using rocksdb::ColumnFamilyDescriptor;
./c-deps/rocksdb/db/c.cc:45:using rocksdb::ColumnFamilyHandle;
./c-deps/rocksdb/db/c.cc:46:using rocksdb::ColumnFamilyOptions;
./c-deps/rocksdb/db/c.cc:47:using rocksdb::CompactionFilter;
./c-deps/rocksdb/db/c.cc:48:using rocksdb::CompactionFilterFactory;
./c-deps/rocksdb/db/c.cc:49:using rocksdb::CompactionFilterContext;
./c-deps/rocksdb/db/c.cc:50:using rocksdb::CompactionOptionsFIFO;
./c-deps/rocksdb/db/c.cc:51:using rocksdb::Comparator;
./c-deps/rocksdb/db/c.cc:52:using rocksdb::CompressionType;
./c-deps/rocksdb/db/c.cc:53:using rocksdb::WALRecoveryMode;
./c-deps/rocksdb/db/c.cc:54:using rocksdb::DB;
./c-deps/rocksdb/db/c.cc:55:using rocksdb::DBOptions;
./c-deps/rocksdb/db/c.cc:56:using rocksdb::DbPath;
./c-deps/rocksdb/db/c.cc:57:using rocksdb::Env;
./c-deps/rocksdb/db/c.cc:58:using rocksdb::EnvOptions;
./c-deps/rocksdb/db/c.cc:59:using rocksdb::InfoLogLevel;
./c-deps/rocksdb/db/c.cc:60:using rocksdb::FileLock;
./c-deps/rocksdb/db/c.cc:61:using rocksdb::FilterPolicy;
./c-deps/rocksdb/db/c.cc:62:using rocksdb::FlushOptions;
./c-deps/rocksdb/db/c.cc:63:using rocksdb::IngestExternalFileOptions;
./c-deps/rocksdb/db/c.cc:64:using rocksdb::Iterator;
./c-deps/rocksdb/db/c.cc:65:using rocksdb::Logger;
./c-deps/rocksdb/db/c.cc:66:using rocksdb::MergeOperator;
./c-deps/rocksdb/db/c.cc:67:using rocksdb::MergeOperators;
./c-deps/rocksdb/db/c.cc:68:using rocksdb::NewBloomFilterPolicy;
./c-deps/rocksdb/db/c.cc:69:using rocksdb::NewLRUCache;
./c-deps/rocksdb/db/c.cc:70:using rocksdb::Options;
./c-deps/rocksdb/db/c.cc:71:using rocksdb::BlockBasedTableOptions;
./c-deps/rocksdb/db/c.cc:72:using rocksdb::CuckooTableOptions;
./c-deps/rocksdb/db/c.cc:73:using rocksdb::RandomAccessFile;
./c-deps/rocksdb/db/c.cc:74:using rocksdb::Range;
./c-deps/rocksdb/db/c.cc:75:using rocksdb::ReadOptions;
./c-deps/rocksdb/db/c.cc:76:using rocksdb::SequentialFile;
./c-deps/rocksdb/db/c.cc:77:using rocksdb::Slice;
./c-deps/rocksdb/db/c.cc:78:using rocksdb::SliceParts;
./c-deps/rocksdb/db/c.cc:79:using rocksdb::SliceTransform;
./c-deps/rocksdb/db/c.cc:80:using rocksdb::Snapshot;
./c-deps/rocksdb/db/c.cc:81:using rocksdb::SstFileWriter;
./c-deps/rocksdb/db/c.cc:82:using rocksdb::Status;
./c-deps/rocksdb/db/c.cc:83:using rocksdb::WritableFile;
./c-deps/rocksdb/db/c.cc:84:using rocksdb::WriteBatch;
./c-deps/rocksdb/db/c.cc:85:using rocksdb::WriteBatchWithIndex;
./c-deps/rocksdb/db/c.cc:86:using rocksdb::WriteOptions;
./c-deps/rocksdb/db/c.cc:87:using rocksdb::LiveFileMetaData;
./c-deps/rocksdb/db/c.cc:88:using rocksdb::BackupEngine;
./c-deps/rocksdb/db/c.cc:89:using rocksdb::BackupableDBOptions;
./c-deps/rocksdb/db/c.cc:90:using rocksdb::BackupInfo;
./c-deps/rocksdb/db/c.cc:91:using rocksdb::RestoreOptions;
./c-deps/rocksdb/db/c.cc:92:using rocksdb::CompactRangeOptions;
./c-deps/rocksdb/db/c.cc:93:using rocksdb::RateLimiter;
./c-deps/rocksdb/db/c.cc:94:using rocksdb::NewGenericRateLimiter;
./c-deps/rocksdb/db/c.cc:95:using rocksdb::PinnableSlice;
./c-deps/rocksdb/db/c.cc:96:using rocksdb::TransactionDBOptions;
./c-deps/rocksdb/db/c.cc:97:using rocksdb::TransactionDB;
./c-deps/rocksdb/db/c.cc:98:using rocksdb::TransactionOptions;
./c-deps/rocksdb/db/c.cc:99:using rocksdb::OptimisticTransactionDB;
./c-deps/rocksdb/db/c.cc:100:using rocksdb::OptimisticTransactionOptions;
./c-deps/rocksdb/db/c.cc:101:using rocksdb::Transaction;
./c-deps/rocksdb/db/c.cc:102:using rocksdb::Checkpoint;
./c-deps/rocksdb/db/c.cc:441:  rocksdb::CompactionOptionsUniversal *rep;
./c-deps/rocksdb/db/c.cc:610:  opt->rep.merge_operator = rocksdb::MergeOperators::CreateUInt64AddOperator();
./c-deps/rocksdb/db/c.cc:1890:        rocksdb::NewBlockBasedTableFactory(table_options->rep));
./c-deps/rocksdb/db/c.cc:1935:        rocksdb::NewCuckooTableFactory(table_options->rep));
./c-deps/rocksdb/db/c.cc:2111:  opt->rep.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/c.cc:2250:      opt->rep.access_hint_on_compaction_start = rocksdb::Options::NONE;
./c-deps/rocksdb/db/c.cc:2253:      opt->rep.access_hint_on_compaction_start = rocksdb::Options::NORMAL;
./c-deps/rocksdb/db/c.cc:2256:      opt->rep.access_hint_on_compaction_start = rocksdb::Options::SEQUENTIAL;
./c-deps/rocksdb/db/c.cc:2259:      opt->rep.access_hint_on_compaction_start = rocksdb::Options::WILLNEED;
./c-deps/rocksdb/db/c.cc:2401:  opt->rep.memtable_factory.reset(new rocksdb::VectorRepFactory);
./c-deps/rocksdb/db/c.cc:2417:  rocksdb::MemTableRepFactory* factory = rocksdb::NewHashSkipListRepFactory(
./c-deps/rocksdb/db/c.cc:2424:  opt->rep.memtable_factory.reset(rocksdb::NewHashLinkListRepFactory(bucket_count));
./c-deps/rocksdb/db/c.cc:2430:  rocksdb::PlainTableOptions options;
./c-deps/rocksdb/db/c.cc:2436:  rocksdb::TableFactory* factory = rocksdb::NewPlainTableFactory(options);
./c-deps/rocksdb/db/c.cc:2466:  opt->rep.compaction_style = static_cast<rocksdb::CompactionStyle>(style);
./c-deps/rocksdb/db/c.cc:2480:  rocksdb::Statistics *statistics = opt->rep.statistics.get();
./c-deps/rocksdb/db/c.cc:2733:  opt->rep.read_tier = static_cast<rocksdb::ReadTier>(v);
./c-deps/rocksdb/db/c.cc:2851:  result->rep = rocksdb::NewMemEnv(Env::Default());
./c-deps/rocksdb/db/c.cc:3034:  wrapper->rep_ = rocksdb::NewFixedPrefixTransform(prefixLen);
./c-deps/rocksdb/db/c.cc:3055:  wrapper->rep_ = rocksdb::NewNoopTransform();
./c-deps/rocksdb/db/c.cc:3063:  result->rep = new rocksdb::CompactionOptionsUniversal;
./c-deps/rocksdb/db/c.cc:3094:  uco->rep->stop_style = static_cast<rocksdb::CompactionStopStyle>(style);
./c-deps/rocksdb/db/c.cc:3124:      opt->rep.compression_per_level[i] = rocksdb::kNoCompression;
./c-deps/rocksdb/db/db_block_cache_test.cc:45:    options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_block_cache_test.cc:235:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_block_cache_test.cc:286:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_block_cache_test.cc:356:    options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_block_cache_test.cc:412:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_block_cache_test.cc:468:    options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_block_cache_test.cc:576:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/deletefile_test.cc:338:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/deletefile_test.cc:342:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/deletefile_test.cc:353:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/deletefile_test.cc:433:  std::vector<rocksdb::ColumnFamilyHandle*> handles;
./c-deps/rocksdb/db/deletefile_test.cc:434:  rocksdb::DB* db;
./c-deps/rocksdb/db/corruption_test.cc:93:    ASSERT_OK(::rocksdb::RepairDB(dbname_, options_));
./c-deps/rocksdb/db/db_iterator_test.cc:94:    options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_iterator_test.cc:159:    options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_iterator_test.cc:562:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_iterator_test.cc:1009:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_iterator_test.cc:1015:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_iterator_test.cc:1723:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_iterator_test.cc:1821:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_iterator_test.cc:1895:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_iterator_test.cc:2082:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/write_callback_test.cc:166:              rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/write_callback_test.cc:178:              rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/write_callback_test.cc:217:              rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/write_callback_test.cc:285:              rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/write_callback_test.cc:296:              rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_inplace_update_test.cc:76:      rocksdb::DBTestInPlaceUpdate::updateInPlaceSmallerSize;
./c-deps/rocksdb/db/db_inplace_update_test.cc:105:      rocksdb::DBTestInPlaceUpdate::updateInPlaceSmallerVarintSize;
./c-deps/rocksdb/db/db_inplace_update_test.cc:134:      rocksdb::DBTestInPlaceUpdate::updateInPlaceLargerSize;
./c-deps/rocksdb/db/db_inplace_update_test.cc:161:        rocksdb::DBTestInPlaceUpdate::updateInPlaceNoAction;
./c-deps/rocksdb/db/db_inplace_update_test.cc:174:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/memtable.cc:124:                               rocksdb::ApproximateMemoryUsage(insert_hints_)};
./c-deps/rocksdb/db/memtable.cc:614:              "rocksdb::blob_db::BlobDB instead.");
./c-deps/rocksdb/db/manual_compaction_test.cc:38:    dbname_ = rocksdb::test::TmpDir() + "/rocksdb_cbug_test";
./c-deps/rocksdb/db/manual_compaction_test.cc:39:    DestroyDB(dbname_, rocksdb::Options());
./c-deps/rocksdb/db/manual_compaction_test.cc:71:    options.compression = rocksdb::kNoCompression;
./c-deps/rocksdb/db/manual_compaction_test.cc:100:  rocksdb::DB* db;
./c-deps/rocksdb/db/manual_compaction_test.cc:101:  rocksdb::Options db_options;
./c-deps/rocksdb/db/manual_compaction_test.cc:103:  db_options.compression = rocksdb::kNoCompression;
./c-deps/rocksdb/db/manual_compaction_test.cc:104:  ASSERT_OK(rocksdb::DB::Open(db_options, dbname_, &db));
./c-deps/rocksdb/db/manual_compaction_test.cc:107:  rocksdb::WriteBatch batch;
./c-deps/rocksdb/db/manual_compaction_test.cc:111:  ASSERT_OK(db->Write(rocksdb::WriteOptions(), &batch));
./c-deps/rocksdb/db/manual_compaction_test.cc:118:  ASSERT_OK(db->Write(rocksdb::WriteOptions(), &batch));
./c-deps/rocksdb/db/manual_compaction_test.cc:125:  ASSERT_OK(db->Write(rocksdb::WriteOptions(), &batch));
./c-deps/rocksdb/db/manual_compaction_test.cc:130:  rocksdb::Slice least(start_key.data(), start_key.size());
./c-deps/rocksdb/db/manual_compaction_test.cc:131:  rocksdb::Slice greatest(end_key.data(), end_key.size());
./c-deps/rocksdb/db/manual_compaction_test.cc:137:  rocksdb::Iterator* iter = db->NewIterator(rocksdb::ReadOptions());
./c-deps/rocksdb/db/manual_compaction_test.cc:147:  DestroyDB(dbname_, rocksdb::Options());
./c-deps/rocksdb/db/db_statistics_test.cc:48:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_statistics_test.cc:94:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_statistics_test.cc:107:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_statistics_test.cc:121:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_statistics_test.cc:146:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/db_io_failure_test.cc:273:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_io_failure_test.cc:280:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_io_failure_test.cc:305:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_io_failure_test.cc:353:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_io_failure_test.cc:360:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_io_failure_test.cc:372:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_io_failure_test.cc:392:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_io_failure_test.cc:400:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_io_failure_test.cc:412:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_io_failure_test.cc:444:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_io_failure_test.cc:452:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_io_failure_test.cc:463:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_io_failure_test.cc:483:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_io_failure_test.cc:491:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_io_failure_test.cc:503:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_io_failure_test.cc:536:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_io_failure_test.cc:544:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_io_failure_test.cc:555:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_io_failure_test.cc:565:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/db_properties_test.cc:339:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_properties_test.cc:1390:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/db_log_iter_test.cc:101:    rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/db_log_iter_test.cc:107:      rocksdb::SyncPoint::GetInstance()->ClearTrace();
./c-deps/rocksdb/db/db_log_iter_test.cc:108:      rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_log_iter_test.cc:126:      rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_log_iter_test.cc:188:    rocksdb::VectorLogPtr wal_files;
./c-deps/rocksdb/db/db_log_iter_test.cc:288:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/db_universal_compaction_test.cc:175:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_universal_compaction_test.cc:246:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_universal_compaction_test.cc:254:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_universal_compaction_test.cc:332:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_universal_compaction_test.cc:523:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_universal_compaction_test.cc:526:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_universal_compaction_test.cc:533:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_universal_compaction_test.cc:564:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_universal_compaction_test.cc:596:  rocksdb::SyncPoint::GetInstance()->SetCallBack("CompactionJob::Run():Start",
./c-deps/rocksdb/db/db_universal_compaction_test.cc:610:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_universal_compaction_test.cc:613:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_universal_compaction_test.cc:625:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_universal_compaction_test.cc:654:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/db_universal_compaction_test.cc:663:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_universal_compaction_test.cc:670:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_universal_compaction_test.cc:685:  rocksdb::SyncPoint::GetInstance()->ClearTrace();
./c-deps/rocksdb/db/db_universal_compaction_test.cc:709:  rocksdb::SyncPoint::GetInstance()->ClearTrace();
./c-deps/rocksdb/db/db_universal_compaction_test.cc:710:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_universal_compaction_test.cc:715:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_universal_compaction_test.cc:729:  rocksdb::SyncPoint::GetInstance()->ClearTrace();
./c-deps/rocksdb/db/db_universal_compaction_test.cc:980:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_universal_compaction_test.cc:983:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_universal_compaction_test.cc:990:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_universal_compaction_test.cc:1021:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_universal_compaction_test.cc:1026:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_universal_compaction_test.cc:1029:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_universal_compaction_test.cc:1036:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_universal_compaction_test.cc:1066:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_universal_compaction_test.cc:1407:    rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_universal_compaction_test.cc:1430:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/db_universal_compaction_test.cc:1463:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_universal_compaction_test.cc:1483:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_universal_compaction_test.cc:1487:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_universal_compaction_test.cc:1583:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/db_iter.cc:496:                      "rocksdb::blob_db::BlobDB instead.");
./c-deps/rocksdb/db/db_iter.cc:650:            "rocksdb::blob_db::BlobDB instead.");
./c-deps/rocksdb/db/db_iter.cc:907:              "rocksdb::blob_db::BlobDB instead.");
./c-deps/rocksdb/db/db_iter.cc:930:            "rocksdb::blob_db::BlobDB instead.");
./c-deps/rocksdb/db/db_iter.cc:973:        "rocksdb::blob_db::BlobDB instead.");
./c-deps/rocksdb/db/db_impl.cc:2859:        s = rocksdb::VerifySstFileChecksum(options, env_options, fname);
./c-deps/rocksdb/db/forward_iterator_bench.cc:86:  std::unique_ptr<rocksdb::Iterator> it;
./c-deps/rocksdb/db/forward_iterator_bench.cc:87:  std::unique_ptr<rocksdb::Iterator> it_cacheonly;
./c-deps/rocksdb/db/forward_iterator_bench.cc:89:  rocksdb::Slice upper_bound_slice;
./c-deps/rocksdb/db/forward_iterator_bench.cc:95:  explicit Reader(std::vector<ShardState>* shard_states, rocksdb::DB* db)
./c-deps/rocksdb/db/forward_iterator_bench.cc:124:      rocksdb::ReadOptions options;
./c-deps/rocksdb/db/forward_iterator_bench.cc:128:        state.upper_bound_slice = rocksdb::Slice(
./c-deps/rocksdb/db/forward_iterator_bench.cc:136:        options.read_tier = rocksdb::ReadTier::kBlockCacheTier;
./c-deps/rocksdb/db/forward_iterator_bench.cc:142:    for (rocksdb::Iterator* it : {state.it_cacheonly.get(), state.it.get()}) {
./c-deps/rocksdb/db/forward_iterator_bench.cc:153:          it->Seek(rocksdb::Slice((const char*)&from, sizeof(from)));
./c-deps/rocksdb/db/forward_iterator_bench.cc:196:  rocksdb::DB* db_;
./c-deps/rocksdb/db/forward_iterator_bench.cc:197:  rocksdb::port::Thread thread_;
./c-deps/rocksdb/db/forward_iterator_bench.cc:207:  explicit Writer(std::vector<ShardState>* shard_states, rocksdb::DB* db)
./c-deps/rocksdb/db/forward_iterator_bench.cc:247:        rocksdb::Status status =
./c-deps/rocksdb/db/forward_iterator_bench.cc:248:            db_->Put(rocksdb::WriteOptions(),
./c-deps/rocksdb/db/forward_iterator_bench.cc:249:                     rocksdb::Slice((const char*)&key, sizeof(key)),
./c-deps/rocksdb/db/forward_iterator_bench.cc:250:                     rocksdb::Slice(value));
./c-deps/rocksdb/db/forward_iterator_bench.cc:266:  rocksdb::DB* db_;
./c-deps/rocksdb/db/forward_iterator_bench.cc:267:  rocksdb::port::Thread thread_;
./c-deps/rocksdb/db/forward_iterator_bench.cc:272:  explicit StatsThread(rocksdb::DB* db)
./c-deps/rocksdb/db/forward_iterator_bench.cc:314:  rocksdb::DB* db_;
./c-deps/rocksdb/db/forward_iterator_bench.cc:317:  rocksdb::port::Thread thread_;
./c-deps/rocksdb/db/forward_iterator_bench.cc:325:  rocksdb::Status status;
./c-deps/rocksdb/db/forward_iterator_bench.cc:326:  std::string path = rocksdb::test::TmpDir() + "/forward_iterator_test";
./c-deps/rocksdb/db/forward_iterator_bench.cc:328:  rocksdb::Options options;
./c-deps/rocksdb/db/forward_iterator_bench.cc:330:  options.compression = rocksdb::CompressionType::kNoCompression;
./c-deps/rocksdb/db/forward_iterator_bench.cc:331:  options.compaction_style = rocksdb::CompactionStyle::kCompactionStyleNone;
./c-deps/rocksdb/db/forward_iterator_bench.cc:336:  rocksdb::BlockBasedTableOptions table_options;
./c-deps/rocksdb/db/forward_iterator_bench.cc:337:  table_options.block_cache = rocksdb::NewLRUCache(FLAGS_block_cache_size);
./c-deps/rocksdb/db/forward_iterator_bench.cc:340:      rocksdb::NewBlockBasedTableFactory(table_options));
./c-deps/rocksdb/db/forward_iterator_bench.cc:342:  status = rocksdb::DestroyDB(path, options);
./c-deps/rocksdb/db/forward_iterator_bench.cc:344:  rocksdb::DB* db_raw;
./c-deps/rocksdb/db/forward_iterator_bench.cc:345:  status = rocksdb::DB::Open(options, path, &db_raw);
./c-deps/rocksdb/db/forward_iterator_bench.cc:347:  std::unique_ptr<rocksdb::DB> db(db_raw);
./c-deps/rocksdb/db/compaction_iterator_test.cc:403:  rocksdb::port::Thread compaction_thread([&] {
./c-deps/rocksdb/db/compaction_iterator_test.cc:439:  rocksdb::port::Thread compaction_thread([&] {
./c-deps/rocksdb/db/db_sst_test.cc:233:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_sst_test.cc:235:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_sst_test.cc:237:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_sst_test.cc:239:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_sst_test.cc:287:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_sst_test.cc:292:  rocksdb::SyncPoint::GetInstance()->LoadDependency({
./c-deps/rocksdb/db/db_sst_test.cc:298:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_sst_test.cc:301:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_sst_test.cc:322:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_sst_test.cc:376:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_sst_test.cc:385:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_sst_test.cc:388:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_sst_test.cc:447:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_sst_test.cc:452:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_sst_test.cc:455:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_sst_test.cc:530:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_sst_test.cc:544:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_sst_test.cc:557:    rocksdb::SyncPoint::GetInstance()->ClearTrace();
./c-deps/rocksdb/db/db_sst_test.cc:558:    rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_sst_test.cc:586:    rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_sst_test.cc:843:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/db_range_del_test.cc:881:  options.prefix_extractor.reset(rocksdb::NewFixedPrefixTransform(kPrefixLen));
./c-deps/rocksdb/db/db_range_del_test.cc:1004:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/db_compaction_test.cc:352:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_compaction_test.cc:361:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_compaction_test.cc:364:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_compaction_test.cc:427:  rocksdb::SyncPoint::GetInstance()->ClearAllCallBacks();
./c-deps/rocksdb/db/db_compaction_test.cc:917:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_compaction_test.cc:920:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_compaction_test.cc:968:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_compaction_test.cc:974:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_compaction_test.cc:977:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_compaction_test.cc:980:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_compaction_test.cc:1067:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_compaction_test.cc:1073:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_compaction_test.cc:1076:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_compaction_test.cc:1079:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_compaction_test.cc:1132:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_compaction_test.cc:1135:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_compaction_test.cc:1143:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/db_compaction_test.cc:1147:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_compaction_test.cc:1158:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_compaction_test.cc:1223:  rocksdb::port::Thread threads([&] {
./c-deps/rocksdb/db/db_compaction_test.cc:1277:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_compaction_test.cc:1280:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_compaction_test.cc:1285:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/db_compaction_test.cc:1288:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_compaction_test.cc:1298:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_compaction_test.cc:1359:  rocksdb::port::Thread threads([&] {
./c-deps/rocksdb/db/db_compaction_test.cc:1523:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_compaction_test.cc:1526:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_compaction_test.cc:1529:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_compaction_test.cc:1578:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_compaction_test.cc:1970:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/db_compaction_test.cc:1975:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_compaction_test.cc:2006:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_compaction_test.cc:2012:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_compaction_test.cc:2060:      options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_compaction_test.cc:2404:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_compaction_test.cc:2407:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_compaction_test.cc:2410:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_compaction_test.cc:2413:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_compaction_test.cc:2416:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_compaction_test.cc:2477:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_compaction_test.cc:2539:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/db_compaction_test.cc:2545:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_compaction_test.cc:2575:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_compaction_test.cc:2578:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_compaction_test.cc:2581:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_compaction_test.cc:2651:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_compaction_test.cc:2666:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/db_compaction_test.cc:2669:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_compaction_test.cc:2692:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_compaction_test.cc:2720:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/db_compaction_test.cc:2723:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_compaction_test.cc:2749:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_compaction_test.cc:2771:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_compaction_test.cc:2816:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/db_compaction_test.cc:2821:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_compaction_test.cc:2851:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_compaction_test.cc:3040:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/column_family_test.cc:73:    rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/column_family_test.cc:528:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/column_family_test.cc:533:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/column_family_test.cc:535:  rocksdb::port::Thread thread([&] { CreateColumnFamilies({"one"}); });
./c-deps/rocksdb/db/column_family_test.cc:544:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/column_family_test.cc:1171:  int Compare(const rocksdb::Slice& a, const rocksdb::Slice& b) const override {
./c-deps/rocksdb/db/column_family_test.cc:1176:                             const rocksdb::Slice& limit) const override {}
./c-deps/rocksdb/db/column_family_test.cc:1344:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/column_family_test.cc:1348:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/column_family_test.cc:1357:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/column_family_test.cc:1437:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/column_family_test.cc:1441:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/column_family_test.cc:1449:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/column_family_test.cc:1467:  rocksdb::port::Thread threads([&] {
./c-deps/rocksdb/db/column_family_test.cc:1538:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/column_family_test.cc:1542:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/column_family_test.cc:1554:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/column_family_test.cc:1555:  rocksdb::port::Thread threads([&] {
./c-deps/rocksdb/db/column_family_test.cc:1629:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/column_family_test.cc:1635:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/column_family_test.cc:1647:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/column_family_test.cc:1648:  rocksdb::port::Thread threads([&] {
./c-deps/rocksdb/db/column_family_test.cc:1668:  rocksdb::port::Thread threads1([&] {
./c-deps/rocksdb/db/column_family_test.cc:1728:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/column_family_test.cc:1733:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/column_family_test.cc:1745:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/column_family_test.cc:1746:  rocksdb::port::Thread threads([&] {
./c-deps/rocksdb/db/column_family_test.cc:1818:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/column_family_test.cc:1825:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/column_family_test.cc:1837:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/column_family_test.cc:1838:  rocksdb::port::Thread threads([&] {
./c-deps/rocksdb/db/column_family_test.cc:1915:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/column_family_test.cc:1928:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/column_family_test.cc:1939:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/column_family_test.cc:1948:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/column_family_test.cc:1949:  rocksdb::port::Thread threads([&] {
./c-deps/rocksdb/db/column_family_test.cc:2027:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/column_family_test.cc:2032:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/column_family_test.cc:2044:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/column_family_test.cc:2393:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/column_family_test.cc:2401:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/column_family_test.cc:2479:  rocksdb::SyncPoint::GetInstance()->SetCallBack("PersistRocksDBOptions:start",
./c-deps/rocksdb/db/column_family_test.cc:2492:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/column_family_test.cc:2508:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/column_family_test.cc:2512:  rocksdb::port::Thread drop_cf_thread(DropSingleColumnFamily, this, 1, &comparators);
./c-deps/rocksdb/db/column_family_test.cc:2925:  rocksdb::SyncPoint::GetInstance()->LoadDependency({
./c-deps/rocksdb/db/column_family_test.cc:2928:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/column_family_test.cc:2944:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/column_family_test.cc:3022:  rocksdb::SyncPoint::GetInstance()->LoadDependency({
./c-deps/rocksdb/db/column_family_test.cc:3029:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/column_family_test.cc:3047:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/column_family_test.cc:3091:  rocksdb::SyncPoint::GetInstance()->LoadDependency({
./c-deps/rocksdb/db/column_family_test.cc:3098:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/column_family_test.cc:3122:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/column_family_test.cc:3142:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/column_family_test.cc:3148:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/column_family_test.cc:3150:  rocksdb::port::Thread thread([&] { db_->SyncWAL(); });
./c-deps/rocksdb/db/column_family_test.cc:3161:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_wal_test.cc:82:  rocksdb::SyncPoint::GetInstance()->LoadDependency({
./c-deps/rocksdb/db/db_wal_test.cc:88:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_wal_test.cc:90:  rocksdb::port::Thread thread([&]() { ASSERT_OK(db_->SyncWAL()); });
./c-deps/rocksdb/db/db_wal_test.cc:109:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_wal_test.cc:116:  rocksdb::SyncPoint::GetInstance()->LoadDependency({
./c-deps/rocksdb/db/db_wal_test.cc:120:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_wal_test.cc:122:  rocksdb::port::Thread thread([&]() { ASSERT_OK(Put("foo2", "bar2")); });
./c-deps/rocksdb/db/db_wal_test.cc:133:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_wal_test.cc:310:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_wal_test.cc:317:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_wal_test.cc:322:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_wal_test.cc:329:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_wal_test.cc:336:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_wal_test.cc:341:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_wal_test.cc:349:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_wal_test.cc:356:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_wal_test.cc:361:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_wal_test.cc:370:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_wal_test.cc:377:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_wal_test.cc:382:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_wal_test.cc:1259:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/db_basic_test.cc:26:  rocksdb::DB* db2 = nullptr;
./c-deps/rocksdb/db/db_basic_test.cc:27:  rocksdb::Status s = DB::Open(options, dbname_, &db2);
./c-deps/rocksdb/db/db_basic_test.cc:853:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/db_blob_index_test.cc:407:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/fault_injection_test.cc:84:    rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/fault_injection_test.cc:85:    rocksdb::SyncPoint::GetInstance()->ClearAllCallBacks();
./c-deps/rocksdb/db/fault_injection_test.cc:441:    rocksdb::SyncPoint::GetInstance()->LoadDependency({
./c-deps/rocksdb/db/fault_injection_test.cc:448:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/fault_injection_test.cc:461:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/fault_injection_test.cc:465:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/fault_injection_test.cc:467:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/fault_injection_test.cc:470:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/fault_injection_test.cc:475:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/fault_injection_test.cc:476:  rocksdb::SyncPoint::GetInstance()->ClearAllCallBacks();
./c-deps/rocksdb/db/db_compaction_filter_test.cc:868:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/external_sst_file_test.cc:689:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/external_sst_file_test.cc:697:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/external_sst_file_test.cc:708:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/external_sst_file_test.cc:899:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/external_sst_file_test.cc:905:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/external_sst_file_test.cc:911:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/external_sst_file_test.cc:917:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/external_sst_file_test.cc:1045:  rocksdb::SyncPoint::GetInstance()->LoadDependency({
./c-deps/rocksdb/db/external_sst_file_test.cc:1052:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/external_sst_file_test.cc:1089:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/external_sst_file_test.cc:1118:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/external_sst_file_test.cc:1127:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/external_sst_file_test.cc:1131:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/external_sst_file_test.cc:1134:  rocksdb::port::Thread bg_compact([&]() {
./c-deps/rocksdb/db/external_sst_file_test.cc:1140:  rocksdb::port::Thread bg_addfile([&]() {
./c-deps/rocksdb/db/external_sst_file_test.cc:1175:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/external_sst_file_test.cc:1243:  rocksdb::SyncPoint::GetInstance()->LoadDependency({
./c-deps/rocksdb/db/external_sst_file_test.cc:1251:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/external_sst_file_test.cc:1335:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/external_sst_file_test.cc:1409:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/external_sst_file_test.cc:1417:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/external_sst_file_test.cc:1425:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/external_sst_file_test.cc:1658:  rocksdb::SyncPoint::GetInstance()->LoadDependency({
./c-deps/rocksdb/db/external_sst_file_test.cc:1664:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/external_sst_file_test.cc:1667:  rocksdb::port::Thread bg_ingest_file([&]() {
./c-deps/rocksdb/db/external_sst_file_test.cc:1687:  rocksdb::port::Thread bg_block_put([&]() {
./c-deps/rocksdb/db/external_sst_file_test.cc:1946:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/db_merge_operator_test.cc:429:  rocksdb::port::Thread writer_thread(writer_func);
./c-deps/rocksdb/db/db_merge_operator_test.cc:430:  rocksdb::port::Thread reader_thread(reader_func);
./c-deps/rocksdb/db/db_merge_operator_test.cc:440:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/db_encryption_test.cc:91:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/db_iter_test.cc:620:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_iter_test.cc:674:      options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_iter_test.cc:2372:    options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_iter_test.cc:2407:    options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_iter_test.cc:2551:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_iter_test.cc:2554:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_iter_test.cc:2573:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_iter_test.cc:2587:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_iter_test.cc:2592:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_iter_test.cc:2611:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_iter_test.cc:2625:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_iter_test.cc:2634:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_iter_test.cc:2653:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_iter_test.cc:2669:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_iter_test.cc:2681:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_iter_test.cc:2704:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_iter_test.cc:2720:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_iter_test.cc:2728:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_iter_test.cc:2751:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_iter_test.cc:2767:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_iter_test.cc:2774:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_iter_test.cc:2797:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_iter_test.cc:2816:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_iter_test.cc:2828:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_iter_test.cc:2851:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_iter_test.cc:2869:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_iter_test.cc:2877:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_iter_test.cc:2888:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/compaction_job_stats_test.cc:117:    rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/compaction_job_stats_test.cc:118:    rocksdb::SyncPoint::GetInstance()->LoadDependency({});
./c-deps/rocksdb/db/compaction_job_stats_test.cc:119:    rocksdb::SyncPoint::GetInstance()->ClearAllCallBacks();
./c-deps/rocksdb/db/compaction_job_stats_test.cc:808:    rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/compaction_job_stats_test.cc:817:    rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/compaction_job_stats_test.cc:826:    rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/compaction_job_stats_test.cc:835:    rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/compaction_job_stats_test.cc:842:    rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/compaction_job_stats_test.cc:851:    rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/compaction_job_stats_test.cc:1029:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/db_test2.cc:42:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_test2.cc:134:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_test2.cc:153:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_test2.cc:187:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_test2.cc:193:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_test2.cc:199:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_test2.cc:347:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_test2.cc:362:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_test2.cc:368:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_test2.cc:374:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_test2.cc:454:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_test2.cc:1075:      options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_test2.cc:1226:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/db_test2.cc:1231:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_test2.cc:1258:  rocksdb::SyncPoint::GetInstance()->ClearTrace();
./c-deps/rocksdb/db/db_test2.cc:1280:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_test2.cc:1311:    options->statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_test2.cc:1350:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_test2.cc:1539:  rocksdb::SyncPoint::GetInstance()->ClearTrace();
./c-deps/rocksdb/db/db_test2.cc:1540:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_test2.cc:1548:    rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_test2.cc:1549:    rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_test2.cc:1607:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_test2.cc:1675:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_test2.cc:1687:  rocksdb::SyncPoint::GetInstance()->LoadDependencyAndMarkers(
./c-deps/rocksdb/db/db_test2.cc:1691:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_test2.cc:1710:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_test2.cc:1735:    options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_test2.cc:1814:    std::shared_ptr<Statistics> stats = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_test2.cc:1861:    std::shared_ptr<Statistics> new_statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_test2.cc:1945:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_test2.cc:1958:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_test2.cc:1966:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_test2.cc:2005:  rocksdb::port::Thread bg_thread;
./c-deps/rocksdb/db/db_test2.cc:2011:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_test2.cc:2031:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_test2.cc:2041:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_test2.cc:2061:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/db_test2.cc:2065:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_test2.cc:2067:  rocksdb::port::Thread t1([&] {
./c-deps/rocksdb/db/db_test2.cc:2078:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_test2.cc:2084:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/db_test2.cc:2088:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_test2.cc:2101:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_test2.cc:2201:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_test2.cc:2208:  rocksdb::SyncPoint::GetInstance()->LoadDependency({
./c-deps/rocksdb/db/db_test2.cc:2211:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_test2.cc:2229:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_test2.cc:2418:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/db_test.cc:235:      rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_test.cc:239:      rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_test.cc:242:      rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_test.cc:2125:    options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_test.cc:2422:  virtual Status Flush(const rocksdb::FlushOptions& options,
./c-deps/rocksdb/db/db_test.cc:2448:      rocksdb::SequenceNumber, unique_ptr<rocksdb::TransactionLogIterator>*,
./c-deps/rocksdb/db/db_test.cc:3126:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_test.cc:3384:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_test.cc:3387:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_test.cc:3445:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_test.cc:3549:  rocksdb::SyncPoint::GetInstance()->LoadDependency({
./c-deps/rocksdb/db/db_test.cc:3553:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_test.cc:3578:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_test.cc:3601:  rocksdb::SyncPoint::GetInstance()->LoadDependency({
./c-deps/rocksdb/db/db_test.cc:3608:    rocksdb::SyncPoint::GetInstance()->ClearTrace();
./c-deps/rocksdb/db/db_test.cc:3609:    rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_test.cc:3648:    rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_test.cc:3745:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/db_test.cc:3756:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_test.cc:3834:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/db_test.cc:3843:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_test.cc:4020:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_test.cc:4028:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_test.cc:4034:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_test.cc:4048:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_test.cc:4049:  rocksdb::SyncPoint::GetInstance()->ClearAllCallBacks();
./c-deps/rocksdb/db/db_test.cc:4062:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_test.cc:4073:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_test.cc:4079:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_test.cc:4090:  rocksdb::SyncPoint::GetInstance()->ClearAllCallBacks();
./c-deps/rocksdb/db/db_test.cc:4091:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_test.cc:4436:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_test.cc:4524:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_test.cc:4627:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_test.cc:4682:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_test.cc:4723:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_test.cc:4745:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_test.cc:5009:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_test.cc:5012:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_test.cc:5017:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_test.cc:5083:      rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/db_test.cc:5089:      rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/db_test.cc:5095:    rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_test.cc:5114:    rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_test.cc:5180:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_test.cc:5209:  rocksdb::SyncPoint::GetInstance()->SetCallBack("DBImpl::DelayWrite:Wait",
./c-deps/rocksdb/db/db_test.cc:5214:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_test.cc:5231:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_test.cc:5319:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_test.cc:5327:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_test.cc:5391:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_test.cc:5456:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_test.cc:5475:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_test.cc:5505:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/db_test.cc:5508:  rocksdb::SyncPoint::GetInstance()->ClearTrace();
./c-deps/rocksdb/db/db_test.cc:5510:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_test.cc:5520:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_test.cc:5577:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/file_indexer_test.cc:347:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/db_flush_test.cc:159:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/db_tailing_iter_test.cc:101:  rocksdb::SyncPoint::GetInstance()->ClearAllCallBacks();
./c-deps/rocksdb/db/db_tailing_iter_test.cc:102:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_tailing_iter_test.cc:146:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_tailing_iter_test.cc:152:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_tailing_iter_test.cc:158:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_tailing_iter_test.cc:161:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_tailing_iter_test.cc:164:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_tailing_iter_test.cc:416:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_tailing_iter_test.cc:421:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_tailing_iter_test.cc:423:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_tailing_iter_test.cc:808:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/version_edit_test.cc:105:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/version_edit_test.cc:118:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/version_edit_test.cc:120:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/version_edit_test.cc:149:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/version_edit_test.cc:155:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/version_edit_test.cc:157:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/merge_test.cc:363:  db->Put(rocksdb::WriteOptions(), "c", "10");
./c-deps/rocksdb/db/merge_test.cc:509:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/version_set.cc:1039:            "rocksdb::blob_db::BlobDB instead.");
./c-deps/rocksdb/db/compact_files_test.cc:85:  rocksdb::SyncPoint::GetInstance()->LoadDependency({
./c-deps/rocksdb/db/compact_files_test.cc:89:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/compact_files_test.cc:99:  rocksdb::ColumnFamilyMetaData meta;
./c-deps/rocksdb/db/compact_files_test.cc:113:          db->CompactFiles(rocksdb::CompactionOptions(), {file1, file2}, 0));
./c-deps/rocksdb/db/compact_files_test.cc:117:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/compact_files_test.cc:228:  rocksdb::SyncPoint::GetInstance()->LoadDependency({
./c-deps/rocksdb/db/compact_files_test.cc:232:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/compact_files_test.cc:235:  rocksdb::port::Thread compaction_thread(
./c-deps/rocksdb/db/compact_files_test.cc:246:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/compact_files_test.cc:300:  rocksdb::ColumnFamilyMetaData meta;
./c-deps/rocksdb/db/compact_files_test.cc:305:        db->CompactFiles(rocksdb::CompactionOptions(), {fname}, 0));
./c-deps/rocksdb/db/db_test_util.cc:82:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_test_util.cc:83:  rocksdb::SyncPoint::GetInstance()->LoadDependency({});
./c-deps/rocksdb/db/db_test_util.cc:84:  rocksdb::SyncPoint::GetInstance()->ClearAllCallBacks();
./c-deps/rocksdb/db/db_test_util.cc:293:  rocksdb::SyncPoint::GetInstance()->ClearCallBack(
./c-deps/rocksdb/db/db_test_util.cc:295:  rocksdb::SyncPoint::GetInstance()->ClearCallBack("NewWritableFile:O_DIRECT");
./c-deps/rocksdb/db/db_test_util.cc:469:      rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_test_util.cc:474:      rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_test_util.cc:479:      rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_write_test.cc:88:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/cuckoo_table_db_test.cc:323:  if (rocksdb::port::kLittleEndian) {
./c-deps/rocksdb/db/listener_test.cc:48:struct TestPropertiesCollector : public rocksdb::TablePropertiesCollector {
./c-deps/rocksdb/db/listener_test.cc:49:  virtual rocksdb::Status AddUserKey(const rocksdb::Slice& key,
./c-deps/rocksdb/db/listener_test.cc:50:                                     const rocksdb::Slice& value,
./c-deps/rocksdb/db/listener_test.cc:51:                                     rocksdb::EntryType type,
./c-deps/rocksdb/db/listener_test.cc:52:                                     rocksdb::SequenceNumber seq,
./c-deps/rocksdb/db/listener_test.cc:56:  virtual rocksdb::Status Finish(
./c-deps/rocksdb/db/listener_test.cc:57:      rocksdb::UserCollectedProperties* properties) override {
./c-deps/rocksdb/db/listener_test.cc:66:  rocksdb::UserCollectedProperties GetReadableProperties() const override {
./c-deps/rocksdb/db/listener_test.cc:67:    rocksdb::UserCollectedProperties ret;
./c-deps/rocksdb/db/listener_test.cc:836:  rocksdb::SyncPoint::GetInstance()->LoadDependency(
./c-deps/rocksdb/db/listener_test.cc:839:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_options_test.cc:136:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_options_test.cc:146:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_options_test.cc:148:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/db_options_test.cc:162:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_options_test.cc:185:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_options_test.cc:189:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_options_test.cc:225:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_options_test.cc:234:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_options_test.cc:700:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/external_sst_file_basic_test.cc:525:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/external_sst_file_basic_test.cc:530:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/external_sst_file_basic_test.cc:557:  rocksdb::SyncPoint::GetInstance()->DisableProcessing();
./c-deps/rocksdb/db/external_sst_file_basic_test.cc:614:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/version_set.h:270:  const rocksdb::LevelFilesBrief& LevelFilesBrief(int level) const {
./c-deps/rocksdb/db/version_set.h:410:  autovector<rocksdb::LevelFilesBrief> level_files_brief_;
./c-deps/rocksdb/db/db_bloom_filter_test.cc:63:    options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_bloom_filter_test.cc:124:    options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_bloom_filter_test.cc:170:    options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_bloom_filter_test.cc:400:    options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_bloom_filter_test.cc:427:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_bloom_filter_test.cc:471:    options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_bloom_filter_test.cc:516:  void CreateFilter(const rocksdb::Slice* keys, int n,
./c-deps/rocksdb/db/db_bloom_filter_test.cc:518:    std::unique_ptr<rocksdb::Slice[]> user_keys(new rocksdb::Slice[n]);
./c-deps/rocksdb/db/db_bloom_filter_test.cc:525:  bool KeyMayMatch(const rocksdb::Slice& key,
./c-deps/rocksdb/db/db_bloom_filter_test.cc:526:                   const rocksdb::Slice& filter) const override {
./c-deps/rocksdb/db/db_bloom_filter_test.cc:537:  rocksdb::Slice convertKey(const rocksdb::Slice& key) const { return key; }
./c-deps/rocksdb/db/db_bloom_filter_test.cc:543:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_bloom_filter_test.cc:597:  bbto.filter_policy.reset(rocksdb::NewBloomFilterPolicy(10, false));
./c-deps/rocksdb/db/db_bloom_filter_test.cc:626:  bbto.filter_policy.reset(rocksdb::NewBloomFilterPolicy(10, true));
./c-deps/rocksdb/db/db_bloom_filter_test.cc:667:    options_.prefix_extractor.reset(rocksdb::NewFixedPrefixTransform(4));
./c-deps/rocksdb/db/db_bloom_filter_test.cc:942:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/rocksdb/db/db_bloom_filter_test.cc:1058:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_bloom_filter_test.cc:1061:  rocksdb::SyncPoint::GetInstance()->SetCallBack(
./c-deps/rocksdb/db/db_bloom_filter_test.cc:1064:  rocksdb::SyncPoint::GetInstance()->EnableProcessing();
./c-deps/rocksdb/db/db_bloom_filter_test.cc:1105:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/file_indexer.h:63:    kLevelMaxIndex = rocksdb::port::kMaxInt32
./c-deps/rocksdb/db/prefix_test.cc:56:const std::string kDbName = rocksdb::test::TmpDir() + "/prefix_test";
./c-deps/rocksdb/db/db_table_properties_test.cc:290:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/db_memtable_test.cc:192:  rocksdb::port::InstallStackTraceHandler();
./c-deps/rocksdb/db/perf_context_test.cc:33:const std::string kDbName = rocksdb::test::TmpDir() + "/perf_context_test";
./c-deps/rocksdb/db/perf_context_test.cc:49:      options.prefix_extractor.reset(rocksdb::NewFixedPrefixTransform(0));
./c-deps/rocksdb/db/perf_context_test.cc:565:    rocksdb::port::Thread child_thread([&] {
./c-deps/rocksdb/port/win/env_win.cc:867:    rocksdb::port::WindowsThread th(&StartThreadWrapper, state.get());
./c-deps/rocksdb/port/win/win_thread.h:116:  void swap(rocksdb::port::WindowsThread& th1, 
./c-deps/rocksdb/port/win/win_thread.h:117:    rocksdb::port::WindowsThread& th2) {
./c-deps/rocksdb/port/win/win_logger.h:28:class WinLogger : public rocksdb::Logger {
./c-deps/rocksdb/port/win/win_logger.h:43:  using rocksdb::Logger::Logv;
./c-deps/rocksdb/docs/_posts/2015-01-16-migrating-from-leveldb-to-rocksdb-2.markdown:10:If you have an existing application that uses LevelDB and would like to migrate to using RocksDB, one problem you need to overcome is to map the options for LevelDB to proper options for RocksDB. As of release 3.9 this can be automatically done by using our option conversion utility found in rocksdb/utilities/leveldb_options.h. What is needed, is to first replace `leveldb::Options` with `rocksdb::LevelDBOptions`. Then, use `rocksdb::ConvertOptions( )` to convert the `LevelDBOptions` struct into appropriate RocksDB options. Here is an example:
./c-deps/rocksdb/docs/_posts/2015-01-16-migrating-from-leveldb-to-rocksdb-2.markdown:84:The reason why ConvertOptions is handy is because a lot of individual options in RocksDB have moved to other structures in different components. For example, block_size is not available in struct rocksdb::Options. It resides in struct rocksdb::BlockBasedTableOptions, which is used to create a TableFactory object that RocksDB uses internally to create the proper TableBuilder objects. If you were to write your application from scratch it would look like this:
./c-deps/rocksdb/docs/_posts/2017-05-14-core-local-stats.markdown:24:+   30.33%  30.17%  db_bench  db_bench       [.] rocksdb::StatisticsImpl::recordTick
./c-deps/rocksdb/docs/_posts/2017-05-14-core-local-stats.markdown:25:+    3.65%   0.98%  db_bench  db_bench       [.] rocksdb::StatisticsImpl::measureTime
./c-deps/rocksdb/docs/_posts/2017-05-14-core-local-stats.markdown:32:+   19.54%  19.50%  db_bench  db_bench 	     [.] rocksdb::StatisticsImpl::recordTick
./c-deps/rocksdb/docs/_posts/2017-05-14-core-local-stats.markdown:33:+    3.44%   0.57%  db_bench  db_bench       [.] rocksdb::StatisticsImpl::measureTime
./c-deps/rocksdb/docs/_posts/2017-05-14-core-local-stats.markdown:52:+    2.96%  0.87%   db_bench  db_bench       [.] rocksdb::StatisticsImpl::recordTick
./c-deps/rocksdb/docs/_posts/2017-05-14-core-local-stats.markdown:53:+    1.37%  0.10%   db_bench  db_bench       [.] rocksdb::StatisticsImpl::measureTime
./c-deps/rocksdb/docs/_posts/2017-05-14-core-local-stats.markdown:60:+    1.21%  0.65%   db_bench  db_bench       [.] rocksdb::StatisticsImpl::recordTick
./c-deps/rocksdb/docs/_posts/2017-05-14-core-local-stats.markdown:61:     0.08%  0.00%   db_bench  db_bench       [.] rocksdb::StatisticsImpl::measureTime
./c-deps/rocksdb/docs/_posts/2017-05-14-core-local-stats.markdown:87:+    2.96%  0.87%   db_bench  db_bench       [.] rocksdb::StatisticsImpl::recordTick
./c-deps/rocksdb/docs/_posts/2017-05-14-core-local-stats.markdown:88:+    1.37%  0.10%   db_bench  db_bench       [.] rocksdb::StatisticsImpl::measureTime
./c-deps/rocksdb/docs/_posts/2017-05-14-core-local-stats.markdown:95:+    1.21%  0.65%   db_bench  db_bench       [.] rocksdb::StatisticsImpl::recordTick
./c-deps/rocksdb/docs/_posts/2017-05-14-core-local-stats.markdown:96:     0.08%  0.00%   db_bench  db_bench       [.] rocksdb::StatisticsImpl::measureTime
./c-deps/rocksdb/docs/_docs/getting-started.md:24:rocksdb::DB* db;
./c-deps/rocksdb/docs/_docs/getting-started.md:25:rocksdb::Options options;
./c-deps/rocksdb/docs/_docs/getting-started.md:27:rocksdb::Status status =
./c-deps/rocksdb/docs/_docs/getting-started.md:28:  rocksdb::DB::Open(options, "/tmp/testdb", &db);
./c-deps/rocksdb/docs/_docs/getting-started.md:33:If you want to raise an error if the database already exists, add the following line before the rocksdb::DB::Open call:
./c-deps/rocksdb/docs/_docs/getting-started.md:41:You may have noticed the `rocksdb::Status` type above. Values of this type are returned by most functions in RocksDB that may encounter
./c-deps/rocksdb/docs/_docs/getting-started.md:45:rocksdb::Status s = ...;
./c-deps/rocksdb/docs/_docs/getting-started.md:65:rocksdb::Status s = db->Get(rocksdb::ReadOptions(), key1, &value);
./c-deps/rocksdb/docs/_docs/getting-started.md:66:if (s.ok()) s = db->Put(rocksdb::WriteOptions(), key2, value);
./c-deps/rocksdb/docs/_docs/getting-started.md:67:if (s.ok()) s = db->Delete(rocksdb::WriteOptions(), key1);
./c-deps/rocksdb/examples/compaction_filter_example.cc:11:class MyMerge : public rocksdb::MergeOperator {
./c-deps/rocksdb/examples/compaction_filter_example.cc:20:    for (const rocksdb::Slice& m : merge_in.operand_list) {
./c-deps/rocksdb/examples/compaction_filter_example.cc:32:class MyFilter : public rocksdb::CompactionFilter {
./c-deps/rocksdb/examples/compaction_filter_example.cc:34:  bool Filter(int level, const rocksdb::Slice& key,
./c-deps/rocksdb/examples/compaction_filter_example.cc:35:              const rocksdb::Slice& existing_value, std::string* new_value,
./c-deps/rocksdb/examples/compaction_filter_example.cc:43:  bool FilterMergeOperand(int level, const rocksdb::Slice& key,
./c-deps/rocksdb/examples/compaction_filter_example.cc:44:                          const rocksdb::Slice& existing_value) const override {
./c-deps/rocksdb/examples/compaction_filter_example.cc:57:  rocksdb::DB* raw_db;
./c-deps/rocksdb/examples/compaction_filter_example.cc:58:  rocksdb::Status status;
./c-deps/rocksdb/examples/compaction_filter_example.cc:67:  rocksdb::Options options;
./c-deps/rocksdb/examples/compaction_filter_example.cc:71:  status = rocksdb::DB::Open(options, "/tmp/rocksmergetest", &raw_db);
./c-deps/rocksdb/examples/compaction_filter_example.cc:73:  std::unique_ptr<rocksdb::DB> db(raw_db);
./c-deps/rocksdb/examples/compaction_filter_example.cc:75:  rocksdb::WriteOptions wopts;
./c-deps/rocksdb/examples/compaction_filter_example.cc:82:  db->CompactRange(rocksdb::CompactRangeOptions(), nullptr, nullptr);
./c-deps/rocksdb/java/benchmark/src/main/java/org/rocksdb/benchmark/DbBenchmark.java:1405:    direct_reads(rocksdb::EnvOptions().use_direct_reads,
./c-deps/rocksdb/java/benchmark/src/main/java/org/rocksdb/benchmark/DbBenchmark.java:1411:    direct_writes(rocksdb::EnvOptions().use_direct_reads,
./c-deps/rocksdb/java/HISTORY-JAVA.md:37:* Added basic Java binding for rocksdb::Env such that multiple RocksDB can share the same thread pool and environment.
./c-deps/rocksdb/java/HISTORY-JAVA.md:55:* Added Java bindings for 60+ rocksdb::Options.
./c-deps/rocksdb/java/HISTORY-JAVA.md:73:* Added Java binding for rocksdb::Options.
./c-deps/rocksdb/java/rocksjni/ttl.cc:7:// calling c++ rocksdb::TtlDB methods.
./c-deps/rocksdb/java/rocksjni/ttl.cc:35:  auto* opt = reinterpret_cast<rocksdb::Options*>(joptions_handle);
./c-deps/rocksdb/java/rocksjni/ttl.cc:36:  rocksdb::DBWithTTL* db = nullptr;
./c-deps/rocksdb/java/rocksjni/ttl.cc:37:  rocksdb::Status s = rocksdb::DBWithTTL::Open(*opt, db_path, &db,
./c-deps/rocksdb/java/rocksjni/ttl.cc:46:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/ttl.cc:75:  std::vector<rocksdb::ColumnFamilyDescriptor> column_families;
./c-deps/rocksdb/java/rocksjni/ttl.cc:77:  rocksdb::JniUtil::byteStrings<std::string>(
./c-deps/rocksdb/java/rocksjni/ttl.cc:84:      rocksdb::ColumnFamilyOptions* cf_options =
./c-deps/rocksdb/java/rocksjni/ttl.cc:85:          reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jco[idx]);
./c-deps/rocksdb/java/rocksjni/ttl.cc:87:          rocksdb::ColumnFamilyDescriptor(cf_name, *cf_options));
./c-deps/rocksdb/java/rocksjni/ttl.cc:112:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jopt_handle);
./c-deps/rocksdb/java/rocksjni/ttl.cc:113:  std::vector<rocksdb::ColumnFamilyHandle*> handles;
./c-deps/rocksdb/java/rocksjni/ttl.cc:114:  rocksdb::DBWithTTL* db = nullptr;
./c-deps/rocksdb/java/rocksjni/ttl.cc:115:  rocksdb::Status s = rocksdb::DBWithTTL::Open(*opt, db_path, column_families,
./c-deps/rocksdb/java/rocksjni/ttl.cc:146:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/ttl.cc:168:      reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jcolumn_options);
./c-deps/rocksdb/java/rocksjni/ttl.cc:170:  auto* db_handle = reinterpret_cast<rocksdb::DBWithTTL*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/ttl.cc:171:  rocksdb::ColumnFamilyHandle* handle;
./c-deps/rocksdb/java/rocksjni/ttl.cc:172:  rocksdb::Status s = db_handle->CreateColumnFamilyWithTtl(
./c-deps/rocksdb/java/rocksjni/ttl.cc:181:  rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/statisticsjni.h:7:// rocksdb::Statistics
./c-deps/rocksdb/java/rocksjni/snapshot.cc:23:  auto* snapshot = reinterpret_cast<rocksdb::Snapshot*>(
./c-deps/rocksdb/java/rocksjni/writebatchhandlerjnicallback.h:7:// rocksdb::WriteBatch::Handler.
./c-deps/rocksdb/java/rocksjni/compaction_filter_factory_jnicallback.cc:7:// rocksdb::CompactionFilterFactory.
./c-deps/rocksdb/java/rocksjni/cassandra_compactionfilterjni.cc:19:  auto* compaction_filter = new rocksdb::cassandra::CassandraCompactionFilter(
./c-deps/rocksdb/java/rocksjni/restorejni.cc:7:// calling C++ rocksdb::RestoreOptions methods
./c-deps/rocksdb/java/rocksjni/restorejni.cc:25:  auto* ropt = new rocksdb::RestoreOptions(keep_log_files);
./c-deps/rocksdb/java/rocksjni/restorejni.cc:36:  auto* ropt = reinterpret_cast<rocksdb::RestoreOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/clock_cache.cc:7:// rocksdb::ClockCache.
./c-deps/rocksdb/java/rocksjni/clock_cache.cc:23:      new std::shared_ptr<rocksdb::Cache>(rocksdb::NewClockCache(
./c-deps/rocksdb/java/rocksjni/clock_cache.cc:38:      reinterpret_cast<std::shared_ptr<rocksdb::Cache> *>(jhandle);
./c-deps/rocksdb/java/rocksjni/memtablejni.cc:23:  rocksdb::Status s = rocksdb::check_if_jlong_fits_size_t(jbucket_count);
./c-deps/rocksdb/java/rocksjni/memtablejni.cc:25:    return reinterpret_cast<jlong>(rocksdb::NewHashSkipListRepFactory(
./c-deps/rocksdb/java/rocksjni/memtablejni.cc:30:  rocksdb::IllegalArgumentExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/memtablejni.cc:43:  rocksdb::Status statusBucketCount =
./c-deps/rocksdb/java/rocksjni/memtablejni.cc:44:      rocksdb::check_if_jlong_fits_size_t(jbucket_count);
./c-deps/rocksdb/java/rocksjni/memtablejni.cc:45:  rocksdb::Status statusHugePageTlb =
./c-deps/rocksdb/java/rocksjni/memtablejni.cc:46:      rocksdb::check_if_jlong_fits_size_t(jhuge_page_tlb_size);
./c-deps/rocksdb/java/rocksjni/memtablejni.cc:48:    return reinterpret_cast<jlong>(rocksdb::NewHashLinkListRepFactory(
./c-deps/rocksdb/java/rocksjni/memtablejni.cc:55:  rocksdb::IllegalArgumentExceptionJni::ThrowNew(env,
./c-deps/rocksdb/java/rocksjni/memtablejni.cc:67:  rocksdb::Status s = rocksdb::check_if_jlong_fits_size_t(jreserved_size);
./c-deps/rocksdb/java/rocksjni/memtablejni.cc:69:    return reinterpret_cast<jlong>(new rocksdb::VectorRepFactory(
./c-deps/rocksdb/java/rocksjni/memtablejni.cc:72:  rocksdb::IllegalArgumentExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/memtablejni.cc:83:  rocksdb::Status s = rocksdb::check_if_jlong_fits_size_t(jlookahead);
./c-deps/rocksdb/java/rocksjni/memtablejni.cc:85:    return reinterpret_cast<jlong>(new rocksdb::SkipListFactory(
./c-deps/rocksdb/java/rocksjni/memtablejni.cc:88:  rocksdb::IllegalArgumentExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/statisticsjni.cc:7:// rocksdb::Statistics
./c-deps/rocksdb/java/rocksjni/transaction_log.cc:7:// calling c++ rocksdb::Iterator methods from Java side.
./c-deps/rocksdb/java/rocksjni/transaction_log.cc:24:  delete reinterpret_cast<rocksdb::TransactionLogIterator*>(handle);
./c-deps/rocksdb/java/rocksjni/transaction_log.cc:34:  return reinterpret_cast<rocksdb::TransactionLogIterator*>(handle)->Valid();
./c-deps/rocksdb/java/rocksjni/transaction_log.cc:44:  reinterpret_cast<rocksdb::TransactionLogIterator*>(handle)->Next();
./c-deps/rocksdb/java/rocksjni/transaction_log.cc:54:  rocksdb::Status s = reinterpret_cast<
./c-deps/rocksdb/java/rocksjni/transaction_log.cc:55:      rocksdb::TransactionLogIterator*>(handle)->status();
./c-deps/rocksdb/java/rocksjni/transaction_log.cc:57:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/transaction_log.cc:68:  rocksdb::BatchResult batch_result =
./c-deps/rocksdb/java/rocksjni/transaction_log.cc:69:      reinterpret_cast<rocksdb::TransactionLogIterator*>(handle)->GetBatch();
./c-deps/rocksdb/java/rocksjni/transaction_log.cc:70:  return rocksdb::BatchResultJni::construct(env, batch_result);
./c-deps/rocksdb/java/rocksjni/columnfamilyhandle.cc:7:// calling c++ rocksdb::Iterator methods from Java side.
./c-deps/rocksdb/java/rocksjni/columnfamilyhandle.cc:23:  auto* cfh = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(handle);
./c-deps/rocksdb/java/rocksjni/ratelimiterjni.cc:21:      new std::shared_ptr<rocksdb::RateLimiter>(rocksdb::NewGenericRateLimiter(
./c-deps/rocksdb/java/rocksjni/ratelimiterjni.cc:37:      reinterpret_cast<std::shared_ptr<rocksdb::RateLimiter> *>(jhandle);
./c-deps/rocksdb/java/rocksjni/ratelimiterjni.cc:49:  reinterpret_cast<std::shared_ptr<rocksdb::RateLimiter> *>(handle)->get()->
./c-deps/rocksdb/java/rocksjni/ratelimiterjni.cc:61:  reinterpret_cast<std::shared_ptr<rocksdb::RateLimiter> *>(handle)->get()->
./c-deps/rocksdb/java/rocksjni/ratelimiterjni.cc:62:      Request(jbytes, rocksdb::Env::IO_TOTAL);
./c-deps/rocksdb/java/rocksjni/ratelimiterjni.cc:72:  return reinterpret_cast<std::shared_ptr<rocksdb::RateLimiter> *>(handle)->
./c-deps/rocksdb/java/rocksjni/ratelimiterjni.cc:83:  return reinterpret_cast<std::shared_ptr<rocksdb::RateLimiter> *>(handle)->
./c-deps/rocksdb/java/rocksjni/ratelimiterjni.cc:94:  return reinterpret_cast<std::shared_ptr<rocksdb::RateLimiter> *>(handle)->
./c-deps/rocksdb/java/rocksjni/table.cc:6:// This file implements the "bridge" between Java and C++ for rocksdb::Options.
./c-deps/rocksdb/java/rocksjni/table.cc:25:  rocksdb::PlainTableOptions options = rocksdb::PlainTableOptions();
./c-deps/rocksdb/java/rocksjni/table.cc:31:  options.encoding_type = static_cast<rocksdb::EncodingType>(
./c-deps/rocksdb/java/rocksjni/table.cc:35:  return reinterpret_cast<jlong>(rocksdb::NewPlainTableFactory(options));
./c-deps/rocksdb/java/rocksjni/table.cc:52:  rocksdb::BlockBasedTableOptions options;
./c-deps/rocksdb/java/rocksjni/table.cc:58:          rocksdb::NewLRUCache(block_cache_size, block_cache_num_shardbits);
./c-deps/rocksdb/java/rocksjni/table.cc:60:      options.block_cache = rocksdb::NewLRUCache(block_cache_size);
./c-deps/rocksdb/java/rocksjni/table.cc:68:    std::shared_ptr<rocksdb::FilterPolicy> *pFilterPolicy =
./c-deps/rocksdb/java/rocksjni/table.cc:69:        reinterpret_cast<std::shared_ptr<rocksdb::FilterPolicy> *>(
./c-deps/rocksdb/java/rocksjni/table.cc:80:          rocksdb::NewLRUCache(block_cache_compressed_size,
./c-deps/rocksdb/java/rocksjni/table.cc:83:      options.block_cache = rocksdb::NewLRUCache(block_cache_compressed_size);
./c-deps/rocksdb/java/rocksjni/table.cc:86:  options.checksum = static_cast<rocksdb::ChecksumType>(jchecksum_type);
./c-deps/rocksdb/java/rocksjni/table.cc:88:      rocksdb::BlockBasedTableOptions::IndexType>(jindex_type);
./c-deps/rocksdb/java/rocksjni/table.cc:91:  return reinterpret_cast<jlong>(rocksdb::NewBlockBasedTableFactory(options));
./c-deps/rocksdb/java/rocksjni/lru_cache.cc:7:// rocksdb::LRUCache.
./c-deps/rocksdb/java/rocksjni/lru_cache.cc:23:      new std::shared_ptr<rocksdb::Cache>(rocksdb::NewLRUCache(
./c-deps/rocksdb/java/rocksjni/lru_cache.cc:39:      reinterpret_cast<std::shared_ptr<rocksdb::Cache> *>(jhandle);
./c-deps/rocksdb/java/rocksjni/rocks_callback_object.cc:26:      delete reinterpret_cast<rocksdb::JniCallback*>(handle);
./c-deps/rocksdb/java/rocksjni/options_util.cc:7:// calling C++ rocksdb::OptionsUtil methods from Java side.
./c-deps/rocksdb/java/rocksjni/options_util.cc:20:    std::vector<rocksdb::ColumnFamilyDescriptor>& cf_descs) {
./c-deps/rocksdb/java/rocksjni/options_util.cc:21:  jmethodID add_mid = rocksdb::ListJni::getListAddMethodId(env);
./c-deps/rocksdb/java/rocksjni/options_util.cc:28:  for (rocksdb::ColumnFamilyDescriptor& cfd : cf_descs) {
./c-deps/rocksdb/java/rocksjni/options_util.cc:30:    jobject jcfd = rocksdb::ColumnFamilyDescriptorJni::construct(env, &cfd);
./c-deps/rocksdb/java/rocksjni/options_util.cc:60:  std::vector<rocksdb::ColumnFamilyDescriptor> cf_descs;
./c-deps/rocksdb/java/rocksjni/options_util.cc:61:  rocksdb::Status s = rocksdb::LoadLatestOptions(
./c-deps/rocksdb/java/rocksjni/options_util.cc:62:      db_path, reinterpret_cast<rocksdb::Env*>(jenv_handle),
./c-deps/rocksdb/java/rocksjni/options_util.cc:63:      reinterpret_cast<rocksdb::DBOptions*>(jdb_opts_handle), &cf_descs,
./c-deps/rocksdb/java/rocksjni/options_util.cc:68:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/options_util.cc:83:  std::vector<rocksdb::ColumnFamilyDescriptor> cf_descs;
./c-deps/rocksdb/java/rocksjni/options_util.cc:84:  rocksdb::Status s = rocksdb::LoadOptionsFromFile(
./c-deps/rocksdb/java/rocksjni/options_util.cc:85:      opts_file_name, reinterpret_cast<rocksdb::Env*>(jenv_handle),
./c-deps/rocksdb/java/rocksjni/options_util.cc:86:      reinterpret_cast<rocksdb::DBOptions*>(jdb_opts_handle), &cf_descs,
./c-deps/rocksdb/java/rocksjni/options_util.cc:91:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/options_util.cc:107:    rocksdb::GetLatestOptionsFileName(
./c-deps/rocksdb/java/rocksjni/options_util.cc:108:        db_path, reinterpret_cast<rocksdb::Env*>(jenv_handle),
./c-deps/rocksdb/java/rocksjni/cassandra_value_operator.cc:31:  auto* op = new std::shared_ptr<rocksdb::MergeOperator>(
./c-deps/rocksdb/java/rocksjni/cassandra_value_operator.cc:32:      new rocksdb::cassandra::CassandraValueMergeOperator(
./c-deps/rocksdb/java/rocksjni/cassandra_value_operator.cc:45:      reinterpret_cast<std::shared_ptr<rocksdb::MergeOperator>*>(jhandle);
./c-deps/rocksdb/java/rocksjni/loggerjnicallback.cc:7:// rocksdb::Logger.
./c-deps/rocksdb/java/rocksjni/loggerjnicallback.cc:112:      case rocksdb::InfoLogLevel::DEBUG_LEVEL:
./c-deps/rocksdb/java/rocksjni/loggerjnicallback.cc:115:      case rocksdb::InfoLogLevel::INFO_LEVEL:
./c-deps/rocksdb/java/rocksjni/loggerjnicallback.cc:118:      case rocksdb::InfoLogLevel::WARN_LEVEL:
./c-deps/rocksdb/java/rocksjni/loggerjnicallback.cc:121:      case rocksdb::InfoLogLevel::ERROR_LEVEL:
./c-deps/rocksdb/java/rocksjni/loggerjnicallback.cc:124:      case rocksdb::InfoLogLevel::FATAL_LEVEL:
./c-deps/rocksdb/java/rocksjni/loggerjnicallback.cc:127:      case rocksdb::InfoLogLevel::HEADER_LEVEL:
./c-deps/rocksdb/java/rocksjni/loggerjnicallback.cc:231:  auto* sptr_logger = new std::shared_ptr<rocksdb::LoggerJniCallback>(
./c-deps/rocksdb/java/rocksjni/loggerjnicallback.cc:232:      new rocksdb::LoggerJniCallback(env, jobj));
./c-deps/rocksdb/java/rocksjni/loggerjnicallback.cc:235:  auto* options = reinterpret_cast<rocksdb::Options*>(joptions);
./c-deps/rocksdb/java/rocksjni/loggerjnicallback.cc:248:  auto* sptr_logger = new std::shared_ptr<rocksdb::LoggerJniCallback>(
./c-deps/rocksdb/java/rocksjni/loggerjnicallback.cc:249:    new rocksdb::LoggerJniCallback(env, jobj));
./c-deps/rocksdb/java/rocksjni/loggerjnicallback.cc:252:  auto* db_options = reinterpret_cast<rocksdb::DBOptions*>(jdb_options);
./c-deps/rocksdb/java/rocksjni/loggerjnicallback.cc:266:      reinterpret_cast<std::shared_ptr<rocksdb::LoggerJniCallback> *>(jhandle);
./c-deps/rocksdb/java/rocksjni/loggerjnicallback.cc:268:      SetInfoLogLevel(static_cast<rocksdb::InfoLogLevel>(jlog_level));
./c-deps/rocksdb/java/rocksjni/loggerjnicallback.cc:279:      reinterpret_cast<std::shared_ptr<rocksdb::LoggerJniCallback> *>(jhandle);
./c-deps/rocksdb/java/rocksjni/loggerjnicallback.cc:291:      reinterpret_cast<std::shared_ptr<rocksdb::LoggerJniCallback> *>(jhandle);
./c-deps/rocksdb/java/rocksjni/env.cc:7:// calling c++ rocksdb::Env methods from Java side.
./c-deps/rocksdb/java/rocksjni/env.cc:21:  return reinterpret_cast<jlong>(rocksdb::Env::Default());
./c-deps/rocksdb/java/rocksjni/env.cc:32:  auto* rocks_env = reinterpret_cast<rocksdb::Env*>(jhandle);
./c-deps/rocksdb/java/rocksjni/env.cc:35:      rocks_env->SetBackgroundThreads(num, rocksdb::Env::Priority::LOW);
./c-deps/rocksdb/java/rocksjni/env.cc:38:      rocks_env->SetBackgroundThreads(num, rocksdb::Env::Priority::HIGH);
./c-deps/rocksdb/java/rocksjni/env.cc:50:  auto* rocks_env = reinterpret_cast<rocksdb::Env*>(jhandle);
./c-deps/rocksdb/java/rocksjni/env.cc:53:      return rocks_env->GetThreadPoolQueueLen(rocksdb::Env::Priority::LOW);
./c-deps/rocksdb/java/rocksjni/env.cc:55:      return rocks_env->GetThreadPoolQueueLen(rocksdb::Env::Priority::HIGH);
./c-deps/rocksdb/java/rocksjni/env.cc:67:  return reinterpret_cast<jlong>(rocksdb::NewMemEnv(
./c-deps/rocksdb/java/rocksjni/env.cc:68:      rocksdb::Env::Default()));
./c-deps/rocksdb/java/rocksjni/env.cc:78:  auto* e = reinterpret_cast<rocksdb::Env*>(jhandle);
./c-deps/rocksdb/java/rocksjni/portal.h:157:class RocksDBJni : public RocksDBNativeClass<rocksdb::DB*, RocksDBJni> {
./c-deps/rocksdb/java/rocksjni/portal.h:174:class StatusJni : public RocksDBNativeClass<rocksdb::Status*, StatusJni> {
./c-deps/rocksdb/java/rocksjni/portal.h:191:   * the provided C++ rocksdb::Status object
./c-deps/rocksdb/java/rocksjni/portal.h:194:   * @param status The rocksdb::Status object
./c-deps/rocksdb/java/rocksjni/portal.h:245:  // C++ rocksdb::Status::Code enum
./c-deps/rocksdb/java/rocksjni/portal.h:246:  static jbyte toJavaStatusCode(const rocksdb::Status::Code& code) {
./c-deps/rocksdb/java/rocksjni/portal.h:248:      case rocksdb::Status::Code::kOk:
./c-deps/rocksdb/java/rocksjni/portal.h:250:      case rocksdb::Status::Code::kNotFound:
./c-deps/rocksdb/java/rocksjni/portal.h:252:      case rocksdb::Status::Code::kCorruption:
./c-deps/rocksdb/java/rocksjni/portal.h:254:      case rocksdb::Status::Code::kNotSupported:
./c-deps/rocksdb/java/rocksjni/portal.h:256:      case rocksdb::Status::Code::kInvalidArgument:
./c-deps/rocksdb/java/rocksjni/portal.h:258:      case rocksdb::Status::Code::kIOError:
./c-deps/rocksdb/java/rocksjni/portal.h:260:      case rocksdb::Status::Code::kMergeInProgress:
./c-deps/rocksdb/java/rocksjni/portal.h:262:      case rocksdb::Status::Code::kIncomplete:
./c-deps/rocksdb/java/rocksjni/portal.h:264:      case rocksdb::Status::Code::kShutdownInProgress:
./c-deps/rocksdb/java/rocksjni/portal.h:266:      case rocksdb::Status::Code::kTimedOut:
./c-deps/rocksdb/java/rocksjni/portal.h:268:      case rocksdb::Status::Code::kAborted:
./c-deps/rocksdb/java/rocksjni/portal.h:270:      case rocksdb::Status::Code::kBusy:
./c-deps/rocksdb/java/rocksjni/portal.h:272:      case rocksdb::Status::Code::kExpired:
./c-deps/rocksdb/java/rocksjni/portal.h:274:      case rocksdb::Status::Code::kTryAgain:
./c-deps/rocksdb/java/rocksjni/portal.h:282:  // C++ rocksdb::Status::SubCode enum
./c-deps/rocksdb/java/rocksjni/portal.h:283:  static jbyte toJavaStatusSubCode(const rocksdb::Status::SubCode& subCode) {
./c-deps/rocksdb/java/rocksjni/portal.h:285:      case rocksdb::Status::SubCode::kNone:
./c-deps/rocksdb/java/rocksjni/portal.h:287:      case rocksdb::Status::SubCode::kMutexTimeout:
./c-deps/rocksdb/java/rocksjni/portal.h:289:      case rocksdb::Status::SubCode::kLockTimeout:
./c-deps/rocksdb/java/rocksjni/portal.h:291:      case rocksdb::Status::SubCode::kLockLimit:
./c-deps/rocksdb/java/rocksjni/portal.h:293:      case rocksdb::Status::SubCode::kNoSpace:
./c-deps/rocksdb/java/rocksjni/portal.h:295:      case rocksdb::Status::SubCode::kDeadlock:
./c-deps/rocksdb/java/rocksjni/portal.h:297:      case rocksdb::Status::SubCode::kStaleFile:
./c-deps/rocksdb/java/rocksjni/portal.h:299:      case rocksdb::Status::SubCode::kMemoryLimit:
./c-deps/rocksdb/java/rocksjni/portal.h:562:    rocksdb::Options*, OptionsJni> {
./c-deps/rocksdb/java/rocksjni/portal.h:580:    rocksdb::DBOptions*, DBOptionsJni> {
./c-deps/rocksdb/java/rocksjni/portal.h:598:    : public RocksDBNativeClass<rocksdb::ColumnFamilyOptions*,
./c-deps/rocksdb/java/rocksjni/portal.h:617:   * properties as the provided C++ rocksdb::ColumnFamilyOptions object
./c-deps/rocksdb/java/rocksjni/portal.h:620:   * @param cfoptions A pointer to rocksdb::ColumnFamilyOptions object
./c-deps/rocksdb/java/rocksjni/portal.h:626:    auto* cfo = new rocksdb::ColumnFamilyOptions(*cfoptions);
./c-deps/rocksdb/java/rocksjni/portal.h:650:    rocksdb::WriteOptions*, WriteOptionsJni> {
./c-deps/rocksdb/java/rocksjni/portal.h:668:    rocksdb::ReadOptions*, ReadOptionsJni> {
./c-deps/rocksdb/java/rocksjni/portal.h:686:    rocksdb::WriteBatch*, WriteBatchJni> {
./c-deps/rocksdb/java/rocksjni/portal.h:704:    const rocksdb::WriteBatchHandlerJniCallback*,
./c-deps/rocksdb/java/rocksjni/portal.h:844:    rocksdb::WriteBatchWithIndex*, WriteBatchWithIndexJni> {
./c-deps/rocksdb/java/rocksjni/portal.h:900:    rocksdb::BackupableDBOptions*, BackupableDBOptionsJni> {
./c-deps/rocksdb/java/rocksjni/portal.h:919:    rocksdb::BackupEngine*, BackupEngineJni> {
./c-deps/rocksdb/java/rocksjni/portal.h:937:    rocksdb::Iterator*, IteratorJni> {
./c-deps/rocksdb/java/rocksjni/portal.h:955:    std::shared_ptr<rocksdb::FilterPolicy>*, FilterJni> {
./c-deps/rocksdb/java/rocksjni/portal.h:973:    rocksdb::ColumnFamilyHandle*, ColumnFamilyHandleJni> {
./c-deps/rocksdb/java/rocksjni/portal.h:992:    rocksdb::FlushOptions*, FlushOptionsJni> {
./c-deps/rocksdb/java/rocksjni/portal.h:1010:    rocksdb::ComparatorJniCallbackOptions*, ComparatorOptionsJni> {
./c-deps/rocksdb/java/rocksjni/portal.h:1028:    const rocksdb::CompactionFilterFactoryJniCallback*,
./c-deps/rocksdb/java/rocksjni/portal.h:1091:    const rocksdb::BaseComparatorJniCallback*,
./c-deps/rocksdb/java/rocksjni/portal.h:1198:    const rocksdb::Slice*, AbstractSliceJni> {
./c-deps/rocksdb/java/rocksjni/portal.h:1216:    const rocksdb::Slice*, AbstractSliceJni> {
./c-deps/rocksdb/java/rocksjni/portal.h:1263:    const rocksdb::Slice*, AbstractSliceJni> {
./c-deps/rocksdb/java/rocksjni/portal.h:1662:    jclass jarray_list_clazz = rocksdb::ListJni::getArrayListClass(env);
./c-deps/rocksdb/java/rocksjni/portal.h:1668:    jmethodID cstr_mid = rocksdb::ListJni::getArrayListConstructorMethodId(env);
./c-deps/rocksdb/java/rocksjni/portal.h:1674:    jmethodID add_mid = rocksdb::ListJni::getListAddMethodId(env);
./c-deps/rocksdb/java/rocksjni/portal.h:1693:      jobject obj = rocksdb::BackupInfoJni::construct0(env,
./c-deps/rocksdb/java/rocksjni/portal.h:2025:    std::shared_ptr<rocksdb::LoggerJniCallback>*, LoggerJni> {
./c-deps/rocksdb/java/rocksjni/portal.h:2082:   * with the same properties as the provided C++ rocksdb::BatchResult object
./c-deps/rocksdb/java/rocksjni/portal.h:2085:   * @param batch_result The rocksdb::BatchResult object
./c-deps/rocksdb/java/rocksjni/portal.h:2092:      rocksdb::BatchResult& batch_result) {
./c-deps/rocksdb/java/rocksjni/portal.h:2122:  // C++ rocksdb::CompactionStopStyle enum
./c-deps/rocksdb/java/rocksjni/portal.h:2124:      const rocksdb::CompactionStopStyle& compaction_stop_style) {
./c-deps/rocksdb/java/rocksjni/portal.h:2126:      case rocksdb::CompactionStopStyle::kCompactionStopStyleSimilarSize:
./c-deps/rocksdb/java/rocksjni/portal.h:2128:      case rocksdb::CompactionStopStyle::kCompactionStopStyleTotalSize:
./c-deps/rocksdb/java/rocksjni/portal.h:2135:  // Returns the equivalent C++ rocksdb::CompactionStopStyle enum for the
./c-deps/rocksdb/java/rocksjni/portal.h:2137:  static rocksdb::CompactionStopStyle toCppCompactionStopStyle(
./c-deps/rocksdb/java/rocksjni/portal.h:2141:        return rocksdb::CompactionStopStyle::kCompactionStopStyleSimilarSize;
./c-deps/rocksdb/java/rocksjni/portal.h:2143:        return rocksdb::CompactionStopStyle::kCompactionStopStyleTotalSize;
./c-deps/rocksdb/java/rocksjni/portal.h:2146:        return rocksdb::CompactionStopStyle::kCompactionStopStyleSimilarSize;
./c-deps/rocksdb/java/rocksjni/portal.h:2155:  // C++ rocksdb::CompressionType enum
./c-deps/rocksdb/java/rocksjni/portal.h:2157:      const rocksdb::CompressionType& compression_type) {
./c-deps/rocksdb/java/rocksjni/portal.h:2159:      case rocksdb::CompressionType::kNoCompression:
./c-deps/rocksdb/java/rocksjni/portal.h:2161:      case rocksdb::CompressionType::kSnappyCompression:
./c-deps/rocksdb/java/rocksjni/portal.h:2163:      case rocksdb::CompressionType::kZlibCompression:
./c-deps/rocksdb/java/rocksjni/portal.h:2165:      case rocksdb::CompressionType::kBZip2Compression:
./c-deps/rocksdb/java/rocksjni/portal.h:2167:      case rocksdb::CompressionType::kLZ4Compression:
./c-deps/rocksdb/java/rocksjni/portal.h:2169:      case rocksdb::CompressionType::kLZ4HCCompression:
./c-deps/rocksdb/java/rocksjni/portal.h:2171:      case rocksdb::CompressionType::kXpressCompression:
./c-deps/rocksdb/java/rocksjni/portal.h:2173:      case rocksdb::CompressionType::kZSTD:
./c-deps/rocksdb/java/rocksjni/portal.h:2175:      case rocksdb::CompressionType::kDisableCompressionOption:
./c-deps/rocksdb/java/rocksjni/portal.h:2181:  // Returns the equivalent C++ rocksdb::CompressionType enum for the
./c-deps/rocksdb/java/rocksjni/portal.h:2183:  static rocksdb::CompressionType toCppCompressionType(
./c-deps/rocksdb/java/rocksjni/portal.h:2187:        return rocksdb::CompressionType::kNoCompression;
./c-deps/rocksdb/java/rocksjni/portal.h:2189:        return rocksdb::CompressionType::kSnappyCompression;
./c-deps/rocksdb/java/rocksjni/portal.h:2191:        return rocksdb::CompressionType::kZlibCompression;
./c-deps/rocksdb/java/rocksjni/portal.h:2193:        return rocksdb::CompressionType::kBZip2Compression;
./c-deps/rocksdb/java/rocksjni/portal.h:2195:        return rocksdb::CompressionType::kLZ4Compression;
./c-deps/rocksdb/java/rocksjni/portal.h:2197:        return rocksdb::CompressionType::kLZ4HCCompression;
./c-deps/rocksdb/java/rocksjni/portal.h:2199:        return rocksdb::CompressionType::kXpressCompression;
./c-deps/rocksdb/java/rocksjni/portal.h:2201:        return rocksdb::CompressionType::kZSTD;
./c-deps/rocksdb/java/rocksjni/portal.h:2204:        return rocksdb::CompressionType::kDisableCompressionOption;
./c-deps/rocksdb/java/rocksjni/portal.h:2213:  // C++ rocksdb::CompactionPri enum
./c-deps/rocksdb/java/rocksjni/portal.h:2215:      const rocksdb::CompactionPri& compaction_priority) {
./c-deps/rocksdb/java/rocksjni/portal.h:2217:      case rocksdb::CompactionPri::kByCompensatedSize:
./c-deps/rocksdb/java/rocksjni/portal.h:2219:      case rocksdb::CompactionPri::kOldestLargestSeqFirst:
./c-deps/rocksdb/java/rocksjni/portal.h:2221:      case rocksdb::CompactionPri::kOldestSmallestSeqFirst:
./c-deps/rocksdb/java/rocksjni/portal.h:2223:      case rocksdb::CompactionPri::kMinOverlappingRatio:
./c-deps/rocksdb/java/rocksjni/portal.h:2230:  // Returns the equivalent C++ rocksdb::CompactionPri enum for the
./c-deps/rocksdb/java/rocksjni/portal.h:2232:  static rocksdb::CompactionPri toCppCompactionPriority(
./c-deps/rocksdb/java/rocksjni/portal.h:2236:        return rocksdb::CompactionPri::kByCompensatedSize;
./c-deps/rocksdb/java/rocksjni/portal.h:2238:        return rocksdb::CompactionPri::kOldestLargestSeqFirst;
./c-deps/rocksdb/java/rocksjni/portal.h:2240:        return rocksdb::CompactionPri::kOldestSmallestSeqFirst;
./c-deps/rocksdb/java/rocksjni/portal.h:2242:        return rocksdb::CompactionPri::kMinOverlappingRatio;
./c-deps/rocksdb/java/rocksjni/portal.h:2245:        return rocksdb::CompactionPri::kByCompensatedSize;
./c-deps/rocksdb/java/rocksjni/portal.h:2254:  // C++ rocksdb::DBOptions::AccessHint enum
./c-deps/rocksdb/java/rocksjni/portal.h:2256:      const rocksdb::DBOptions::AccessHint& access_hint) {
./c-deps/rocksdb/java/rocksjni/portal.h:2258:      case rocksdb::DBOptions::AccessHint::NONE:
./c-deps/rocksdb/java/rocksjni/portal.h:2260:      case rocksdb::DBOptions::AccessHint::NORMAL:
./c-deps/rocksdb/java/rocksjni/portal.h:2262:      case rocksdb::DBOptions::AccessHint::SEQUENTIAL:
./c-deps/rocksdb/java/rocksjni/portal.h:2264:      case rocksdb::DBOptions::AccessHint::WILLNEED:
./c-deps/rocksdb/java/rocksjni/portal.h:2272:  // Returns the equivalent C++ rocksdb::DBOptions::AccessHint enum for the
./c-deps/rocksdb/java/rocksjni/portal.h:2274:  static rocksdb::DBOptions::AccessHint toCppAccessHint(jbyte jaccess_hint) {
./c-deps/rocksdb/java/rocksjni/portal.h:2277:        return rocksdb::DBOptions::AccessHint::NONE;
./c-deps/rocksdb/java/rocksjni/portal.h:2279:        return rocksdb::DBOptions::AccessHint::NORMAL;
./c-deps/rocksdb/java/rocksjni/portal.h:2281:        return rocksdb::DBOptions::AccessHint::SEQUENTIAL;
./c-deps/rocksdb/java/rocksjni/portal.h:2283:        return rocksdb::DBOptions::AccessHint::WILLNEED;
./c-deps/rocksdb/java/rocksjni/portal.h:2286:        return rocksdb::DBOptions::AccessHint::NORMAL;
./c-deps/rocksdb/java/rocksjni/portal.h:2295:  // C++ rocksdb::WALRecoveryMode enum
./c-deps/rocksdb/java/rocksjni/portal.h:2297:      const rocksdb::WALRecoveryMode& wal_recovery_mode) {
./c-deps/rocksdb/java/rocksjni/portal.h:2299:      case rocksdb::WALRecoveryMode::kTolerateCorruptedTailRecords:
./c-deps/rocksdb/java/rocksjni/portal.h:2301:      case rocksdb::WALRecoveryMode::kAbsoluteConsistency:
./c-deps/rocksdb/java/rocksjni/portal.h:2303:      case rocksdb::WALRecoveryMode::kPointInTimeRecovery:
./c-deps/rocksdb/java/rocksjni/portal.h:2305:      case rocksdb::WALRecoveryMode::kSkipAnyCorruptedRecords:
./c-deps/rocksdb/java/rocksjni/portal.h:2313:  // Returns the equivalent C++ rocksdb::WALRecoveryMode enum for the
./c-deps/rocksdb/java/rocksjni/portal.h:2315:  static rocksdb::WALRecoveryMode toCppWALRecoveryMode(jbyte jwal_recovery_mode) {
./c-deps/rocksdb/java/rocksjni/portal.h:2318:        return rocksdb::WALRecoveryMode::kTolerateCorruptedTailRecords;
./c-deps/rocksdb/java/rocksjni/portal.h:2320:        return rocksdb::WALRecoveryMode::kAbsoluteConsistency;
./c-deps/rocksdb/java/rocksjni/portal.h:2322:        return rocksdb::WALRecoveryMode::kPointInTimeRecovery;
./c-deps/rocksdb/java/rocksjni/portal.h:2324:        return rocksdb::WALRecoveryMode::kSkipAnyCorruptedRecords;
./c-deps/rocksdb/java/rocksjni/portal.h:2327:        return rocksdb::WALRecoveryMode::kPointInTimeRecovery;
./c-deps/rocksdb/java/rocksjni/portal.h:2336:  // C++ rocksdb::Tickers enum
./c-deps/rocksdb/java/rocksjni/portal.h:2338:      const rocksdb::Tickers& tickers) {
./c-deps/rocksdb/java/rocksjni/portal.h:2340:      case rocksdb::Tickers::BLOCK_CACHE_MISS:
./c-deps/rocksdb/java/rocksjni/portal.h:2342:      case rocksdb::Tickers::BLOCK_CACHE_HIT:
./c-deps/rocksdb/java/rocksjni/portal.h:2344:      case rocksdb::Tickers::BLOCK_CACHE_ADD:
./c-deps/rocksdb/java/rocksjni/portal.h:2346:      case rocksdb::Tickers::BLOCK_CACHE_ADD_FAILURES:
./c-deps/rocksdb/java/rocksjni/portal.h:2348:      case rocksdb::Tickers::BLOCK_CACHE_INDEX_MISS:
./c-deps/rocksdb/java/rocksjni/portal.h:2350:      case rocksdb::Tickers::BLOCK_CACHE_INDEX_HIT:
./c-deps/rocksdb/java/rocksjni/portal.h:2352:      case rocksdb::Tickers::BLOCK_CACHE_INDEX_ADD:
./c-deps/rocksdb/java/rocksjni/portal.h:2354:      case rocksdb::Tickers::BLOCK_CACHE_INDEX_BYTES_INSERT:
./c-deps/rocksdb/java/rocksjni/portal.h:2356:      case rocksdb::Tickers::BLOCK_CACHE_INDEX_BYTES_EVICT:
./c-deps/rocksdb/java/rocksjni/portal.h:2358:      case rocksdb::Tickers::BLOCK_CACHE_FILTER_MISS:
./c-deps/rocksdb/java/rocksjni/portal.h:2360:      case rocksdb::Tickers::BLOCK_CACHE_FILTER_HIT:
./c-deps/rocksdb/java/rocksjni/portal.h:2362:      case rocksdb::Tickers::BLOCK_CACHE_FILTER_ADD:
./c-deps/rocksdb/java/rocksjni/portal.h:2364:      case rocksdb::Tickers::BLOCK_CACHE_FILTER_BYTES_INSERT:
./c-deps/rocksdb/java/rocksjni/portal.h:2366:      case rocksdb::Tickers::BLOCK_CACHE_FILTER_BYTES_EVICT:
./c-deps/rocksdb/java/rocksjni/portal.h:2368:      case rocksdb::Tickers::BLOCK_CACHE_DATA_MISS:
./c-deps/rocksdb/java/rocksjni/portal.h:2370:      case rocksdb::Tickers::BLOCK_CACHE_DATA_HIT:
./c-deps/rocksdb/java/rocksjni/portal.h:2372:      case rocksdb::Tickers::BLOCK_CACHE_DATA_ADD:
./c-deps/rocksdb/java/rocksjni/portal.h:2374:      case rocksdb::Tickers::BLOCK_CACHE_DATA_BYTES_INSERT:
./c-deps/rocksdb/java/rocksjni/portal.h:2376:      case rocksdb::Tickers::BLOCK_CACHE_BYTES_READ:
./c-deps/rocksdb/java/rocksjni/portal.h:2378:      case rocksdb::Tickers::BLOCK_CACHE_BYTES_WRITE:
./c-deps/rocksdb/java/rocksjni/portal.h:2380:      case rocksdb::Tickers::BLOOM_FILTER_USEFUL:
./c-deps/rocksdb/java/rocksjni/portal.h:2382:      case rocksdb::Tickers::PERSISTENT_CACHE_HIT:
./c-deps/rocksdb/java/rocksjni/portal.h:2384:      case rocksdb::Tickers::PERSISTENT_CACHE_MISS:
./c-deps/rocksdb/java/rocksjni/portal.h:2386:      case rocksdb::Tickers::SIM_BLOCK_CACHE_HIT:
./c-deps/rocksdb/java/rocksjni/portal.h:2388:      case rocksdb::Tickers::SIM_BLOCK_CACHE_MISS:
./c-deps/rocksdb/java/rocksjni/portal.h:2390:      case rocksdb::Tickers::MEMTABLE_HIT:
./c-deps/rocksdb/java/rocksjni/portal.h:2392:      case rocksdb::Tickers::MEMTABLE_MISS:
./c-deps/rocksdb/java/rocksjni/portal.h:2394:      case rocksdb::Tickers::GET_HIT_L0:
./c-deps/rocksdb/java/rocksjni/portal.h:2396:      case rocksdb::Tickers::GET_HIT_L1:
./c-deps/rocksdb/java/rocksjni/portal.h:2398:      case rocksdb::Tickers::GET_HIT_L2_AND_UP:
./c-deps/rocksdb/java/rocksjni/portal.h:2400:      case rocksdb::Tickers::COMPACTION_KEY_DROP_NEWER_ENTRY:
./c-deps/rocksdb/java/rocksjni/portal.h:2402:      case rocksdb::Tickers::COMPACTION_KEY_DROP_OBSOLETE:
./c-deps/rocksdb/java/rocksjni/portal.h:2404:      case rocksdb::Tickers::COMPACTION_KEY_DROP_RANGE_DEL:
./c-deps/rocksdb/java/rocksjni/portal.h:2406:      case rocksdb::Tickers::COMPACTION_KEY_DROP_USER:
./c-deps/rocksdb/java/rocksjni/portal.h:2408:      case rocksdb::Tickers::COMPACTION_RANGE_DEL_DROP_OBSOLETE:
./c-deps/rocksdb/java/rocksjni/portal.h:2410:      case rocksdb::Tickers::NUMBER_KEYS_WRITTEN:
./c-deps/rocksdb/java/rocksjni/portal.h:2412:      case rocksdb::Tickers::NUMBER_KEYS_READ:
./c-deps/rocksdb/java/rocksjni/portal.h:2414:      case rocksdb::Tickers::NUMBER_KEYS_UPDATED:
./c-deps/rocksdb/java/rocksjni/portal.h:2416:      case rocksdb::Tickers::BYTES_WRITTEN:
./c-deps/rocksdb/java/rocksjni/portal.h:2418:      case rocksdb::Tickers::BYTES_READ:
./c-deps/rocksdb/java/rocksjni/portal.h:2420:      case rocksdb::Tickers::NUMBER_DB_SEEK:
./c-deps/rocksdb/java/rocksjni/portal.h:2422:      case rocksdb::Tickers::NUMBER_DB_NEXT:
./c-deps/rocksdb/java/rocksjni/portal.h:2424:      case rocksdb::Tickers::NUMBER_DB_PREV:
./c-deps/rocksdb/java/rocksjni/portal.h:2426:      case rocksdb::Tickers::NUMBER_DB_SEEK_FOUND:
./c-deps/rocksdb/java/rocksjni/portal.h:2428:      case rocksdb::Tickers::NUMBER_DB_NEXT_FOUND:
./c-deps/rocksdb/java/rocksjni/portal.h:2430:      case rocksdb::Tickers::NUMBER_DB_PREV_FOUND:
./c-deps/rocksdb/java/rocksjni/portal.h:2432:      case rocksdb::Tickers::ITER_BYTES_READ:
./c-deps/rocksdb/java/rocksjni/portal.h:2434:      case rocksdb::Tickers::NO_FILE_CLOSES:
./c-deps/rocksdb/java/rocksjni/portal.h:2436:      case rocksdb::Tickers::NO_FILE_OPENS:
./c-deps/rocksdb/java/rocksjni/portal.h:2438:      case rocksdb::Tickers::NO_FILE_ERRORS:
./c-deps/rocksdb/java/rocksjni/portal.h:2440:      case rocksdb::Tickers::STALL_L0_SLOWDOWN_MICROS:
./c-deps/rocksdb/java/rocksjni/portal.h:2442:      case rocksdb::Tickers::STALL_MEMTABLE_COMPACTION_MICROS:
./c-deps/rocksdb/java/rocksjni/portal.h:2444:      case rocksdb::Tickers::STALL_L0_NUM_FILES_MICROS:
./c-deps/rocksdb/java/rocksjni/portal.h:2446:      case rocksdb::Tickers::STALL_MICROS:
./c-deps/rocksdb/java/rocksjni/portal.h:2448:      case rocksdb::Tickers::DB_MUTEX_WAIT_MICROS:
./c-deps/rocksdb/java/rocksjni/portal.h:2450:      case rocksdb::Tickers::RATE_LIMIT_DELAY_MILLIS:
./c-deps/rocksdb/java/rocksjni/portal.h:2452:      case rocksdb::Tickers::NO_ITERATORS:
./c-deps/rocksdb/java/rocksjni/portal.h:2454:      case rocksdb::Tickers::NUMBER_MULTIGET_CALLS:
./c-deps/rocksdb/java/rocksjni/portal.h:2456:      case rocksdb::Tickers::NUMBER_MULTIGET_KEYS_READ:
./c-deps/rocksdb/java/rocksjni/portal.h:2458:      case rocksdb::Tickers::NUMBER_MULTIGET_BYTES_READ:
./c-deps/rocksdb/java/rocksjni/portal.h:2460:      case rocksdb::Tickers::NUMBER_FILTERED_DELETES:
./c-deps/rocksdb/java/rocksjni/portal.h:2462:      case rocksdb::Tickers::NUMBER_MERGE_FAILURES:
./c-deps/rocksdb/java/rocksjni/portal.h:2464:      case rocksdb::Tickers::BLOOM_FILTER_PREFIX_CHECKED:
./c-deps/rocksdb/java/rocksjni/portal.h:2466:      case rocksdb::Tickers::BLOOM_FILTER_PREFIX_USEFUL:
./c-deps/rocksdb/java/rocksjni/portal.h:2468:      case rocksdb::Tickers::NUMBER_OF_RESEEKS_IN_ITERATION:
./c-deps/rocksdb/java/rocksjni/portal.h:2470:      case rocksdb::Tickers::GET_UPDATES_SINCE_CALLS:
./c-deps/rocksdb/java/rocksjni/portal.h:2472:      case rocksdb::Tickers::BLOCK_CACHE_COMPRESSED_MISS:
./c-deps/rocksdb/java/rocksjni/portal.h:2474:      case rocksdb::Tickers::BLOCK_CACHE_COMPRESSED_HIT:
./c-deps/rocksdb/java/rocksjni/portal.h:2476:      case rocksdb::Tickers::BLOCK_CACHE_COMPRESSED_ADD:
./c-deps/rocksdb/java/rocksjni/portal.h:2478:      case rocksdb::Tickers::BLOCK_CACHE_COMPRESSED_ADD_FAILURES:
./c-deps/rocksdb/java/rocksjni/portal.h:2480:      case rocksdb::Tickers::WAL_FILE_SYNCED:
./c-deps/rocksdb/java/rocksjni/portal.h:2482:      case rocksdb::Tickers::WAL_FILE_BYTES:
./c-deps/rocksdb/java/rocksjni/portal.h:2484:      case rocksdb::Tickers::WRITE_DONE_BY_SELF:
./c-deps/rocksdb/java/rocksjni/portal.h:2486:      case rocksdb::Tickers::WRITE_DONE_BY_OTHER:
./c-deps/rocksdb/java/rocksjni/portal.h:2488:      case rocksdb::Tickers::WRITE_TIMEDOUT:
./c-deps/rocksdb/java/rocksjni/portal.h:2490:      case rocksdb::Tickers::WRITE_WITH_WAL:
./c-deps/rocksdb/java/rocksjni/portal.h:2492:      case rocksdb::Tickers::COMPACT_READ_BYTES:
./c-deps/rocksdb/java/rocksjni/portal.h:2494:      case rocksdb::Tickers::COMPACT_WRITE_BYTES:
./c-deps/rocksdb/java/rocksjni/portal.h:2496:      case rocksdb::Tickers::FLUSH_WRITE_BYTES:
./c-deps/rocksdb/java/rocksjni/portal.h:2498:      case rocksdb::Tickers::NUMBER_DIRECT_LOAD_TABLE_PROPERTIES:
./c-deps/rocksdb/java/rocksjni/portal.h:2500:      case rocksdb::Tickers::NUMBER_SUPERVERSION_ACQUIRES:
./c-deps/rocksdb/java/rocksjni/portal.h:2502:      case rocksdb::Tickers::NUMBER_SUPERVERSION_RELEASES:
./c-deps/rocksdb/java/rocksjni/portal.h:2504:      case rocksdb::Tickers::NUMBER_SUPERVERSION_CLEANUPS:
./c-deps/rocksdb/java/rocksjni/portal.h:2506:      case rocksdb::Tickers::NUMBER_BLOCK_COMPRESSED:
./c-deps/rocksdb/java/rocksjni/portal.h:2508:      case rocksdb::Tickers::NUMBER_BLOCK_DECOMPRESSED:
./c-deps/rocksdb/java/rocksjni/portal.h:2510:      case rocksdb::Tickers::NUMBER_BLOCK_NOT_COMPRESSED:
./c-deps/rocksdb/java/rocksjni/portal.h:2512:      case rocksdb::Tickers::MERGE_OPERATION_TOTAL_TIME:
./c-deps/rocksdb/java/rocksjni/portal.h:2514:      case rocksdb::Tickers::FILTER_OPERATION_TOTAL_TIME:
./c-deps/rocksdb/java/rocksjni/portal.h:2516:      case rocksdb::Tickers::ROW_CACHE_HIT:
./c-deps/rocksdb/java/rocksjni/portal.h:2518:      case rocksdb::Tickers::ROW_CACHE_MISS:
./c-deps/rocksdb/java/rocksjni/portal.h:2520:      case rocksdb::Tickers::READ_AMP_ESTIMATE_USEFUL_BYTES:
./c-deps/rocksdb/java/rocksjni/portal.h:2522:      case rocksdb::Tickers::READ_AMP_TOTAL_READ_BYTES:
./c-deps/rocksdb/java/rocksjni/portal.h:2524:      case rocksdb::Tickers::NUMBER_RATE_LIMITER_DRAINS:
./c-deps/rocksdb/java/rocksjni/portal.h:2526:      case rocksdb::Tickers::TICKER_ENUM_MAX:
./c-deps/rocksdb/java/rocksjni/portal.h:2535:  // Returns the equivalent C++ rocksdb::Tickers enum for the
./c-deps/rocksdb/java/rocksjni/portal.h:2537:  static rocksdb::Tickers toCppTickers(jbyte jticker_type) {
./c-deps/rocksdb/java/rocksjni/portal.h:2540:        return rocksdb::Tickers::BLOCK_CACHE_MISS;
./c-deps/rocksdb/java/rocksjni/portal.h:2542:        return rocksdb::Tickers::BLOCK_CACHE_HIT;
./c-deps/rocksdb/java/rocksjni/portal.h:2544:        return rocksdb::Tickers::BLOCK_CACHE_ADD;
./c-deps/rocksdb/java/rocksjni/portal.h:2546:        return rocksdb::Tickers::BLOCK_CACHE_ADD_FAILURES;
./c-deps/rocksdb/java/rocksjni/portal.h:2548:        return rocksdb::Tickers::BLOCK_CACHE_INDEX_MISS;
./c-deps/rocksdb/java/rocksjni/portal.h:2550:        return rocksdb::Tickers::BLOCK_CACHE_INDEX_HIT;
./c-deps/rocksdb/java/rocksjni/portal.h:2552:        return rocksdb::Tickers::BLOCK_CACHE_INDEX_ADD;
./c-deps/rocksdb/java/rocksjni/portal.h:2554:        return rocksdb::Tickers::BLOCK_CACHE_INDEX_BYTES_INSERT;
./c-deps/rocksdb/java/rocksjni/portal.h:2556:        return rocksdb::Tickers::BLOCK_CACHE_INDEX_BYTES_EVICT;
./c-deps/rocksdb/java/rocksjni/portal.h:2558:        return rocksdb::Tickers::BLOCK_CACHE_FILTER_MISS;
./c-deps/rocksdb/java/rocksjni/portal.h:2560:        return rocksdb::Tickers::BLOCK_CACHE_FILTER_HIT;
./c-deps/rocksdb/java/rocksjni/portal.h:2562:        return rocksdb::Tickers::BLOCK_CACHE_FILTER_ADD;
./c-deps/rocksdb/java/rocksjni/portal.h:2564:        return rocksdb::Tickers::BLOCK_CACHE_FILTER_BYTES_INSERT;
./c-deps/rocksdb/java/rocksjni/portal.h:2566:        return rocksdb::Tickers::BLOCK_CACHE_FILTER_BYTES_EVICT;
./c-deps/rocksdb/java/rocksjni/portal.h:2568:        return rocksdb::Tickers::BLOCK_CACHE_DATA_MISS;
./c-deps/rocksdb/java/rocksjni/portal.h:2570:        return rocksdb::Tickers::BLOCK_CACHE_DATA_HIT;
./c-deps/rocksdb/java/rocksjni/portal.h:2572:        return rocksdb::Tickers::BLOCK_CACHE_DATA_ADD;
./c-deps/rocksdb/java/rocksjni/portal.h:2574:        return rocksdb::Tickers::BLOCK_CACHE_DATA_BYTES_INSERT;
./c-deps/rocksdb/java/rocksjni/portal.h:2576:        return rocksdb::Tickers::BLOCK_CACHE_BYTES_READ;
./c-deps/rocksdb/java/rocksjni/portal.h:2578:        return rocksdb::Tickers::BLOCK_CACHE_BYTES_WRITE;
./c-deps/rocksdb/java/rocksjni/portal.h:2580:        return rocksdb::Tickers::BLOOM_FILTER_USEFUL;
./c-deps/rocksdb/java/rocksjni/portal.h:2582:        return rocksdb::Tickers::PERSISTENT_CACHE_HIT;
./c-deps/rocksdb/java/rocksjni/portal.h:2584:        return rocksdb::Tickers::PERSISTENT_CACHE_MISS;
./c-deps/rocksdb/java/rocksjni/portal.h:2586:        return rocksdb::Tickers::SIM_BLOCK_CACHE_HIT;
./c-deps/rocksdb/java/rocksjni/portal.h:2588:        return rocksdb::Tickers::SIM_BLOCK_CACHE_MISS;
./c-deps/rocksdb/java/rocksjni/portal.h:2590:        return rocksdb::Tickers::MEMTABLE_HIT;
./c-deps/rocksdb/java/rocksjni/portal.h:2592:        return rocksdb::Tickers::MEMTABLE_MISS;
./c-deps/rocksdb/java/rocksjni/portal.h:2594:        return rocksdb::Tickers::GET_HIT_L0;
./c-deps/rocksdb/java/rocksjni/portal.h:2596:        return rocksdb::Tickers::GET_HIT_L1;
./c-deps/rocksdb/java/rocksjni/portal.h:2598:        return rocksdb::Tickers::GET_HIT_L2_AND_UP;
./c-deps/rocksdb/java/rocksjni/portal.h:2600:        return rocksdb::Tickers::COMPACTION_KEY_DROP_NEWER_ENTRY;
./c-deps/rocksdb/java/rocksjni/portal.h:2602:        return rocksdb::Tickers::COMPACTION_KEY_DROP_OBSOLETE;
./c-deps/rocksdb/java/rocksjni/portal.h:2604:        return rocksdb::Tickers::COMPACTION_KEY_DROP_RANGE_DEL;
./c-deps/rocksdb/java/rocksjni/portal.h:2606:        return rocksdb::Tickers::COMPACTION_KEY_DROP_USER;
./c-deps/rocksdb/java/rocksjni/portal.h:2608:        return rocksdb::Tickers::COMPACTION_RANGE_DEL_DROP_OBSOLETE;
./c-deps/rocksdb/java/rocksjni/portal.h:2610:        return rocksdb::Tickers::NUMBER_KEYS_WRITTEN;
./c-deps/rocksdb/java/rocksjni/portal.h:2612:        return rocksdb::Tickers::NUMBER_KEYS_READ;
./c-deps/rocksdb/java/rocksjni/portal.h:2614:        return rocksdb::Tickers::NUMBER_KEYS_UPDATED;
./c-deps/rocksdb/java/rocksjni/portal.h:2616:        return rocksdb::Tickers::BYTES_WRITTEN;
./c-deps/rocksdb/java/rocksjni/portal.h:2618:        return rocksdb::Tickers::BYTES_READ;
./c-deps/rocksdb/java/rocksjni/portal.h:2620:        return rocksdb::Tickers::NUMBER_DB_SEEK;
./c-deps/rocksdb/java/rocksjni/portal.h:2622:        return rocksdb::Tickers::NUMBER_DB_NEXT;
./c-deps/rocksdb/java/rocksjni/portal.h:2624:        return rocksdb::Tickers::NUMBER_DB_PREV;
./c-deps/rocksdb/java/rocksjni/portal.h:2626:        return rocksdb::Tickers::NUMBER_DB_SEEK_FOUND;
./c-deps/rocksdb/java/rocksjni/portal.h:2628:        return rocksdb::Tickers::NUMBER_DB_NEXT_FOUND;
./c-deps/rocksdb/java/rocksjni/portal.h:2630:        return rocksdb::Tickers::NUMBER_DB_PREV_FOUND;
./c-deps/rocksdb/java/rocksjni/portal.h:2632:        return rocksdb::Tickers::ITER_BYTES_READ;
./c-deps/rocksdb/java/rocksjni/portal.h:2634:        return rocksdb::Tickers::NO_FILE_CLOSES;
./c-deps/rocksdb/java/rocksjni/portal.h:2636:        return rocksdb::Tickers::NO_FILE_OPENS;
./c-deps/rocksdb/java/rocksjni/portal.h:2638:        return rocksdb::Tickers::NO_FILE_ERRORS;
./c-deps/rocksdb/java/rocksjni/portal.h:2640:        return rocksdb::Tickers::STALL_L0_SLOWDOWN_MICROS;
./c-deps/rocksdb/java/rocksjni/portal.h:2642:        return rocksdb::Tickers::STALL_MEMTABLE_COMPACTION_MICROS;
./c-deps/rocksdb/java/rocksjni/portal.h:2644:        return rocksdb::Tickers::STALL_L0_NUM_FILES_MICROS;
./c-deps/rocksdb/java/rocksjni/portal.h:2646:        return rocksdb::Tickers::STALL_MICROS;
./c-deps/rocksdb/java/rocksjni/portal.h:2648:        return rocksdb::Tickers::DB_MUTEX_WAIT_MICROS;
./c-deps/rocksdb/java/rocksjni/portal.h:2650:        return rocksdb::Tickers::RATE_LIMIT_DELAY_MILLIS;
./c-deps/rocksdb/java/rocksjni/portal.h:2652:        return rocksdb::Tickers::NO_ITERATORS;
./c-deps/rocksdb/java/rocksjni/portal.h:2654:        return rocksdb::Tickers::NUMBER_MULTIGET_CALLS;
./c-deps/rocksdb/java/rocksjni/portal.h:2656:        return rocksdb::Tickers::NUMBER_MULTIGET_KEYS_READ;
./c-deps/rocksdb/java/rocksjni/portal.h:2658:        return rocksdb::Tickers::NUMBER_MULTIGET_BYTES_READ;
./c-deps/rocksdb/java/rocksjni/portal.h:2660:        return rocksdb::Tickers::NUMBER_FILTERED_DELETES;
./c-deps/rocksdb/java/rocksjni/portal.h:2662:        return rocksdb::Tickers::NUMBER_MERGE_FAILURES;
./c-deps/rocksdb/java/rocksjni/portal.h:2664:        return rocksdb::Tickers::BLOOM_FILTER_PREFIX_CHECKED;
./c-deps/rocksdb/java/rocksjni/portal.h:2666:        return rocksdb::Tickers::BLOOM_FILTER_PREFIX_USEFUL;
./c-deps/rocksdb/java/rocksjni/portal.h:2668:        return rocksdb::Tickers::NUMBER_OF_RESEEKS_IN_ITERATION;
./c-deps/rocksdb/java/rocksjni/portal.h:2670:        return rocksdb::Tickers::GET_UPDATES_SINCE_CALLS;
./c-deps/rocksdb/java/rocksjni/portal.h:2672:        return rocksdb::Tickers::BLOCK_CACHE_COMPRESSED_MISS;
./c-deps/rocksdb/java/rocksjni/portal.h:2674:        return rocksdb::Tickers::BLOCK_CACHE_COMPRESSED_HIT;
./c-deps/rocksdb/java/rocksjni/portal.h:2676:        return rocksdb::Tickers::BLOCK_CACHE_COMPRESSED_ADD;
./c-deps/rocksdb/java/rocksjni/portal.h:2678:        return rocksdb::Tickers::BLOCK_CACHE_COMPRESSED_ADD_FAILURES;
./c-deps/rocksdb/java/rocksjni/portal.h:2680:        return rocksdb::Tickers::WAL_FILE_SYNCED;
./c-deps/rocksdb/java/rocksjni/portal.h:2682:        return rocksdb::Tickers::WAL_FILE_BYTES;
./c-deps/rocksdb/java/rocksjni/portal.h:2684:        return rocksdb::Tickers::WRITE_DONE_BY_SELF;
./c-deps/rocksdb/java/rocksjni/portal.h:2686:        return rocksdb::Tickers::WRITE_DONE_BY_OTHER;
./c-deps/rocksdb/java/rocksjni/portal.h:2688:        return rocksdb::Tickers::WRITE_TIMEDOUT;
./c-deps/rocksdb/java/rocksjni/portal.h:2690:        return rocksdb::Tickers::WRITE_WITH_WAL;
./c-deps/rocksdb/java/rocksjni/portal.h:2692:        return rocksdb::Tickers::COMPACT_READ_BYTES;
./c-deps/rocksdb/java/rocksjni/portal.h:2694:        return rocksdb::Tickers::COMPACT_WRITE_BYTES;
./c-deps/rocksdb/java/rocksjni/portal.h:2696:        return rocksdb::Tickers::FLUSH_WRITE_BYTES;
./c-deps/rocksdb/java/rocksjni/portal.h:2698:        return rocksdb::Tickers::NUMBER_DIRECT_LOAD_TABLE_PROPERTIES;
./c-deps/rocksdb/java/rocksjni/portal.h:2700:        return rocksdb::Tickers::NUMBER_SUPERVERSION_ACQUIRES;
./c-deps/rocksdb/java/rocksjni/portal.h:2702:        return rocksdb::Tickers::NUMBER_SUPERVERSION_RELEASES;
./c-deps/rocksdb/java/rocksjni/portal.h:2704:        return rocksdb::Tickers::NUMBER_SUPERVERSION_CLEANUPS;
./c-deps/rocksdb/java/rocksjni/portal.h:2706:        return rocksdb::Tickers::NUMBER_BLOCK_COMPRESSED;
./c-deps/rocksdb/java/rocksjni/portal.h:2708:        return rocksdb::Tickers::NUMBER_BLOCK_DECOMPRESSED;
./c-deps/rocksdb/java/rocksjni/portal.h:2710:        return rocksdb::Tickers::NUMBER_BLOCK_NOT_COMPRESSED;
./c-deps/rocksdb/java/rocksjni/portal.h:2712:        return rocksdb::Tickers::MERGE_OPERATION_TOTAL_TIME;
./c-deps/rocksdb/java/rocksjni/portal.h:2714:        return rocksdb::Tickers::FILTER_OPERATION_TOTAL_TIME;
./c-deps/rocksdb/java/rocksjni/portal.h:2716:        return rocksdb::Tickers::ROW_CACHE_HIT;
./c-deps/rocksdb/java/rocksjni/portal.h:2718:        return rocksdb::Tickers::ROW_CACHE_MISS;
./c-deps/rocksdb/java/rocksjni/portal.h:2720:        return rocksdb::Tickers::READ_AMP_ESTIMATE_USEFUL_BYTES;
./c-deps/rocksdb/java/rocksjni/portal.h:2722:        return rocksdb::Tickers::READ_AMP_TOTAL_READ_BYTES;
./c-deps/rocksdb/java/rocksjni/portal.h:2724:        return rocksdb::Tickers::NUMBER_RATE_LIMITER_DRAINS;
./c-deps/rocksdb/java/rocksjni/portal.h:2726:        return rocksdb::Tickers::TICKER_ENUM_MAX;
./c-deps/rocksdb/java/rocksjni/portal.h:2730:        return rocksdb::Tickers::BLOCK_CACHE_MISS;
./c-deps/rocksdb/java/rocksjni/portal.h:2739:  // C++ rocksdb::Histograms enum
./c-deps/rocksdb/java/rocksjni/portal.h:2741:      const rocksdb::Histograms& histograms) {
./c-deps/rocksdb/java/rocksjni/portal.h:2743:      case rocksdb::Histograms::DB_GET:
./c-deps/rocksdb/java/rocksjni/portal.h:2745:      case rocksdb::Histograms::DB_WRITE:
./c-deps/rocksdb/java/rocksjni/portal.h:2747:      case rocksdb::Histograms::COMPACTION_TIME:
./c-deps/rocksdb/java/rocksjni/portal.h:2749:      case rocksdb::Histograms::SUBCOMPACTION_SETUP_TIME:
./c-deps/rocksdb/java/rocksjni/portal.h:2751:      case rocksdb::Histograms::TABLE_SYNC_MICROS:
./c-deps/rocksdb/java/rocksjni/portal.h:2753:      case rocksdb::Histograms::COMPACTION_OUTFILE_SYNC_MICROS:
./c-deps/rocksdb/java/rocksjni/portal.h:2755:      case rocksdb::Histograms::WAL_FILE_SYNC_MICROS:
./c-deps/rocksdb/java/rocksjni/portal.h:2757:      case rocksdb::Histograms::MANIFEST_FILE_SYNC_MICROS:
./c-deps/rocksdb/java/rocksjni/portal.h:2759:      case rocksdb::Histograms::TABLE_OPEN_IO_MICROS:
./c-deps/rocksdb/java/rocksjni/portal.h:2761:      case rocksdb::Histograms::DB_MULTIGET:
./c-deps/rocksdb/java/rocksjni/portal.h:2763:      case rocksdb::Histograms::READ_BLOCK_COMPACTION_MICROS:
./c-deps/rocksdb/java/rocksjni/portal.h:2765:      case rocksdb::Histograms::READ_BLOCK_GET_MICROS:
./c-deps/rocksdb/java/rocksjni/portal.h:2767:      case rocksdb::Histograms::WRITE_RAW_BLOCK_MICROS:
./c-deps/rocksdb/java/rocksjni/portal.h:2769:      case rocksdb::Histograms::STALL_L0_SLOWDOWN_COUNT:
./c-deps/rocksdb/java/rocksjni/portal.h:2771:      case rocksdb::Histograms::STALL_MEMTABLE_COMPACTION_COUNT:
./c-deps/rocksdb/java/rocksjni/portal.h:2773:      case rocksdb::Histograms::STALL_L0_NUM_FILES_COUNT:
./c-deps/rocksdb/java/rocksjni/portal.h:2775:      case rocksdb::Histograms::HARD_RATE_LIMIT_DELAY_COUNT:
./c-deps/rocksdb/java/rocksjni/portal.h:2777:      case rocksdb::Histograms::SOFT_RATE_LIMIT_DELAY_COUNT:
./c-deps/rocksdb/java/rocksjni/portal.h:2779:      case rocksdb::Histograms::NUM_FILES_IN_SINGLE_COMPACTION:
./c-deps/rocksdb/java/rocksjni/portal.h:2781:      case rocksdb::Histograms::DB_SEEK:
./c-deps/rocksdb/java/rocksjni/portal.h:2783:      case rocksdb::Histograms::WRITE_STALL:
./c-deps/rocksdb/java/rocksjni/portal.h:2785:      case rocksdb::Histograms::SST_READ_MICROS:
./c-deps/rocksdb/java/rocksjni/portal.h:2787:      case rocksdb::Histograms::NUM_SUBCOMPACTIONS_SCHEDULED:
./c-deps/rocksdb/java/rocksjni/portal.h:2789:      case rocksdb::Histograms::BYTES_PER_READ:
./c-deps/rocksdb/java/rocksjni/portal.h:2791:      case rocksdb::Histograms::BYTES_PER_WRITE:
./c-deps/rocksdb/java/rocksjni/portal.h:2793:      case rocksdb::Histograms::BYTES_PER_MULTIGET:
./c-deps/rocksdb/java/rocksjni/portal.h:2795:      case rocksdb::Histograms::BYTES_COMPRESSED:
./c-deps/rocksdb/java/rocksjni/portal.h:2797:      case rocksdb::Histograms::BYTES_DECOMPRESSED:
./c-deps/rocksdb/java/rocksjni/portal.h:2799:      case rocksdb::Histograms::COMPRESSION_TIMES_NANOS:
./c-deps/rocksdb/java/rocksjni/portal.h:2801:      case rocksdb::Histograms::DECOMPRESSION_TIMES_NANOS:
./c-deps/rocksdb/java/rocksjni/portal.h:2803:      case rocksdb::Histograms::READ_NUM_MERGE_OPERANDS:
./c-deps/rocksdb/java/rocksjni/portal.h:2805:      case rocksdb::Histograms::HISTOGRAM_ENUM_MAX:
./c-deps/rocksdb/java/rocksjni/portal.h:2814:  // Returns the equivalent C++ rocksdb::Histograms enum for the
./c-deps/rocksdb/java/rocksjni/portal.h:2816:  static rocksdb::Histograms toCppHistograms(jbyte jhistograms_type) {
./c-deps/rocksdb/java/rocksjni/portal.h:2819:        return rocksdb::Histograms::DB_GET;
./c-deps/rocksdb/java/rocksjni/portal.h:2821:        return rocksdb::Histograms::DB_WRITE;
./c-deps/rocksdb/java/rocksjni/portal.h:2823:        return rocksdb::Histograms::COMPACTION_TIME;
./c-deps/rocksdb/java/rocksjni/portal.h:2825:        return rocksdb::Histograms::SUBCOMPACTION_SETUP_TIME;
./c-deps/rocksdb/java/rocksjni/portal.h:2827:        return rocksdb::Histograms::TABLE_SYNC_MICROS;
./c-deps/rocksdb/java/rocksjni/portal.h:2829:        return rocksdb::Histograms::COMPACTION_OUTFILE_SYNC_MICROS;
./c-deps/rocksdb/java/rocksjni/portal.h:2831:        return rocksdb::Histograms::WAL_FILE_SYNC_MICROS;
./c-deps/rocksdb/java/rocksjni/portal.h:2833:        return rocksdb::Histograms::MANIFEST_FILE_SYNC_MICROS;
./c-deps/rocksdb/java/rocksjni/portal.h:2835:        return rocksdb::Histograms::TABLE_OPEN_IO_MICROS;
./c-deps/rocksdb/java/rocksjni/portal.h:2837:        return rocksdb::Histograms::DB_MULTIGET;
./c-deps/rocksdb/java/rocksjni/portal.h:2839:        return rocksdb::Histograms::READ_BLOCK_COMPACTION_MICROS;
./c-deps/rocksdb/java/rocksjni/portal.h:2841:        return rocksdb::Histograms::READ_BLOCK_GET_MICROS;
./c-deps/rocksdb/java/rocksjni/portal.h:2843:        return rocksdb::Histograms::WRITE_RAW_BLOCK_MICROS;
./c-deps/rocksdb/java/rocksjni/portal.h:2845:        return rocksdb::Histograms::STALL_L0_SLOWDOWN_COUNT;
./c-deps/rocksdb/java/rocksjni/portal.h:2847:        return rocksdb::Histograms::STALL_MEMTABLE_COMPACTION_COUNT;
./c-deps/rocksdb/java/rocksjni/portal.h:2849:        return rocksdb::Histograms::STALL_L0_NUM_FILES_COUNT;
./c-deps/rocksdb/java/rocksjni/portal.h:2851:        return rocksdb::Histograms::HARD_RATE_LIMIT_DELAY_COUNT;
./c-deps/rocksdb/java/rocksjni/portal.h:2853:        return rocksdb::Histograms::SOFT_RATE_LIMIT_DELAY_COUNT;
./c-deps/rocksdb/java/rocksjni/portal.h:2855:        return rocksdb::Histograms::NUM_FILES_IN_SINGLE_COMPACTION;
./c-deps/rocksdb/java/rocksjni/portal.h:2857:        return rocksdb::Histograms::DB_SEEK;
./c-deps/rocksdb/java/rocksjni/portal.h:2859:        return rocksdb::Histograms::WRITE_STALL;
./c-deps/rocksdb/java/rocksjni/portal.h:2861:        return rocksdb::Histograms::SST_READ_MICROS;
./c-deps/rocksdb/java/rocksjni/portal.h:2863:        return rocksdb::Histograms::NUM_SUBCOMPACTIONS_SCHEDULED;
./c-deps/rocksdb/java/rocksjni/portal.h:2865:        return rocksdb::Histograms::BYTES_PER_READ;
./c-deps/rocksdb/java/rocksjni/portal.h:2867:        return rocksdb::Histograms::BYTES_PER_WRITE;
./c-deps/rocksdb/java/rocksjni/portal.h:2869:        return rocksdb::Histograms::BYTES_PER_MULTIGET;
./c-deps/rocksdb/java/rocksjni/portal.h:2871:        return rocksdb::Histograms::BYTES_COMPRESSED;
./c-deps/rocksdb/java/rocksjni/portal.h:2873:        return rocksdb::Histograms::BYTES_DECOMPRESSED;
./c-deps/rocksdb/java/rocksjni/portal.h:2875:        return rocksdb::Histograms::COMPRESSION_TIMES_NANOS;
./c-deps/rocksdb/java/rocksjni/portal.h:2877:        return rocksdb::Histograms::DECOMPRESSION_TIMES_NANOS;
./c-deps/rocksdb/java/rocksjni/portal.h:2879:        return rocksdb::Histograms::READ_NUM_MERGE_OPERANDS;
./c-deps/rocksdb/java/rocksjni/portal.h:2881:        return rocksdb::Histograms::HISTOGRAM_ENUM_MAX;
./c-deps/rocksdb/java/rocksjni/portal.h:2885:        return rocksdb::Histograms::DB_GET;
./c-deps/rocksdb/java/rocksjni/portal.h:2894:  // C++ rocksdb::StatsLevel enum
./c-deps/rocksdb/java/rocksjni/portal.h:2896:      const rocksdb::StatsLevel& stats_level) {
./c-deps/rocksdb/java/rocksjni/portal.h:2898:      case rocksdb::StatsLevel::kExceptDetailedTimers:
./c-deps/rocksdb/java/rocksjni/portal.h:2900:      case rocksdb::StatsLevel::kExceptTimeForMutex:
./c-deps/rocksdb/java/rocksjni/portal.h:2902:      case rocksdb::StatsLevel::kAll:
./c-deps/rocksdb/java/rocksjni/portal.h:2911:  // Returns the equivalent C++ rocksdb::StatsLevel enum for the
./c-deps/rocksdb/java/rocksjni/portal.h:2913:  static rocksdb::StatsLevel toCppStatsLevel(jbyte jstats_level) {
./c-deps/rocksdb/java/rocksjni/portal.h:2916:        return rocksdb::StatsLevel::kExceptDetailedTimers;
./c-deps/rocksdb/java/rocksjni/portal.h:2918:        return rocksdb::StatsLevel::kExceptTimeForMutex;
./c-deps/rocksdb/java/rocksjni/portal.h:2920:        return rocksdb::StatsLevel::kAll;
./c-deps/rocksdb/java/rocksjni/portal.h:2924:        return rocksdb::StatsLevel::kExceptDetailedTimers;
./c-deps/rocksdb/java/rocksjni/portal.h:3017:          return rocksdb::JniUtil::copyStrings(env, jss,
./c-deps/rocksdb/java/rocksjni/portal.h:3311:     * TODO(AR) could be extended to cover returning rocksdb::Status
./c-deps/rocksdb/java/rocksjni/portal.h:3315:        std::function<void(rocksdb::Slice, rocksdb::Slice)> op,
./c-deps/rocksdb/java/rocksjni/portal.h:3334:      rocksdb::Slice key_slice(reinterpret_cast<char*>(key), jkey_len);
./c-deps/rocksdb/java/rocksjni/portal.h:3335:      rocksdb::Slice value_slice(reinterpret_cast<char*>(value),
./c-deps/rocksdb/java/rocksjni/portal.h:3352:     * TODO(AR) could be extended to cover returning rocksdb::Status
./c-deps/rocksdb/java/rocksjni/portal.h:3356:        std::function<void(rocksdb::Slice)> op,
./c-deps/rocksdb/java/rocksjni/portal.h:3365:      rocksdb::Slice key_slice(reinterpret_cast<char*>(key), jkey_len);
./c-deps/rocksdb/java/rocksjni/portal.h:3379:        std::function<rocksdb::Status(rocksdb::Slice, std::string*)> op,
./c-deps/rocksdb/java/rocksjni/portal.h:3387:      rocksdb::Slice key_slice(reinterpret_cast<char*>(key), jkey_len);
./c-deps/rocksdb/java/rocksjni/portal.h:3390:      rocksdb::Status s = op(key_slice, &value);
./c-deps/rocksdb/java/rocksjni/portal.h:3421:      rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/portal.h:3443:   * properties as the provided C++ rocksdb::ColumnFamilyDescriptor object
./c-deps/rocksdb/java/rocksjni/portal.h:3446:   * @param cfd A pointer to rocksdb::ColumnFamilyDescriptor object
./c-deps/rocksdb/java/rocksjni/filter.cc:7:// rocksdb::FilterPolicy.
./c-deps/rocksdb/java/rocksjni/filter.cc:28:      new std::shared_ptr<const rocksdb::FilterPolicy>(
./c-deps/rocksdb/java/rocksjni/filter.cc:29:          rocksdb::NewBloomFilterPolicy(bits_per_key, use_block_base_builder));
./c-deps/rocksdb/java/rocksjni/filter.cc:41:      reinterpret_cast<std::shared_ptr<const rocksdb::FilterPolicy> *>(jhandle);
./c-deps/rocksdb/java/rocksjni/writebatchhandlerjnicallback.cc:7:// rocksdb::Comparator.
./c-deps/rocksdb/java/rocksjni/comparator.cc:7:// rocksdb::Comparator.
./c-deps/rocksdb/java/rocksjni/comparator.cc:30:      reinterpret_cast<rocksdb::ComparatorJniCallbackOptions*>(copt_handle);
./c-deps/rocksdb/java/rocksjni/comparator.cc:32:      new rocksdb::ComparatorJniCallback(env, jobj, copt);
./c-deps/rocksdb/java/rocksjni/comparator.cc:47:      reinterpret_cast<rocksdb::ComparatorJniCallbackOptions*>(copt_handle);
./c-deps/rocksdb/java/rocksjni/comparator.cc:49:      new rocksdb::DirectComparatorJniCallback(env, jobj, copt);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:7:// calling c++ rocksdb::WriteBatchWithIndex methods from Java side.
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:22:  auto* wbwi = new rocksdb::WriteBatchWithIndex();
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:34:      new rocksdb::WriteBatchWithIndex(rocksdb::BytewiseComparator(), 0,
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:47:rocksdb::Comparator *fallback_comparator = nullptr;
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:50:      reinterpret_cast<rocksdb::DirectComparatorJniCallback*>(jfallback_index_comparator_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:53:      reinterpret_cast<rocksdb::ComparatorJniCallback*>(jfallback_index_comparator_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:56:      new rocksdb::WriteBatchWithIndex(
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:69:  auto* wbwi = reinterpret_cast<rocksdb::WriteBatchWithIndex*>(jwbwi_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:83:  auto* wbwi = reinterpret_cast<rocksdb::WriteBatchWithIndex*>(jwbwi_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:85:  auto put = [&wbwi] (rocksdb::Slice key, rocksdb::Slice value) {
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:88:  rocksdb::JniUtil::kv_op(put, env, jobj, jkey, jkey_len, jentry_value,
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:101:  auto* wbwi = reinterpret_cast<rocksdb::WriteBatchWithIndex*>(jwbwi_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:103:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:105:  auto put = [&wbwi, &cf_handle] (rocksdb::Slice key, rocksdb::Slice value) {
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:108:  rocksdb::JniUtil::kv_op(put, env, jobj, jkey, jkey_len, jentry_value,
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:120:  auto* wbwi = reinterpret_cast<rocksdb::WriteBatchWithIndex*>(jwbwi_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:122:  auto merge = [&wbwi] (rocksdb::Slice key, rocksdb::Slice value) {
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:125:  rocksdb::JniUtil::kv_op(merge, env, jobj, jkey, jkey_len, jentry_value,
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:138:  auto* wbwi = reinterpret_cast<rocksdb::WriteBatchWithIndex*>(jwbwi_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:140:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:142:  auto merge = [&wbwi, &cf_handle] (rocksdb::Slice key, rocksdb::Slice value) {
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:145:  rocksdb::JniUtil::kv_op(merge, env, jobj, jkey, jkey_len, jentry_value,
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:157:  auto* wbwi = reinterpret_cast<rocksdb::WriteBatchWithIndex*>(jwbwi_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:159:  auto remove = [&wbwi] (rocksdb::Slice key) {
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:162:  rocksdb::JniUtil::k_op(remove, env, jobj, jkey, jkey_len);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:173:  auto* wbwi = reinterpret_cast<rocksdb::WriteBatchWithIndex*>(jwbwi_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:175:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:177:  auto remove = [&wbwi, &cf_handle] (rocksdb::Slice key) {
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:180:  rocksdb::JniUtil::k_op(remove, env, jobj, jkey, jkey_len);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:191:  auto* wbwi = reinterpret_cast<rocksdb::WriteBatchWithIndex*>(jwbwi_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:193:  auto deleteRange = [&wbwi](rocksdb::Slice beginKey, rocksdb::Slice endKey) {
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:196:  rocksdb::JniUtil::kv_op(deleteRange, env, jobj, jbegin_key, jbegin_key_len,
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:209:  auto* wbwi = reinterpret_cast<rocksdb::WriteBatchWithIndex*>(jwbwi_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:211:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:213:  auto deleteRange = [&wbwi, &cf_handle](rocksdb::Slice beginKey,
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:214:                                         rocksdb::Slice endKey) {
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:217:  rocksdb::JniUtil::kv_op(deleteRange, env, jobj, jbegin_key, jbegin_key_len,
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:229:  auto* wbwi = reinterpret_cast<rocksdb::WriteBatchWithIndex*>(jwbwi_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:231:  auto putLogData = [&wbwi] (rocksdb::Slice blob) {
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:234:  rocksdb::JniUtil::k_op(putLogData, env, jobj, jblob, jblob_len);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:244:  auto* wbwi = reinterpret_cast<rocksdb::WriteBatchWithIndex*>(jwbwi_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:257:  auto* wbwi = reinterpret_cast<rocksdb::WriteBatchWithIndex*>(jwbwi_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:270:  auto* wbwi = reinterpret_cast<rocksdb::WriteBatchWithIndex*>(jwbwi_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:279:  rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:289:  auto* wbwi = reinterpret_cast<rocksdb::WriteBatchWithIndex*>(jwbwi_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:301:  auto* wbwi = reinterpret_cast<rocksdb::WriteBatchWithIndex*>(jwbwi_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:302:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:315:  auto* wbwi = reinterpret_cast<rocksdb::WriteBatchWithIndex*>(jwbwi_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:316:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:317:  auto* base_iterator = reinterpret_cast<rocksdb::Iterator*>(jbi_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:330:  auto* wbwi = reinterpret_cast<rocksdb::WriteBatchWithIndex*>(jwbwi_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:331:  auto* dbopt = reinterpret_cast<rocksdb::DBOptions*>(jdbopt_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:333:  auto getter = [&wbwi, &dbopt](const rocksdb::Slice& key, std::string* value) {
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:337:  return rocksdb::JniUtil::v_op(getter, env, jkey, jkey_len);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:348:  auto* wbwi = reinterpret_cast<rocksdb::WriteBatchWithIndex*>(jwbwi_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:349:  auto* dbopt = reinterpret_cast<rocksdb::DBOptions*>(jdbopt_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:350:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:353:      [&wbwi, &cf_handle, &dbopt](const rocksdb::Slice& key,
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:358:  return rocksdb::JniUtil::v_op(getter, env, jkey, jkey_len);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:369:  auto* wbwi = reinterpret_cast<rocksdb::WriteBatchWithIndex*>(jwbwi_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:370:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:371:  auto* readopt = reinterpret_cast<rocksdb::ReadOptions*>(jreadopt_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:374:      [&wbwi, &db, &readopt](const rocksdb::Slice& key, std::string* value) {
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:378:  return rocksdb::JniUtil::v_op(getter, env, jkey, jkey_len);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:389:  auto* wbwi = reinterpret_cast<rocksdb::WriteBatchWithIndex*>(jwbwi_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:390:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:391:  auto* readopt = reinterpret_cast<rocksdb::ReadOptions*>(jreadopt_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:392:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:395:      [&wbwi, &db, &cf_handle, &readopt](const rocksdb::Slice& key,
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:400:  return rocksdb::JniUtil::v_op(getter, env, jkey, jkey_len);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:410:  auto* wbwi = reinterpret_cast<rocksdb::WriteBatchWithIndex*>(handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:424:  auto* it = reinterpret_cast<rocksdb::WBWIIterator*>(handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:436:  return reinterpret_cast<rocksdb::WBWIIterator*>(handle)->Valid();
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:446:  reinterpret_cast<rocksdb::WBWIIterator*>(handle)->SeekToFirst();
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:456:  reinterpret_cast<rocksdb::WBWIIterator*>(handle)->SeekToLast();
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:466:  reinterpret_cast<rocksdb::WBWIIterator*>(handle)->Next();
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:476:  reinterpret_cast<rocksdb::WBWIIterator*>(handle)->Prev();
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:487:  auto* it = reinterpret_cast<rocksdb::WBWIIterator*>(handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:494:  rocksdb::Slice target_slice(
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:510:  auto* it = reinterpret_cast<rocksdb::WBWIIterator*>(handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:517:  rocksdb::Slice target_slice(
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:532:  auto* it = reinterpret_cast<rocksdb::WBWIIterator*>(handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:533:  rocksdb::Status s = it->status();
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:539:  rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:549:  auto* it = reinterpret_cast<rocksdb::WBWIIterator*>(handle);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:550:  const rocksdb::WriteEntry& we = it->Entry();
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:556:    case rocksdb::kPutRecord:
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:560:    case rocksdb::kMergeRecord:
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:564:    case rocksdb::kDeleteRecord:
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:568:    case rocksdb::kLogDataRecord:
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:578:  auto* key_slice = new rocksdb::Slice(we.key.data(), we.key.size());
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:580:  if (we.type == rocksdb::kDeleteRecord
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:581:      || we.type == rocksdb::kLogDataRecord) {
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:585:    auto* value_slice = new rocksdb::Slice(we.value.data(), we.value.size());
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:593:      auto* value_slice = reinterpret_cast<rocksdb::Slice*>(results[2]);
./c-deps/rocksdb/java/rocksjni/write_batch_with_index.cc:605:      auto* value_slice = reinterpret_cast<rocksdb::Slice*>(results[2]);
./c-deps/rocksdb/java/rocksjni/comparatorjnicallback.cc:7:// rocksdb::Comparator.
./c-deps/rocksdb/java/rocksjni/checkpoint.cc:7:// calling c++ rocksdb::Checkpoint methods from Java side.
./c-deps/rocksdb/java/rocksjni/checkpoint.cc:25:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/checkpoint.cc:26:  rocksdb::Checkpoint* checkpoint;
./c-deps/rocksdb/java/rocksjni/checkpoint.cc:27:  rocksdb::Checkpoint::Create(db, &checkpoint);
./c-deps/rocksdb/java/rocksjni/checkpoint.cc:38:  auto* checkpoint = reinterpret_cast<rocksdb::Checkpoint*>(jhandle);
./c-deps/rocksdb/java/rocksjni/checkpoint.cc:58:  auto* checkpoint = reinterpret_cast<rocksdb::Checkpoint*>(
./c-deps/rocksdb/java/rocksjni/checkpoint.cc:60:  rocksdb::Status s = checkpoint->CreateCheckpoint(
./c-deps/rocksdb/java/rocksjni/checkpoint.cc:66:      rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/rocksdb_exception_test.cc:21:  rocksdb::RocksDBExceptionJni::ThrowNew(env, std::string("test message"));
./c-deps/rocksdb/java/rocksjni/rocksdb_exception_test.cc:31:  rocksdb::RocksDBExceptionJni::ThrowNew(env, "test message",
./c-deps/rocksdb/java/rocksjni/rocksdb_exception_test.cc:32:                                         rocksdb::Status::NotSupported());
./c-deps/rocksdb/java/rocksjni/rocksdb_exception_test.cc:42:  rocksdb::RocksDBExceptionJni::ThrowNew(env, rocksdb::Status::NotSupported());
./c-deps/rocksdb/java/rocksjni/rocksdb_exception_test.cc:52:  rocksdb::RocksDBExceptionJni::ThrowNew(
./c-deps/rocksdb/java/rocksjni/rocksdb_exception_test.cc:54:      rocksdb::Status::TimedOut(rocksdb::Status::SubCode::kLockTimeout));
./c-deps/rocksdb/java/rocksjni/rocksdb_exception_test.cc:64:  rocksdb::RocksDBExceptionJni::ThrowNew(
./c-deps/rocksdb/java/rocksjni/rocksdb_exception_test.cc:65:      env, rocksdb::Status::TimedOut(rocksdb::Status::SubCode::kLockTimeout));
./c-deps/rocksdb/java/rocksjni/rocksdb_exception_test.cc:75:  rocksdb::Slice state("test state");
./c-deps/rocksdb/java/rocksjni/rocksdb_exception_test.cc:76:  rocksdb::RocksDBExceptionJni::ThrowNew(env, "test message",
./c-deps/rocksdb/java/rocksjni/rocksdb_exception_test.cc:77:                                         rocksdb::Status::NotSupported(state));
./c-deps/rocksdb/java/rocksjni/env_options.cc:7:// calling C++ rocksdb::EnvOptions methods
./c-deps/rocksdb/java/rocksjni/env_options.cc:16:  reinterpret_cast<rocksdb::EnvOptions *>(_jhandle)->_opt = \
./c-deps/rocksdb/java/rocksjni/env_options.cc:20:  reinterpret_cast<rocksdb::EnvOptions *>(_jhandle)->_opt = \
./c-deps/rocksdb/java/rocksjni/env_options.cc:24:  reinterpret_cast<rocksdb::EnvOptions *>(_jhandle)->_opt = \
./c-deps/rocksdb/java/rocksjni/env_options.cc:28:  reinterpret_cast<rocksdb::EnvOptions *>(_jhandle)->_opt
./c-deps/rocksdb/java/rocksjni/env_options.cc:36:  auto *env_opt = new rocksdb::EnvOptions();
./c-deps/rocksdb/java/rocksjni/env_options.cc:47:  auto* eo = reinterpret_cast<rocksdb::EnvOptions *>(jhandle);
./c-deps/rocksdb/java/rocksjni/env_options.cc:294:      reinterpret_cast<std::shared_ptr<rocksdb::RateLimiter> *>(rl_handle);
./c-deps/rocksdb/java/rocksjni/env_options.cc:295:  auto* env_opt = reinterpret_cast<rocksdb::EnvOptions *>(jhandle);
./c-deps/rocksdb/java/rocksjni/compression_options.cc:7:// rocksdb::CompressionOptions.
./c-deps/rocksdb/java/rocksjni/compression_options.cc:21:  const auto* opt = new rocksdb::CompressionOptions();
./c-deps/rocksdb/java/rocksjni/compression_options.cc:32:  auto* opt = reinterpret_cast<rocksdb::CompressionOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/compression_options.cc:43:  auto* opt = reinterpret_cast<rocksdb::CompressionOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/compression_options.cc:54:  auto* opt = reinterpret_cast<rocksdb::CompressionOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/compression_options.cc:65:  auto* opt = reinterpret_cast<rocksdb::CompressionOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/compression_options.cc:76:  auto* opt = reinterpret_cast<rocksdb::CompressionOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/compression_options.cc:87:  auto* opt = reinterpret_cast<rocksdb::CompressionOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/compression_options.cc:98:  auto* opt = reinterpret_cast<rocksdb::CompressionOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/compression_options.cc:109:  auto* opt = reinterpret_cast<rocksdb::CompressionOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/compression_options.cc:120:  delete reinterpret_cast<rocksdb::CompressionOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:7:// calling c++ rocksdb::BackupEnginge and rocksdb::BackupableDBOptions methods
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:35:  auto* bopt = new rocksdb::BackupableDBOptions(cpath);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:47:  auto* bopt = reinterpret_cast<rocksdb::BackupableDBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:58:  auto* bopt = reinterpret_cast<rocksdb::BackupableDBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:59:  auto* rocks_env = reinterpret_cast<rocksdb::Env*>(jrocks_env_handle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:70:  auto* bopt = reinterpret_cast<rocksdb::BackupableDBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:81:  auto* bopt = reinterpret_cast<rocksdb::BackupableDBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:92:  auto* bopt = reinterpret_cast<rocksdb::BackupableDBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:94:      reinterpret_cast<std::shared_ptr<rocksdb::LoggerJniCallback> *>(jhandle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:105:  auto* bopt = reinterpret_cast<rocksdb::BackupableDBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:116:  auto* bopt = reinterpret_cast<rocksdb::BackupableDBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:127:  auto* bopt = reinterpret_cast<rocksdb::BackupableDBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:138:  auto* bopt = reinterpret_cast<rocksdb::BackupableDBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:149:  auto* bopt = reinterpret_cast<rocksdb::BackupableDBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:160:  auto* bopt = reinterpret_cast<rocksdb::BackupableDBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:171:  auto* bopt = reinterpret_cast<rocksdb::BackupableDBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:182:  auto* bopt = reinterpret_cast<rocksdb::BackupableDBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:193:  auto* bopt = reinterpret_cast<rocksdb::BackupableDBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:195:      reinterpret_cast<std::shared_ptr<rocksdb::RateLimiter> *>(jrate_limiter_handle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:206:  auto* bopt = reinterpret_cast<rocksdb::BackupableDBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:217:  auto* bopt = reinterpret_cast<rocksdb::BackupableDBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:228:  auto* bopt = reinterpret_cast<rocksdb::BackupableDBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:230:      reinterpret_cast<std::shared_ptr<rocksdb::RateLimiter> *>(jrate_limiter_handle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:241:  auto* bopt = reinterpret_cast<rocksdb::BackupableDBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:252:  auto* bopt = reinterpret_cast<rocksdb::BackupableDBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:263:  auto* bopt = reinterpret_cast<rocksdb::BackupableDBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:275:  auto* bopt = reinterpret_cast<rocksdb::BackupableDBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:287:  auto* bopt = reinterpret_cast<rocksdb::BackupableDBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:299:  auto* bopt = reinterpret_cast<rocksdb::BackupableDBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/backupablejni.cc:310:  auto* bopt = reinterpret_cast<rocksdb::BackupableDBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:6:// This file implements the "bridge" between Java and C++ for rocksdb::Options.
./c-deps/rocksdb/java/rocksjni/options.cc:44:  auto* op = new rocksdb::Options();
./c-deps/rocksdb/java/rocksjni/options.cc:55:  auto* dbOpt = reinterpret_cast<const rocksdb::DBOptions*>(jdboptions);
./c-deps/rocksdb/java/rocksjni/options.cc:56:  auto* cfOpt = reinterpret_cast<const rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:58:  auto* op = new rocksdb::Options(*dbOpt, *cfOpt);
./c-deps/rocksdb/java/rocksjni/options.cc:69:  auto* op = reinterpret_cast<rocksdb::Options*>(handle);
./c-deps/rocksdb/java/rocksjni/options.cc:81:  reinterpret_cast<rocksdb::Options*>
./c-deps/rocksdb/java/rocksjni/options.cc:92:  reinterpret_cast<rocksdb::Options*>(jhandle)->create_if_missing = flag;
./c-deps/rocksdb/java/rocksjni/options.cc:102:  return reinterpret_cast<rocksdb::Options*>(jhandle)->create_if_missing;
./c-deps/rocksdb/java/rocksjni/options.cc:112:  reinterpret_cast<rocksdb::Options*>
./c-deps/rocksdb/java/rocksjni/options.cc:123:  return reinterpret_cast<rocksdb::Options*>
./c-deps/rocksdb/java/rocksjni/options.cc:136:      reinterpret_cast<rocksdb::Options*>(jhandle)->comparator =
./c-deps/rocksdb/java/rocksjni/options.cc:137:          rocksdb::ReverseBytewiseComparator();
./c-deps/rocksdb/java/rocksjni/options.cc:140:      reinterpret_cast<rocksdb::Options*>(jhandle)->comparator =
./c-deps/rocksdb/java/rocksjni/options.cc:141:          rocksdb::BytewiseComparator();
./c-deps/rocksdb/java/rocksjni/options.cc:154:  auto* opt = reinterpret_cast<rocksdb::Options*>(jopt_handle);
./c-deps/rocksdb/java/rocksjni/options.cc:157:        reinterpret_cast<rocksdb::DirectComparatorJniCallback*>(jcomparator_handle);
./c-deps/rocksdb/java/rocksjni/options.cc:160:        reinterpret_cast<rocksdb::ComparatorJniCallback*>(jcomparator_handle);
./c-deps/rocksdb/java/rocksjni/options.cc:177:  auto* options = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:178:  options->merge_operator = rocksdb::MergeOperators::CreateFromStringId(
./c-deps/rocksdb/java/rocksjni/options.cc:191:  reinterpret_cast<rocksdb::Options*>(jhandle)->merge_operator =
./c-deps/rocksdb/java/rocksjni/options.cc:192:    *(reinterpret_cast<std::shared_ptr<rocksdb::MergeOperator>*>
./c-deps/rocksdb/java/rocksjni/options.cc:203:  rocksdb::Status s = rocksdb::check_if_jlong_fits_size_t(jwrite_buffer_size);
./c-deps/rocksdb/java/rocksjni/options.cc:205:    reinterpret_cast<rocksdb::Options*>(jhandle)->write_buffer_size =
./c-deps/rocksdb/java/rocksjni/options.cc:208:    rocksdb::IllegalArgumentExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/options.cc:219:  return reinterpret_cast<rocksdb::Options*>(jhandle)->write_buffer_size;
./c-deps/rocksdb/java/rocksjni/options.cc:229:  reinterpret_cast<rocksdb::Options*>(jhandle)->max_write_buffer_number =
./c-deps/rocksdb/java/rocksjni/options.cc:240:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:242:      reinterpret_cast<std::shared_ptr<rocksdb::StatisticsJni>*>(
./c-deps/rocksdb/java/rocksjni/options.cc:254:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:255:  std::shared_ptr<rocksdb::Statistics> sptr = opt->statistics;
./c-deps/rocksdb/java/rocksjni/options.cc:259:    std::shared_ptr<rocksdb::Statistics>* pSptr =
./c-deps/rocksdb/java/rocksjni/options.cc:260:        new std::shared_ptr<rocksdb::Statistics>(sptr);
./c-deps/rocksdb/java/rocksjni/options.cc:272:  return reinterpret_cast<rocksdb::Options*>(jhandle)->max_write_buffer_number;
./c-deps/rocksdb/java/rocksjni/options.cc:282:  return reinterpret_cast<rocksdb::Options*>(jhandle)->error_if_exists;
./c-deps/rocksdb/java/rocksjni/options.cc:292:  reinterpret_cast<rocksdb::Options*>(jhandle)->error_if_exists =
./c-deps/rocksdb/java/rocksjni/options.cc:303:  return reinterpret_cast<rocksdb::Options*>(jhandle)->paranoid_checks;
./c-deps/rocksdb/java/rocksjni/options.cc:313:  reinterpret_cast<rocksdb::Options*>(jhandle)->paranoid_checks =
./c-deps/rocksdb/java/rocksjni/options.cc:324:  reinterpret_cast<rocksdb::Options*>(jhandle)->env =
./c-deps/rocksdb/java/rocksjni/options.cc:325:      reinterpret_cast<rocksdb::Env*>(jenv);
./c-deps/rocksdb/java/rocksjni/options.cc:336:  reinterpret_cast<rocksdb::Options*>(jhandle)->max_total_wal_size =
./c-deps/rocksdb/java/rocksjni/options.cc:347:  return reinterpret_cast<rocksdb::Options*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:358:  return reinterpret_cast<rocksdb::Options*>(jhandle)->max_open_files;
./c-deps/rocksdb/java/rocksjni/options.cc:368:  reinterpret_cast<rocksdb::Options*>(jhandle)->max_open_files =
./c-deps/rocksdb/java/rocksjni/options.cc:379:  reinterpret_cast<rocksdb::Options*>(jhandle)->max_file_opening_threads =
./c-deps/rocksdb/java/rocksjni/options.cc:390:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:401:  return reinterpret_cast<rocksdb::Options*>(jhandle)->use_fsync;
./c-deps/rocksdb/java/rocksjni/options.cc:411:  reinterpret_cast<rocksdb::Options*>(jhandle)->use_fsync =
./c-deps/rocksdb/java/rocksjni/options.cc:423:  std::vector<rocksdb::DbPath> db_paths;
./c-deps/rocksdb/java/rocksjni/options.cc:441:    std::string path = rocksdb::JniUtil::copyStdString(
./c-deps/rocksdb/java/rocksjni/options.cc:454:        rocksdb::DbPath(path, static_cast<uint64_t>(jtarget_size)));
./c-deps/rocksdb/java/rocksjni/options.cc:459:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:470:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:488:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:491:    rocksdb::DbPath db_path = opt->db_paths[i];
./c-deps/rocksdb/java/rocksjni/options.cc:523:      reinterpret_cast<rocksdb::Options*>(jhandle)->db_log_dir.c_str());
./c-deps/rocksdb/java/rocksjni/options.cc:538:  reinterpret_cast<rocksdb::Options*>(jhandle)->db_log_dir.assign(log_dir);
./c-deps/rocksdb/java/rocksjni/options.cc:550:      reinterpret_cast<rocksdb::Options*>(jhandle)->wal_dir.c_str());
./c-deps/rocksdb/java/rocksjni/options.cc:565:  reinterpret_cast<rocksdb::Options*>(jhandle)->wal_dir.assign(wal_dir);
./c-deps/rocksdb/java/rocksjni/options.cc:576:  return reinterpret_cast<rocksdb::Options*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:587:  reinterpret_cast<rocksdb::Options*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:599:  reinterpret_cast<rocksdb::Options*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:610:  return reinterpret_cast<rocksdb::Options*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:621:  return reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:632:  reinterpret_cast<rocksdb::Options*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:643:  reinterpret_cast<rocksdb::Options*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:654:  return reinterpret_cast<rocksdb::Options*>(jhandle)->max_subcompactions;
./c-deps/rocksdb/java/rocksjni/options.cc:664:  return reinterpret_cast<rocksdb::Options*>(jhandle)->max_background_flushes;
./c-deps/rocksdb/java/rocksjni/options.cc:674:  reinterpret_cast<rocksdb::Options*>(jhandle)->max_background_flushes =
./c-deps/rocksdb/java/rocksjni/options.cc:685:  return reinterpret_cast<rocksdb::Options*>(jhandle)->max_background_jobs;
./c-deps/rocksdb/java/rocksjni/options.cc:696:  reinterpret_cast<rocksdb::Options*>(jhandle)->max_background_jobs =
./c-deps/rocksdb/java/rocksjni/options.cc:707:  return reinterpret_cast<rocksdb::Options*>(jhandle)->max_log_file_size;
./c-deps/rocksdb/java/rocksjni/options.cc:717:  rocksdb::Status s = rocksdb::check_if_jlong_fits_size_t(max_log_file_size);
./c-deps/rocksdb/java/rocksjni/options.cc:719:    reinterpret_cast<rocksdb::Options*>(jhandle)->max_log_file_size =
./c-deps/rocksdb/java/rocksjni/options.cc:722:    rocksdb::IllegalArgumentExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/options.cc:733:  return reinterpret_cast<rocksdb::Options*>(jhandle)->log_file_time_to_roll;
./c-deps/rocksdb/java/rocksjni/options.cc:743:  rocksdb::Status s = rocksdb::check_if_jlong_fits_size_t(
./c-deps/rocksdb/java/rocksjni/options.cc:746:    reinterpret_cast<rocksdb::Options*>(jhandle)->log_file_time_to_roll =
./c-deps/rocksdb/java/rocksjni/options.cc:749:    rocksdb::IllegalArgumentExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/options.cc:760:  return reinterpret_cast<rocksdb::Options*>(jhandle)->keep_log_file_num;
./c-deps/rocksdb/java/rocksjni/options.cc:770:  rocksdb::Status s = rocksdb::check_if_jlong_fits_size_t(keep_log_file_num);
./c-deps/rocksdb/java/rocksjni/options.cc:772:    reinterpret_cast<rocksdb::Options*>(jhandle)->keep_log_file_num =
./c-deps/rocksdb/java/rocksjni/options.cc:775:    rocksdb::IllegalArgumentExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/options.cc:786:  return reinterpret_cast<rocksdb::Options*>(jhandle)->recycle_log_file_num;
./c-deps/rocksdb/java/rocksjni/options.cc:796:  rocksdb::Status s =
./c-deps/rocksdb/java/rocksjni/options.cc:797:      rocksdb::check_if_jlong_fits_size_t(recycle_log_file_num);
./c-deps/rocksdb/java/rocksjni/options.cc:799:    reinterpret_cast<rocksdb::Options*>(jhandle)->recycle_log_file_num =
./c-deps/rocksdb/java/rocksjni/options.cc:802:    rocksdb::IllegalArgumentExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/options.cc:813:  return reinterpret_cast<rocksdb::Options*>(jhandle)->max_manifest_file_size;
./c-deps/rocksdb/java/rocksjni/options.cc:822:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:823:  rocksdb::MemTableRepFactory* tf = opt->memtable_factory.get();
./c-deps/rocksdb/java/rocksjni/options.cc:844:  reinterpret_cast<rocksdb::Options*>(jhandle)->max_manifest_file_size =
./c-deps/rocksdb/java/rocksjni/options.cc:854:  reinterpret_cast<rocksdb::Options*>(jhandle)->memtable_factory.reset(
./c-deps/rocksdb/java/rocksjni/options.cc:855:      reinterpret_cast<rocksdb::MemTableRepFactory*>(jfactory_handle));
./c-deps/rocksdb/java/rocksjni/options.cc:865:  std::shared_ptr<rocksdb::RateLimiter> *pRateLimiter =
./c-deps/rocksdb/java/rocksjni/options.cc:866:      reinterpret_cast<std::shared_ptr<rocksdb::RateLimiter> *>(
./c-deps/rocksdb/java/rocksjni/options.cc:868:  reinterpret_cast<rocksdb::Options*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:879:std::shared_ptr<rocksdb::LoggerJniCallback> *pLogger =
./c-deps/rocksdb/java/rocksjni/options.cc:880:      reinterpret_cast<std::shared_ptr<rocksdb::LoggerJniCallback> *>(
./c-deps/rocksdb/java/rocksjni/options.cc:882:  reinterpret_cast<rocksdb::Options*>(jhandle)->info_log = *pLogger;
./c-deps/rocksdb/java/rocksjni/options.cc:892:  reinterpret_cast<rocksdb::Options*>(jhandle)->info_log_level =
./c-deps/rocksdb/java/rocksjni/options.cc:893:      static_cast<rocksdb::InfoLogLevel>(jlog_level);
./c-deps/rocksdb/java/rocksjni/options.cc:904:      reinterpret_cast<rocksdb::Options*>(jhandle)->info_log_level);
./c-deps/rocksdb/java/rocksjni/options.cc:914:  return reinterpret_cast<rocksdb::Options*>(jhandle)->table_cache_numshardbits;
./c-deps/rocksdb/java/rocksjni/options.cc:924:  reinterpret_cast<rocksdb::Options*>(jhandle)->table_cache_numshardbits =
./c-deps/rocksdb/java/rocksjni/options.cc:934:  reinterpret_cast<rocksdb::Options*>(jhandle)->prefix_extractor.reset(
./c-deps/rocksdb/java/rocksjni/options.cc:935:      rocksdb::NewFixedPrefixTransform(
./c-deps/rocksdb/java/rocksjni/options.cc:945:  reinterpret_cast<rocksdb::Options*>(jhandle)->prefix_extractor.reset(
./c-deps/rocksdb/java/rocksjni/options.cc:946:      rocksdb::NewCappedPrefixTransform(
./c-deps/rocksdb/java/rocksjni/options.cc:957:  return reinterpret_cast<rocksdb::Options*>(jhandle)->WAL_ttl_seconds;
./c-deps/rocksdb/java/rocksjni/options.cc:967:  reinterpret_cast<rocksdb::Options*>(jhandle)->WAL_ttl_seconds =
./c-deps/rocksdb/java/rocksjni/options.cc:978:  return reinterpret_cast<rocksdb::Options*>(jhandle)->WAL_size_limit_MB;
./c-deps/rocksdb/java/rocksjni/options.cc:988:  reinterpret_cast<rocksdb::Options*>(jhandle)->WAL_size_limit_MB =
./c-deps/rocksdb/java/rocksjni/options.cc:999:  return reinterpret_cast<rocksdb::Options*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:1010:  rocksdb::Status s = rocksdb::check_if_jlong_fits_size_t(preallocation_size);
./c-deps/rocksdb/java/rocksjni/options.cc:1012:    reinterpret_cast<rocksdb::Options*>(jhandle)->manifest_preallocation_size =
./c-deps/rocksdb/java/rocksjni/options.cc:1015:    rocksdb::IllegalArgumentExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/options.cc:1025:  reinterpret_cast<rocksdb::Options*>(jhandle)->table_factory.reset(
./c-deps/rocksdb/java/rocksjni/options.cc:1026:      reinterpret_cast<rocksdb::TableFactory*>(jfactory_handle));
./c-deps/rocksdb/java/rocksjni/options.cc:1036:  return reinterpret_cast<rocksdb::Options*>(jhandle)->allow_mmap_reads;
./c-deps/rocksdb/java/rocksjni/options.cc:1046:  reinterpret_cast<rocksdb::Options*>(jhandle)->allow_mmap_reads =
./c-deps/rocksdb/java/rocksjni/options.cc:1057:  return reinterpret_cast<rocksdb::Options*>(jhandle)->allow_mmap_writes;
./c-deps/rocksdb/java/rocksjni/options.cc:1067:  reinterpret_cast<rocksdb::Options*>(jhandle)->allow_mmap_writes =
./c-deps/rocksdb/java/rocksjni/options.cc:1078:  return reinterpret_cast<rocksdb::Options*>(jhandle)->use_direct_reads;
./c-deps/rocksdb/java/rocksjni/options.cc:1089:  reinterpret_cast<rocksdb::Options*>(jhandle)->use_direct_reads =
./c-deps/rocksdb/java/rocksjni/options.cc:1100:  return reinterpret_cast<rocksdb::Options*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:1112:  reinterpret_cast<rocksdb::Options*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:1124:  reinterpret_cast<rocksdb::Options*>(jhandle)->allow_fallocate =
./c-deps/rocksdb/java/rocksjni/options.cc:1135:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1146:  return reinterpret_cast<rocksdb::Options*>(jhandle)->is_fd_close_on_exec;
./c-deps/rocksdb/java/rocksjni/options.cc:1156:  reinterpret_cast<rocksdb::Options*>(jhandle)->is_fd_close_on_exec =
./c-deps/rocksdb/java/rocksjni/options.cc:1167:  return reinterpret_cast<rocksdb::Options*>(jhandle)->stats_dump_period_sec;
./c-deps/rocksdb/java/rocksjni/options.cc:1177:  reinterpret_cast<rocksdb::Options*>(jhandle)->stats_dump_period_sec =
./c-deps/rocksdb/java/rocksjni/options.cc:1188:  return reinterpret_cast<rocksdb::Options*>(jhandle)->advise_random_on_open;
./c-deps/rocksdb/java/rocksjni/options.cc:1198:  reinterpret_cast<rocksdb::Options*>(jhandle)->advise_random_on_open =
./c-deps/rocksdb/java/rocksjni/options.cc:1209:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1220:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1231:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1233:      rocksdb::AccessHintJni::toCppAccessHint(jaccess_hint_value);
./c-deps/rocksdb/java/rocksjni/options.cc:1243:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1244:  return rocksdb::AccessHintJni::toJavaAccessHint(
./c-deps/rocksdb/java/rocksjni/options.cc:1256:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1268:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1279:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1291:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1303:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1315:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1327:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1339:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1350:  return reinterpret_cast<rocksdb::Options*>(jhandle)->use_adaptive_mutex;
./c-deps/rocksdb/java/rocksjni/options.cc:1360:  reinterpret_cast<rocksdb::Options*>(jhandle)->use_adaptive_mutex =
./c-deps/rocksdb/java/rocksjni/options.cc:1371:  return reinterpret_cast<rocksdb::Options*>(jhandle)->bytes_per_sync;
./c-deps/rocksdb/java/rocksjni/options.cc:1381:  reinterpret_cast<rocksdb::Options*>(jhandle)->bytes_per_sync =
./c-deps/rocksdb/java/rocksjni/options.cc:1392:  reinterpret_cast<rocksdb::Options*>(jhandle)->wal_bytes_per_sync =
./c-deps/rocksdb/java/rocksjni/options.cc:1403:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1415:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1426:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1437:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1448:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1459:  reinterpret_cast<rocksdb::Options*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:1470:  return reinterpret_cast<rocksdb::Options*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:1481:  reinterpret_cast<rocksdb::Options*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:1492:  return reinterpret_cast<rocksdb::Options*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:1503:  reinterpret_cast<rocksdb::Options*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:1514:  return reinterpret_cast<rocksdb::Options*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:1525:  reinterpret_cast<rocksdb::Options*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:1536:  return reinterpret_cast<rocksdb::Options*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:1548:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1560:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1571:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1573:      rocksdb::WALRecoveryModeJni::toCppWALRecoveryMode(
./c-deps/rocksdb/java/rocksjni/options.cc:1584:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1585:  return rocksdb::WALRecoveryModeJni::toJavaWALRecoveryMode(
./c-deps/rocksdb/java/rocksjni/options.cc:1596:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1606:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1617:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1618:  auto* row_cache = reinterpret_cast<std::shared_ptr<rocksdb::Cache>*>(jrow_cache_handle);
./c-deps/rocksdb/java/rocksjni/options.cc:1630:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1642:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1653:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1664:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1676:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1687:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1699:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1710:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1720:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1721:  rocksdb::TableFactory* tf = opt->table_factory.get();
./c-deps/rocksdb/java/rocksjni/options.cc:1738:  return reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:1750:  reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:1762:  return reinterpret_cast<rocksdb::Options*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:1774:  reinterpret_cast<rocksdb::Options*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:1786:  auto* opts = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1787:  opts->compression = rocksdb::CompressionTypeJni::toCppCompressionType(
./c-deps/rocksdb/java/rocksjni/options.cc:1798:  auto* opts = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1799:  return rocksdb::CompressionTypeJni::toJavaCompressionType(
./c-deps/rocksdb/java/rocksjni/options.cc:1805: * to a C++ vector of rocksdb::CompressionType
./c-deps/rocksdb/java/rocksjni/options.cc:1813:std::unique_ptr<std::vector<rocksdb::CompressionType>> rocksdb_compression_vector_helper(
./c-deps/rocksdb/java/rocksjni/options.cc:1820:    return std::unique_ptr<std::vector<rocksdb::CompressionType>>();
./c-deps/rocksdb/java/rocksjni/options.cc:1823:  auto* compression_levels = new std::vector<rocksdb::CompressionType>();
./c-deps/rocksdb/java/rocksjni/options.cc:1824:  std::unique_ptr<std::vector<rocksdb::CompressionType>> uptr_compression_levels(compression_levels);
./c-deps/rocksdb/java/rocksjni/options.cc:1828:    compression_levels->push_back(static_cast<rocksdb::CompressionType>(jcl));
./c-deps/rocksdb/java/rocksjni/options.cc:1838: * Helper method to convert a C++ vector of rocksdb::CompressionType
./c-deps/rocksdb/java/rocksjni/options.cc:1848:    std::vector<rocksdb::CompressionType> compression_levels) {
./c-deps/rocksdb/java/rocksjni/options.cc:1891:  auto* options = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1902:  auto* options = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1914:  auto* options = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1916:      rocksdb::CompressionTypeJni::toCppCompressionType(
./c-deps/rocksdb/java/rocksjni/options.cc:1927:  auto* options = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1928:  return rocksdb::CompressionTypeJni::toJavaCompressionType(
./c-deps/rocksdb/java/rocksjni/options.cc:1940:  auto* options = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:1942:      reinterpret_cast<rocksdb::CompressionOptions*>(jcompression_options_handle);
./c-deps/rocksdb/java/rocksjni/options.cc:1953:  reinterpret_cast<rocksdb::Options*>(jhandle)->compaction_style =
./c-deps/rocksdb/java/rocksjni/options.cc:1954:      static_cast<rocksdb::CompactionStyle>(compaction_style);
./c-deps/rocksdb/java/rocksjni/options.cc:1964:  return reinterpret_cast<rocksdb::Options*>(jhandle)->compaction_style;
./c-deps/rocksdb/java/rocksjni/options.cc:1974:  reinterpret_cast<rocksdb::Options*>(jhandle)->compaction_options_fifo.max_table_files_size =
./c-deps/rocksdb/java/rocksjni/options.cc:1985:  return reinterpret_cast<rocksdb::Options*>(jhandle)->compaction_options_fifo.max_table_files_size;
./c-deps/rocksdb/java/rocksjni/options.cc:1995:  return reinterpret_cast<rocksdb::Options*>(jhandle)->num_levels;
./c-deps/rocksdb/java/rocksjni/options.cc:2005:  reinterpret_cast<rocksdb::Options*>(jhandle)->num_levels =
./c-deps/rocksdb/java/rocksjni/options.cc:2016:  return reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2028:  reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2040:  return reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2052:  reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2064:  return reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2076:  reinterpret_cast<rocksdb::Options*>(jhandle)->level0_stop_writes_trigger =
./c-deps/rocksdb/java/rocksjni/options.cc:2087:  return reinterpret_cast<rocksdb::Options*>(jhandle)->target_file_size_base;
./c-deps/rocksdb/java/rocksjni/options.cc:2098:  reinterpret_cast<rocksdb::Options*>(jhandle)->target_file_size_base =
./c-deps/rocksdb/java/rocksjni/options.cc:2109:  return reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2121:  reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2133:  return reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2145:  reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2157:  return reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2169:  reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2182:  return reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2194:  reinterpret_cast<rocksdb::Options*>(jhandle)->max_bytes_for_level_multiplier =
./c-deps/rocksdb/java/rocksjni/options.cc:2206:      reinterpret_cast<rocksdb::Options*>(jhandle)->max_compaction_bytes);
./c-deps/rocksdb/java/rocksjni/options.cc:2216:  reinterpret_cast<rocksdb::Options*>(jhandle)->max_compaction_bytes =
./c-deps/rocksdb/java/rocksjni/options.cc:2227:  return reinterpret_cast<rocksdb::Options*>(jhandle)->arena_block_size;
./c-deps/rocksdb/java/rocksjni/options.cc:2237:  rocksdb::Status s = rocksdb::check_if_jlong_fits_size_t(jarena_block_size);
./c-deps/rocksdb/java/rocksjni/options.cc:2239:    reinterpret_cast<rocksdb::Options*>(jhandle)->arena_block_size =
./c-deps/rocksdb/java/rocksjni/options.cc:2242:    rocksdb::IllegalArgumentExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/options.cc:2253:  return reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2265:  reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2277:  return reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2289:  reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2301:  return reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2313:  reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2325:  return reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2337:  rocksdb::Status s = rocksdb::check_if_jlong_fits_size_t(
./c-deps/rocksdb/java/rocksjni/options.cc:2340:    reinterpret_cast<rocksdb::Options*>(jhandle)->inplace_update_num_locks =
./c-deps/rocksdb/java/rocksjni/options.cc:2343:    rocksdb::IllegalArgumentExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/options.cc:2355:  return reinterpret_cast<rocksdb::Options*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:2367:  reinterpret_cast<rocksdb::Options*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:2379:  return reinterpret_cast<rocksdb::Options*>(jhandle)->bloom_locality;
./c-deps/rocksdb/java/rocksjni/options.cc:2389:  reinterpret_cast<rocksdb::Options*>(jhandle)->bloom_locality =
./c-deps/rocksdb/java/rocksjni/options.cc:2400:  return reinterpret_cast<rocksdb::Options*>(jhandle)->max_successive_merges;
./c-deps/rocksdb/java/rocksjni/options.cc:2411:  rocksdb::Status s = rocksdb::check_if_jlong_fits_size_t(
./c-deps/rocksdb/java/rocksjni/options.cc:2414:    reinterpret_cast<rocksdb::Options*>(jhandle)->max_successive_merges =
./c-deps/rocksdb/java/rocksjni/options.cc:2417:    rocksdb::IllegalArgumentExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/options.cc:2428:  return reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2440:  reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2452:  reinterpret_cast<rocksdb::Options*>(jhandle)->OptimizeForSmallDb();
./c-deps/rocksdb/java/rocksjni/options.cc:2463:  reinterpret_cast<rocksdb::Options*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:2475:  reinterpret_cast<rocksdb::Options*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:2487:  reinterpret_cast<rocksdb::Options*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:2498:  reinterpret_cast<rocksdb::Options*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:2509:  return reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2521:  rocksdb::Status s = rocksdb::check_if_jlong_fits_size_t(
./c-deps/rocksdb/java/rocksjni/options.cc:2524:    reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2528:    rocksdb::IllegalArgumentExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/options.cc:2539:  return reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2550:  reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2562:  return reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2573:  reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2585:  return reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2597:  reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2609:  return reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2621:  reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2633:  return reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2645:  reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2658:      reinterpret_cast<rocksdb::Options*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:2705:  auto* opt = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:2722:  return reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2733:  reinterpret_cast<rocksdb::Options*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2746:  auto* opts = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:2748:      rocksdb::CompactionPriorityJni::toCppCompactionPriority(jcompaction_priority_value);
./c-deps/rocksdb/java/rocksjni/options.cc:2758:  auto* opts = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:2759:  return rocksdb::CompactionPriorityJni::toJavaCompactionPriority(
./c-deps/rocksdb/java/rocksjni/options.cc:2770:  auto* opts = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:2781:  auto* opts = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:2793:  auto* opts = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:2795:      reinterpret_cast<rocksdb::CompactionOptionsUniversal*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2807:  auto* opts = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:2809:      reinterpret_cast<rocksdb::CompactionOptionsFIFO*>(
./c-deps/rocksdb/java/rocksjni/options.cc:2822:  auto* opts = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:2833:  auto* opts = reinterpret_cast<rocksdb::Options*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:2838:// rocksdb::ColumnFamilyOptions
./c-deps/rocksdb/java/rocksjni/options.cc:2847:  auto* op = new rocksdb::ColumnFamilyOptions();
./c-deps/rocksdb/java/rocksjni/options.cc:2864:  auto* cf_options = new rocksdb::ColumnFamilyOptions();
./c-deps/rocksdb/java/rocksjni/options.cc:2865:  rocksdb::Status status = rocksdb::GetColumnFamilyOptionsFromString(
./c-deps/rocksdb/java/rocksjni/options.cc:2866:      rocksdb::ColumnFamilyOptions(), opt_string, cf_options);
./c-deps/rocksdb/java/rocksjni/options.cc:2889:  auto* cfo = reinterpret_cast<rocksdb::ColumnFamilyOptions*>(handle);
./c-deps/rocksdb/java/rocksjni/options.cc:2901:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:2913:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:2925:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:2937:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:2950:      reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->comparator =
./c-deps/rocksdb/java/rocksjni/options.cc:2951:          rocksdb::ReverseBytewiseComparator();
./c-deps/rocksdb/java/rocksjni/options.cc:2954:      reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->comparator =
./c-deps/rocksdb/java/rocksjni/options.cc:2955:          rocksdb::BytewiseComparator();
./c-deps/rocksdb/java/rocksjni/options.cc:2968:  auto* opt = reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jopt_handle);
./c-deps/rocksdb/java/rocksjni/options.cc:2971:        reinterpret_cast<rocksdb::DirectComparatorJniCallback*>(jcomparator_handle);
./c-deps/rocksdb/java/rocksjni/options.cc:2974:        reinterpret_cast<rocksdb::ComparatorJniCallback*>(jcomparator_handle);
./c-deps/rocksdb/java/rocksjni/options.cc:2985:  auto* options = reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:2993:      rocksdb::MergeOperators::CreateFromStringId(op_name);
./c-deps/rocksdb/java/rocksjni/options.cc:3004:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->merge_operator =
./c-deps/rocksdb/java/rocksjni/options.cc:3005:    *(reinterpret_cast<std::shared_ptr<rocksdb::MergeOperator>*>
./c-deps/rocksdb/java/rocksjni/options.cc:3017:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jopt_handle)->
./c-deps/rocksdb/java/rocksjni/options.cc:3018:      compaction_filter = reinterpret_cast<rocksdb::CompactionFilter*>
./c-deps/rocksdb/java/rocksjni/options.cc:3031:      reinterpret_cast<std::shared_ptr<rocksdb::CompactionFilterFactory> *>(
./c-deps/rocksdb/java/rocksjni/options.cc:3033:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jopt_handle)->
./c-deps/rocksdb/java/rocksjni/options.cc:3044:  rocksdb::Status s = rocksdb::check_if_jlong_fits_size_t(jwrite_buffer_size);
./c-deps/rocksdb/java/rocksjni/options.cc:3046:    reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:3049:    rocksdb::IllegalArgumentExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/options.cc:3060:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:3071:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:3082:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:3092:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:3094:      reinterpret_cast<rocksdb::MemTableRepFactory*>(jfactory_handle));
./c-deps/rocksdb/java/rocksjni/options.cc:3104:  auto* opt = reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:3105:  rocksdb::MemTableRepFactory* tf = opt->memtable_factory.get();
./c-deps/rocksdb/java/rocksjni/options.cc:3125:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:3126:      prefix_extractor.reset(rocksdb::NewFixedPrefixTransform(
./c-deps/rocksdb/java/rocksjni/options.cc:3136:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:3137:      prefix_extractor.reset(rocksdb::NewCappedPrefixTransform(
./c-deps/rocksdb/java/rocksjni/options.cc:3147:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:3148:      table_factory.reset(reinterpret_cast<rocksdb::TableFactory*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3158:  auto* opt = reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:3159:  rocksdb::TableFactory* tf = opt->table_factory.get();
./c-deps/rocksdb/java/rocksjni/options.cc:3176:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3188:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3200:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:3212:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:3224:  auto* cf_opts = reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:3225:  cf_opts->compression = rocksdb::CompressionTypeJni::toCppCompressionType(
./c-deps/rocksdb/java/rocksjni/options.cc:3236:  auto* cf_opts = reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:3237:  return rocksdb::CompressionTypeJni::toJavaCompressionType(
./c-deps/rocksdb/java/rocksjni/options.cc:3249:  auto* options = reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:3266:  auto* cf_options = reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:3278:  auto* cf_options = reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:3280:      rocksdb::CompressionTypeJni::toCppCompressionType(
./c-deps/rocksdb/java/rocksjni/options.cc:3291:  auto* cf_options = reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:3292:  return rocksdb::CompressionTypeJni::toJavaCompressionType(
./c-deps/rocksdb/java/rocksjni/options.cc:3304:  auto* cf_options = reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:3306:    reinterpret_cast<rocksdb::CompressionOptions*>(jcompression_options_handle);
./c-deps/rocksdb/java/rocksjni/options.cc:3317:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->compaction_style =
./c-deps/rocksdb/java/rocksjni/options.cc:3318:      static_cast<rocksdb::CompactionStyle>(compaction_style);
./c-deps/rocksdb/java/rocksjni/options.cc:3328:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>
./c-deps/rocksdb/java/rocksjni/options.cc:3339:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->compaction_options_fifo.max_table_files_size =
./c-deps/rocksdb/java/rocksjni/options.cc:3350:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->compaction_options_fifo.max_table_files_size;
./c-deps/rocksdb/java/rocksjni/options.cc:3360:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->num_levels;
./c-deps/rocksdb/java/rocksjni/options.cc:3370:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->num_levels =
./c-deps/rocksdb/java/rocksjni/options.cc:3381:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3393:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3405:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3417:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3429:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3441:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:3453:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:3465:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:3476:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3488:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3500:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3512:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3524:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3536:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3548:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3560:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:3574:      reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:3585:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:3596:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:3607:  rocksdb::Status s = rocksdb::check_if_jlong_fits_size_t(jarena_block_size);
./c-deps/rocksdb/java/rocksjni/options.cc:3609:    reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:3612:    rocksdb::IllegalArgumentExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/options.cc:3623:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3635:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3647:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3659:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3671:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3683:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3695:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3707:  rocksdb::Status s = rocksdb::check_if_jlong_fits_size_t(
./c-deps/rocksdb/java/rocksjni/options.cc:3710:    reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:3713:    rocksdb::IllegalArgumentExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/options.cc:3724:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:3736:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:3748:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:3759:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->bloom_locality =
./c-deps/rocksdb/java/rocksjni/options.cc:3770:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:3782:  rocksdb::Status s = rocksdb::check_if_jlong_fits_size_t(
./c-deps/rocksdb/java/rocksjni/options.cc:3785:    reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:3788:    rocksdb::IllegalArgumentExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/options.cc:3799:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3811:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3823:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3836:  rocksdb::Status s = rocksdb::check_if_jlong_fits_size_t(
./c-deps/rocksdb/java/rocksjni/options.cc:3839:    reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3843:    rocksdb::IllegalArgumentExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/options.cc:3854:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3865:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3877:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3888:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3900:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3912:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3924:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3936:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3948:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3960:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:3972:  auto mbflma = reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:4018:  auto* cf_opt = reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:4035:  return reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:4046:  reinterpret_cast<rocksdb::ColumnFamilyOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:4059:  auto* cf_opts = reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:4061:      rocksdb::CompactionPriorityJni::toCppCompactionPriority(jcompaction_priority_value);
./c-deps/rocksdb/java/rocksjni/options.cc:4071:  auto* cf_opts = reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:4072:  return rocksdb::CompactionPriorityJni::toJavaCompactionPriority(
./c-deps/rocksdb/java/rocksjni/options.cc:4083:  auto* cf_opts = reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:4094:  auto* cf_opts = reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:4106:  auto* cf_opts = reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:4108:      reinterpret_cast<rocksdb::CompactionOptionsUniversal*>(
./c-deps/rocksdb/java/rocksjni/options.cc:4120:  auto* cf_opts = reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:4122:      reinterpret_cast<rocksdb::CompactionOptionsFIFO*>(
./c-deps/rocksdb/java/rocksjni/options.cc:4135:  auto* cf_opts = reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:4146:  auto* cf_opts = reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:4151:// rocksdb::DBOptions
./c-deps/rocksdb/java/rocksjni/options.cc:4160:  auto* dbop = new rocksdb::DBOptions();
./c-deps/rocksdb/java/rocksjni/options.cc:4177:  auto* db_options = new rocksdb::DBOptions();
./c-deps/rocksdb/java/rocksjni/options.cc:4178:  rocksdb::Status status = rocksdb::GetDBOptionsFromString(
./c-deps/rocksdb/java/rocksjni/options.cc:4179:      rocksdb::DBOptions(), opt_string, db_options);
./c-deps/rocksdb/java/rocksjni/options.cc:4202:  auto* dbo = reinterpret_cast<rocksdb::DBOptions*>(handle);
./c-deps/rocksdb/java/rocksjni/options.cc:4214:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->OptimizeForSmallDb();
./c-deps/rocksdb/java/rocksjni/options.cc:4224:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->env =
./c-deps/rocksdb/java/rocksjni/options.cc:4225:      reinterpret_cast<rocksdb::Env*>(jenv_handle);
./c-deps/rocksdb/java/rocksjni/options.cc:4235:  reinterpret_cast<rocksdb::DBOptions*>
./c-deps/rocksdb/java/rocksjni/options.cc:4247:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:4258:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->create_if_missing;
./c-deps/rocksdb/java/rocksjni/options.cc:4268:  reinterpret_cast<rocksdb::DBOptions*>
./c-deps/rocksdb/java/rocksjni/options.cc:4279:  return reinterpret_cast<rocksdb::DBOptions*>
./c-deps/rocksdb/java/rocksjni/options.cc:4290:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->error_if_exists =
./c-deps/rocksdb/java/rocksjni/options.cc:4301:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->error_if_exists;
./c-deps/rocksdb/java/rocksjni/options.cc:4311:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->paranoid_checks =
./c-deps/rocksdb/java/rocksjni/options.cc:4322:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->paranoid_checks;
./c-deps/rocksdb/java/rocksjni/options.cc:4332:  std::shared_ptr<rocksdb::RateLimiter> *pRateLimiter =
./c-deps/rocksdb/java/rocksjni/options.cc:4333:      reinterpret_cast<std::shared_ptr<rocksdb::RateLimiter> *>(
./c-deps/rocksdb/java/rocksjni/options.cc:4335:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->rate_limiter = *pRateLimiter;
./c-deps/rocksdb/java/rocksjni/options.cc:4345:  std::shared_ptr<rocksdb::LoggerJniCallback> *pLogger =
./c-deps/rocksdb/java/rocksjni/options.cc:4346:      reinterpret_cast<std::shared_ptr<rocksdb::LoggerJniCallback> *>(
./c-deps/rocksdb/java/rocksjni/options.cc:4348:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->info_log = *pLogger;
./c-deps/rocksdb/java/rocksjni/options.cc:4358:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->info_log_level =
./c-deps/rocksdb/java/rocksjni/options.cc:4359:    static_cast<rocksdb::InfoLogLevel>(jlog_level);
./c-deps/rocksdb/java/rocksjni/options.cc:4370:      reinterpret_cast<rocksdb::DBOptions*>(jhandle)->info_log_level);
./c-deps/rocksdb/java/rocksjni/options.cc:4381:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->max_total_wal_size =
./c-deps/rocksdb/java/rocksjni/options.cc:4392:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:4403:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->max_open_files =
./c-deps/rocksdb/java/rocksjni/options.cc:4414:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->max_open_files;
./c-deps/rocksdb/java/rocksjni/options.cc:4424:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->max_file_opening_threads =
./c-deps/rocksdb/java/rocksjni/options.cc:4435:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:4446:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:4448:      reinterpret_cast<std::shared_ptr<rocksdb::StatisticsJni>*>(
./c-deps/rocksdb/java/rocksjni/options.cc:4460:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:4461:  std::shared_ptr<rocksdb::Statistics> sptr = opt->statistics;
./c-deps/rocksdb/java/rocksjni/options.cc:4465:    std::shared_ptr<rocksdb::Statistics>* pSptr =
./c-deps/rocksdb/java/rocksjni/options.cc:4466:        new std::shared_ptr<rocksdb::Statistics>(sptr);
./c-deps/rocksdb/java/rocksjni/options.cc:4478:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->use_fsync =
./c-deps/rocksdb/java/rocksjni/options.cc:4489:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->use_fsync;
./c-deps/rocksdb/java/rocksjni/options.cc:4500:  std::vector<rocksdb::DbPath> db_paths;
./c-deps/rocksdb/java/rocksjni/options.cc:4518:    std::string path = rocksdb::JniUtil::copyStdString(
./c-deps/rocksdb/java/rocksjni/options.cc:4531:        rocksdb::DbPath(path, static_cast<uint64_t>(jtarget_size)));
./c-deps/rocksdb/java/rocksjni/options.cc:4536:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:4547:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:4565:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:4568:    rocksdb::DbPath db_path = opt->db_paths[i];
./c-deps/rocksdb/java/rocksjni/options.cc:4605:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->db_log_dir.assign(log_dir);
./c-deps/rocksdb/java/rocksjni/options.cc:4617:      reinterpret_cast<rocksdb::DBOptions*>(jhandle)->db_log_dir.c_str());
./c-deps/rocksdb/java/rocksjni/options.cc:4628:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->wal_dir.assign(wal_dir);
./c-deps/rocksdb/java/rocksjni/options.cc:4640:      reinterpret_cast<rocksdb::DBOptions*>(jhandle)->wal_dir.c_str());
./c-deps/rocksdb/java/rocksjni/options.cc:4650:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:4662:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:4673:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:4684:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:4695:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:4706:  return reinterpret_cast<rocksdb::DBOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:4717:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:4728:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:4739:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->max_background_flushes =
./c-deps/rocksdb/java/rocksjni/options.cc:4750:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:4762:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->max_background_jobs =
./c-deps/rocksdb/java/rocksjni/options.cc:4773:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->max_background_jobs;
./c-deps/rocksdb/java/rocksjni/options.cc:4783:  rocksdb::Status s = rocksdb::check_if_jlong_fits_size_t(max_log_file_size);
./c-deps/rocksdb/java/rocksjni/options.cc:4785:    reinterpret_cast<rocksdb::DBOptions*>(jhandle)->max_log_file_size =
./c-deps/rocksdb/java/rocksjni/options.cc:4788:    rocksdb::IllegalArgumentExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/options.cc:4799:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->max_log_file_size;
./c-deps/rocksdb/java/rocksjni/options.cc:4809:  rocksdb::Status s = rocksdb::check_if_jlong_fits_size_t(
./c-deps/rocksdb/java/rocksjni/options.cc:4812:    reinterpret_cast<rocksdb::DBOptions*>(jhandle)->log_file_time_to_roll =
./c-deps/rocksdb/java/rocksjni/options.cc:4815:    rocksdb::IllegalArgumentExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/options.cc:4826:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->log_file_time_to_roll;
./c-deps/rocksdb/java/rocksjni/options.cc:4836:  rocksdb::Status s = rocksdb::check_if_jlong_fits_size_t(keep_log_file_num);
./c-deps/rocksdb/java/rocksjni/options.cc:4838:    reinterpret_cast<rocksdb::DBOptions*>(jhandle)->keep_log_file_num =
./c-deps/rocksdb/java/rocksjni/options.cc:4841:    rocksdb::IllegalArgumentExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/options.cc:4852:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->keep_log_file_num;
./c-deps/rocksdb/java/rocksjni/options.cc:4862:  rocksdb::Status s = rocksdb::check_if_jlong_fits_size_t(recycle_log_file_num);
./c-deps/rocksdb/java/rocksjni/options.cc:4864:    reinterpret_cast<rocksdb::DBOptions*>(jhandle)->recycle_log_file_num =
./c-deps/rocksdb/java/rocksjni/options.cc:4867:    rocksdb::IllegalArgumentExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/options.cc:4878:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->recycle_log_file_num;
./c-deps/rocksdb/java/rocksjni/options.cc:4888:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->max_manifest_file_size =
./c-deps/rocksdb/java/rocksjni/options.cc:4899:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:4910:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->table_cache_numshardbits =
./c-deps/rocksdb/java/rocksjni/options.cc:4921:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:4932:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->WAL_ttl_seconds =
./c-deps/rocksdb/java/rocksjni/options.cc:4943:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->WAL_ttl_seconds;
./c-deps/rocksdb/java/rocksjni/options.cc:4953:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->WAL_size_limit_MB =
./c-deps/rocksdb/java/rocksjni/options.cc:4964:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->WAL_size_limit_MB;
./c-deps/rocksdb/java/rocksjni/options.cc:4974:  rocksdb::Status s = rocksdb::check_if_jlong_fits_size_t(preallocation_size);
./c-deps/rocksdb/java/rocksjni/options.cc:4976:    reinterpret_cast<rocksdb::DBOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:4979:    rocksdb::IllegalArgumentExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/options.cc:4990:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:5001:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->use_direct_reads;
./c-deps/rocksdb/java/rocksjni/options.cc:5012:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->use_direct_reads =
./c-deps/rocksdb/java/rocksjni/options.cc:5023:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:5035:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:5047:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->allow_fallocate =
./c-deps/rocksdb/java/rocksjni/options.cc:5058:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5069:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->allow_mmap_reads =
./c-deps/rocksdb/java/rocksjni/options.cc:5080:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->allow_mmap_reads;
./c-deps/rocksdb/java/rocksjni/options.cc:5090:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->allow_mmap_writes =
./c-deps/rocksdb/java/rocksjni/options.cc:5101:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->allow_mmap_writes;
./c-deps/rocksdb/java/rocksjni/options.cc:5111:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->is_fd_close_on_exec =
./c-deps/rocksdb/java/rocksjni/options.cc:5122:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->is_fd_close_on_exec;
./c-deps/rocksdb/java/rocksjni/options.cc:5132:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->stats_dump_period_sec =
./c-deps/rocksdb/java/rocksjni/options.cc:5143:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->stats_dump_period_sec;
./c-deps/rocksdb/java/rocksjni/options.cc:5153:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->advise_random_on_open =
./c-deps/rocksdb/java/rocksjni/options.cc:5164:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->advise_random_on_open;
./c-deps/rocksdb/java/rocksjni/options.cc:5174:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5185:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5196:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5198:      rocksdb::AccessHintJni::toCppAccessHint(jaccess_hint_value);
./c-deps/rocksdb/java/rocksjni/options.cc:5208:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5209:  return rocksdb::AccessHintJni::toJavaAccessHint(
./c-deps/rocksdb/java/rocksjni/options.cc:5221:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5233:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5244:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5256:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5268:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5280:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5292:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5304:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5315:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->use_adaptive_mutex =
./c-deps/rocksdb/java/rocksjni/options.cc:5326:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->use_adaptive_mutex;
./c-deps/rocksdb/java/rocksjni/options.cc:5336:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->bytes_per_sync =
./c-deps/rocksdb/java/rocksjni/options.cc:5347:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->bytes_per_sync;
./c-deps/rocksdb/java/rocksjni/options.cc:5357:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->wal_bytes_per_sync =
./c-deps/rocksdb/java/rocksjni/options.cc:5368:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5380:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5391:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5402:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5413:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5424:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:5435:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:5446:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:5457:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:5468:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:5479:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:5490:  reinterpret_cast<rocksdb::DBOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:5501:  return reinterpret_cast<rocksdb::DBOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:5513:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5525:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5536:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5538:      rocksdb::WALRecoveryModeJni::toCppWALRecoveryMode(
./c-deps/rocksdb/java/rocksjni/options.cc:5549:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5550:  return rocksdb::WALRecoveryModeJni::toJavaWALRecoveryMode(
./c-deps/rocksdb/java/rocksjni/options.cc:5561:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5571:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5582:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5583:  auto* row_cache = reinterpret_cast<std::shared_ptr<rocksdb::Cache>*>(jrow_cache_handle);
./c-deps/rocksdb/java/rocksjni/options.cc:5595:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5607:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5618:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5629:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5641:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5652:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5664:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5675:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5680:// rocksdb::WriteOptions
./c-deps/rocksdb/java/rocksjni/options.cc:5689:  auto* op = new rocksdb::WriteOptions();
./c-deps/rocksdb/java/rocksjni/options.cc:5700:  auto* write_options = reinterpret_cast<rocksdb::WriteOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5712:  reinterpret_cast<rocksdb::WriteOptions*>(jhandle)->sync = jflag;
./c-deps/rocksdb/java/rocksjni/options.cc:5722:  return reinterpret_cast<rocksdb::WriteOptions*>(jhandle)->sync;
./c-deps/rocksdb/java/rocksjni/options.cc:5732:  reinterpret_cast<rocksdb::WriteOptions*>(jhandle)->disableWAL = jflag;
./c-deps/rocksdb/java/rocksjni/options.cc:5742:  return reinterpret_cast<rocksdb::WriteOptions*>(jhandle)->disableWAL;
./c-deps/rocksdb/java/rocksjni/options.cc:5753:  reinterpret_cast<rocksdb::WriteOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:5765:  return reinterpret_cast<rocksdb::WriteOptions*>(jhandle)->
./c-deps/rocksdb/java/rocksjni/options.cc:5776:  reinterpret_cast<rocksdb::WriteOptions*>(jhandle)->no_slowdown =
./c-deps/rocksdb/java/rocksjni/options.cc:5787:  return reinterpret_cast<rocksdb::WriteOptions*>(jhandle)->no_slowdown;
./c-deps/rocksdb/java/rocksjni/options.cc:5791:// rocksdb::ReadOptions
./c-deps/rocksdb/java/rocksjni/options.cc:5800:  auto* read_options = new rocksdb::ReadOptions();
./c-deps/rocksdb/java/rocksjni/options.cc:5811:  auto old_read_opt = reinterpret_cast<rocksdb::ReadOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5812:  auto new_read_opt = new rocksdb::ReadOptions();
./c-deps/rocksdb/java/rocksjni/options.cc:5824:  auto* read_options = reinterpret_cast<rocksdb::ReadOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5837:  reinterpret_cast<rocksdb::ReadOptions*>(jhandle)->verify_checksums =
./c-deps/rocksdb/java/rocksjni/options.cc:5848:  return reinterpret_cast<rocksdb::ReadOptions*>(
./c-deps/rocksdb/java/rocksjni/options.cc:5859:  reinterpret_cast<rocksdb::ReadOptions*>(jhandle)->fill_cache =
./c-deps/rocksdb/java/rocksjni/options.cc:5870:  return reinterpret_cast<rocksdb::ReadOptions*>(jhandle)->fill_cache;
./c-deps/rocksdb/java/rocksjni/options.cc:5880:  reinterpret_cast<rocksdb::ReadOptions*>(jhandle)->tailing =
./c-deps/rocksdb/java/rocksjni/options.cc:5891:  return reinterpret_cast<rocksdb::ReadOptions*>(jhandle)->tailing;
./c-deps/rocksdb/java/rocksjni/options.cc:5901:  return reinterpret_cast<rocksdb::ReadOptions*>(jhandle)->managed;
./c-deps/rocksdb/java/rocksjni/options.cc:5911:  reinterpret_cast<rocksdb::ReadOptions*>(jhandle)->managed =
./c-deps/rocksdb/java/rocksjni/options.cc:5922:  return reinterpret_cast<rocksdb::ReadOptions*>(jhandle)->total_order_seek;
./c-deps/rocksdb/java/rocksjni/options.cc:5932:  reinterpret_cast<rocksdb::ReadOptions*>(jhandle)->total_order_seek =
./c-deps/rocksdb/java/rocksjni/options.cc:5943:  return reinterpret_cast<rocksdb::ReadOptions*>(jhandle)->prefix_same_as_start;
./c-deps/rocksdb/java/rocksjni/options.cc:5953:  reinterpret_cast<rocksdb::ReadOptions*>(jhandle)->prefix_same_as_start =
./c-deps/rocksdb/java/rocksjni/options.cc:5964:  return reinterpret_cast<rocksdb::ReadOptions*>(jhandle)->pin_data;
./c-deps/rocksdb/java/rocksjni/options.cc:5974:  reinterpret_cast<rocksdb::ReadOptions*>(jhandle)->pin_data =
./c-deps/rocksdb/java/rocksjni/options.cc:5985:  auto* opt = reinterpret_cast<rocksdb::ReadOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:5997:  auto* opt = reinterpret_cast<rocksdb::ReadOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:6009:  auto* opt = reinterpret_cast<rocksdb::ReadOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:6020:  auto* opt = reinterpret_cast<rocksdb::ReadOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:6031:  auto* opt = reinterpret_cast<rocksdb::ReadOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:6043:  auto* opt = reinterpret_cast<rocksdb::ReadOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:6054:  reinterpret_cast<rocksdb::ReadOptions*>(jhandle)->snapshot =
./c-deps/rocksdb/java/rocksjni/options.cc:6055:      reinterpret_cast<rocksdb::Snapshot*>(jsnapshot);
./c-deps/rocksdb/java/rocksjni/options.cc:6066:      reinterpret_cast<rocksdb::ReadOptions*>(jhandle)->snapshot;
./c-deps/rocksdb/java/rocksjni/options.cc:6078:      reinterpret_cast<rocksdb::ReadOptions*>(jhandle)->read_tier);
./c-deps/rocksdb/java/rocksjni/options.cc:6088:  reinterpret_cast<rocksdb::ReadOptions*>(jhandle)->read_tier =
./c-deps/rocksdb/java/rocksjni/options.cc:6089:      static_cast<rocksdb::ReadTier>(jread_tier);
./c-deps/rocksdb/java/rocksjni/options.cc:6099:  reinterpret_cast<rocksdb::ReadOptions*>(jhandle)->iterate_upper_bound =
./c-deps/rocksdb/java/rocksjni/options.cc:6100:      reinterpret_cast<rocksdb::Slice*>(jupper_bound_slice_handle);
./c-deps/rocksdb/java/rocksjni/options.cc:6111:      reinterpret_cast<rocksdb::ReadOptions*>(jhandle)->iterate_upper_bound;
./c-deps/rocksdb/java/rocksjni/options.cc:6116:// rocksdb::ComparatorOptions
./c-deps/rocksdb/java/rocksjni/options.cc:6125:  auto* comparator_opt = new rocksdb::ComparatorJniCallbackOptions();
./c-deps/rocksdb/java/rocksjni/options.cc:6136:  return reinterpret_cast<rocksdb::ComparatorJniCallbackOptions*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:6147:  reinterpret_cast<rocksdb::ComparatorJniCallbackOptions*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:6159:      reinterpret_cast<rocksdb::ComparatorJniCallbackOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/options.cc:6165:// rocksdb::FlushOptions
./c-deps/rocksdb/java/rocksjni/options.cc:6174:  auto* flush_opt = new rocksdb::FlushOptions();
./c-deps/rocksdb/java/rocksjni/options.cc:6185:  reinterpret_cast<rocksdb::FlushOptions*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:6196:  return reinterpret_cast<rocksdb::FlushOptions*>(jhandle)
./c-deps/rocksdb/java/rocksjni/options.cc:6207:  auto* flush_opt = reinterpret_cast<rocksdb::FlushOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:7:// calling C++ rocksdb::SstFileWriter methods
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:29:      reinterpret_cast<const rocksdb::EnvOptions *>(jenvoptions);
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:30:  auto *options = reinterpret_cast<const rocksdb::Options *>(joptions);
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:32:  rocksdb::Comparator *comparator = nullptr;
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:35:        reinterpret_cast<rocksdb::DirectComparatorJniCallback*>(jcomparator);
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:38:        reinterpret_cast<rocksdb::ComparatorJniCallback*>(jcomparator);
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:41:  rocksdb::SstFileWriter *sst_file_writer =
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:42:      new rocksdb::SstFileWriter(*env_options, *options, comparator);
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:55:      reinterpret_cast<const rocksdb::EnvOptions *>(jenvoptions);
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:56:  auto *options = reinterpret_cast<const rocksdb::Options *>(joptions);
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:57:  rocksdb::SstFileWriter *sst_file_writer =
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:58:      new rocksdb::SstFileWriter(*env_options, *options);
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:74:  rocksdb::Status s =
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:75:      reinterpret_cast<rocksdb::SstFileWriter *>(jhandle)->Open(file_path);
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:79:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:91:  auto *key_slice = reinterpret_cast<rocksdb::Slice *>(jkey_handle);
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:92:  auto *value_slice = reinterpret_cast<rocksdb::Slice *>(jvalue_handle);
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:93:  rocksdb::Status s =
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:94:    reinterpret_cast<rocksdb::SstFileWriter *>(jhandle)->Put(*key_slice,
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:97:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:114:  rocksdb::Slice key_slice(
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:123:  rocksdb::Slice value_slice(
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:126:  rocksdb::Status s =
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:127:  reinterpret_cast<rocksdb::SstFileWriter *>(jhandle)->Put(key_slice,
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:134:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:146:  auto *key_slice = reinterpret_cast<rocksdb::Slice *>(jkey_handle);
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:147:  auto *value_slice = reinterpret_cast<rocksdb::Slice *>(jvalue_handle);
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:148:  rocksdb::Status s =
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:149:    reinterpret_cast<rocksdb::SstFileWriter *>(jhandle)->Merge(*key_slice,
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:152:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:170:  rocksdb::Slice key_slice(
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:179:  rocksdb::Slice value_slice(
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:182:  rocksdb::Status s =
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:183:    reinterpret_cast<rocksdb::SstFileWriter *>(jhandle)->Merge(key_slice,
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:190:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:206:  rocksdb::Slice key_slice(
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:209:  rocksdb::Status s =
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:210:    reinterpret_cast<rocksdb::SstFileWriter *>(jhandle)->Delete(key_slice);
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:215:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:226:  auto *key_slice = reinterpret_cast<rocksdb::Slice *>(jkey_handle);
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:227:  rocksdb::Status s =
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:228:    reinterpret_cast<rocksdb::SstFileWriter *>(jhandle)->Delete(*key_slice);
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:230:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:241:  rocksdb::Status s =
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:242:      reinterpret_cast<rocksdb::SstFileWriter *>(jhandle)->Finish();
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:244:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/sst_file_writerjni.cc:255:  delete reinterpret_cast<rocksdb::SstFileWriter *>(jhandle);
./c-deps/rocksdb/java/rocksjni/slice.cc:7:// rocksdb::Slice.
./c-deps/rocksdb/java/rocksjni/slice.cc:45:  const auto* slice = new rocksdb::Slice(buf);
./c-deps/rocksdb/java/rocksjni/slice.cc:56:  const auto* slice = reinterpret_cast<rocksdb::Slice*>(handle);
./c-deps/rocksdb/java/rocksjni/slice.cc:67:  const auto* slice = reinterpret_cast<rocksdb::Slice*>(handle);
./c-deps/rocksdb/java/rocksjni/slice.cc:78:  const auto* slice = reinterpret_cast<rocksdb::Slice*>(handle);
./c-deps/rocksdb/java/rocksjni/slice.cc:90:  const auto* slice = reinterpret_cast<rocksdb::Slice*>(handle);
./c-deps/rocksdb/java/rocksjni/slice.cc:92:    reinterpret_cast<rocksdb::Slice*>(otherHandle);
./c-deps/rocksdb/java/rocksjni/slice.cc:103:  const auto* slice = reinterpret_cast<rocksdb::Slice*>(handle);
./c-deps/rocksdb/java/rocksjni/slice.cc:105:    reinterpret_cast<rocksdb::Slice*>(otherHandle);
./c-deps/rocksdb/java/rocksjni/slice.cc:116:  delete reinterpret_cast<rocksdb::Slice*>(handle);
./c-deps/rocksdb/java/rocksjni/slice.cc:141:  const auto* slice = new rocksdb::Slice((const char*)buf, len);
./c-deps/rocksdb/java/rocksjni/slice.cc:165:      new rocksdb::Slice(buf, len - 1);
./c-deps/rocksdb/java/rocksjni/slice.cc:179:  const auto* slice = reinterpret_cast<rocksdb::Slice*>(handle);
./c-deps/rocksdb/java/rocksjni/slice.cc:206:  auto* slice = reinterpret_cast<rocksdb::Slice*>(handle);
./c-deps/rocksdb/java/rocksjni/slice.cc:221:  auto* slice = reinterpret_cast<rocksdb::Slice*>(handle);
./c-deps/rocksdb/java/rocksjni/slice.cc:232:  const auto* slice = reinterpret_cast<rocksdb::Slice*>(handle);
./c-deps/rocksdb/java/rocksjni/slice.cc:253:    rocksdb::IllegalArgumentExceptionJni::ThrowNew(env,
./c-deps/rocksdb/java/rocksjni/slice.cc:254:        rocksdb::Status::InvalidArgument(
./c-deps/rocksdb/java/rocksjni/slice.cc:261:  const auto* slice = new rocksdb::Slice(ptrData, length);
./c-deps/rocksdb/java/rocksjni/slice.cc:276:    rocksdb::IllegalArgumentExceptionJni::ThrowNew(env,
./c-deps/rocksdb/java/rocksjni/slice.cc:277:        rocksdb::Status::InvalidArgument(
./c-deps/rocksdb/java/rocksjni/slice.cc:283:  const auto* slice = new rocksdb::Slice(ptrData);
./c-deps/rocksdb/java/rocksjni/slice.cc:294:  const auto* slice = reinterpret_cast<rocksdb::Slice*>(handle);
./c-deps/rocksdb/java/rocksjni/slice.cc:306:  const auto* slice = reinterpret_cast<rocksdb::Slice*>(handle);
./c-deps/rocksdb/java/rocksjni/slice.cc:318:  auto* slice = reinterpret_cast<rocksdb::Slice*>(handle);
./c-deps/rocksdb/java/rocksjni/slice.cc:333:  auto* slice = reinterpret_cast<rocksdb::Slice*>(handle);
./c-deps/rocksdb/java/rocksjni/slice.cc:344:  const auto* slice = reinterpret_cast<rocksdb::Slice*>(handle);
./c-deps/rocksdb/java/rocksjni/comparatorjnicallback.h:7:// rocksdb::Comparator and rocksdb::DirectComparator.
./c-deps/rocksdb/java/rocksjni/remove_emptyvalue_compactionfilterjni.cc:20:      new rocksdb::RemoveEmptyValueCompactionFilter();
./c-deps/rocksdb/java/rocksjni/loggerjnicallback.h:7:// rocksdb::Logger
./c-deps/rocksdb/java/rocksjni/compaction_filter_factory.cc:7:// rocksdb::CompactionFilterFactory.
./c-deps/rocksdb/java/rocksjni/compaction_filter_factory.cc:22:  auto* cff = new rocksdb::CompactionFilterFactoryJniCallback(env, jobj);
./c-deps/rocksdb/java/rocksjni/compaction_filter_factory.cc:23:  auto* ptr_sptr_cff = new std::shared_ptr<rocksdb::CompactionFilterFactoryJniCallback>(cff);
./c-deps/rocksdb/java/rocksjni/compaction_filter_factory.cc:35:      reinterpret_cast<std::shared_ptr<rocksdb::CompactionFilterFactoryJniCallback> *>(jhandle);
./c-deps/rocksdb/java/rocksjni/write_batch.cc:7:// calling c++ rocksdb::WriteBatch methods from Java side.
./c-deps/rocksdb/java/rocksjni/write_batch.cc:32:  auto* wb = new rocksdb::WriteBatch(static_cast<size_t>(jreserved_bytes));
./c-deps/rocksdb/java/rocksjni/write_batch.cc:43:  auto* wb = reinterpret_cast<rocksdb::WriteBatch*>(jwb_handle);
./c-deps/rocksdb/java/rocksjni/write_batch.cc:56:  auto* wb = reinterpret_cast<rocksdb::WriteBatch*>(jwb_handle);
./c-deps/rocksdb/java/rocksjni/write_batch.cc:69:  auto* wb = reinterpret_cast<rocksdb::WriteBatch*>(jwb_handle);
./c-deps/rocksdb/java/rocksjni/write_batch.cc:82:  auto* wb = reinterpret_cast<rocksdb::WriteBatch*>(jwb_handle);
./c-deps/rocksdb/java/rocksjni/write_batch.cc:90:  rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/write_batch.cc:102:  auto* wb = reinterpret_cast<rocksdb::WriteBatch*>(jwb_handle);
./c-deps/rocksdb/java/rocksjni/write_batch.cc:104:  auto put = [&wb] (rocksdb::Slice key, rocksdb::Slice value) {
./c-deps/rocksdb/java/rocksjni/write_batch.cc:107:  rocksdb::JniUtil::kv_op(put, env, jobj, jkey, jkey_len, jentry_value,
./c-deps/rocksdb/java/rocksjni/write_batch.cc:120:  auto* wb = reinterpret_cast<rocksdb::WriteBatch*>(jwb_handle);
./c-deps/rocksdb/java/rocksjni/write_batch.cc:122:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/write_batch.cc:124:  auto put = [&wb, &cf_handle] (rocksdb::Slice key, rocksdb::Slice value) {
./c-deps/rocksdb/java/rocksjni/write_batch.cc:127:  rocksdb::JniUtil::kv_op(put, env, jobj, jkey, jkey_len, jentry_value,
./c-deps/rocksdb/java/rocksjni/write_batch.cc:140:  auto* wb = reinterpret_cast<rocksdb::WriteBatch*>(jwb_handle);
./c-deps/rocksdb/java/rocksjni/write_batch.cc:142:  auto merge = [&wb] (rocksdb::Slice key, rocksdb::Slice value) {
./c-deps/rocksdb/java/rocksjni/write_batch.cc:145:  rocksdb::JniUtil::kv_op(merge, env, jobj, jkey, jkey_len, jentry_value,
./c-deps/rocksdb/java/rocksjni/write_batch.cc:158:  auto* wb = reinterpret_cast<rocksdb::WriteBatch*>(jwb_handle);
./c-deps/rocksdb/java/rocksjni/write_batch.cc:160:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/write_batch.cc:162:  auto merge = [&wb, &cf_handle] (rocksdb::Slice key, rocksdb::Slice value) {
./c-deps/rocksdb/java/rocksjni/write_batch.cc:165:  rocksdb::JniUtil::kv_op(merge, env, jobj, jkey, jkey_len, jentry_value,
./c-deps/rocksdb/java/rocksjni/write_batch.cc:177:  auto* wb = reinterpret_cast<rocksdb::WriteBatch*>(jwb_handle);
./c-deps/rocksdb/java/rocksjni/write_batch.cc:179:  auto remove = [&wb] (rocksdb::Slice key) {
./c-deps/rocksdb/java/rocksjni/write_batch.cc:182:  rocksdb::JniUtil::k_op(remove, env, jobj, jkey, jkey_len);
./c-deps/rocksdb/java/rocksjni/write_batch.cc:193:  auto* wb = reinterpret_cast<rocksdb::WriteBatch*>(jwb_handle);
./c-deps/rocksdb/java/rocksjni/write_batch.cc:195:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/write_batch.cc:197:  auto remove = [&wb, &cf_handle] (rocksdb::Slice key) {
./c-deps/rocksdb/java/rocksjni/write_batch.cc:200:  rocksdb::JniUtil::k_op(remove, env, jobj, jkey, jkey_len);
./c-deps/rocksdb/java/rocksjni/write_batch.cc:214:  auto* wb = reinterpret_cast<rocksdb::WriteBatch*>(jwb_handle);
./c-deps/rocksdb/java/rocksjni/write_batch.cc:216:  auto deleteRange = [&wb](rocksdb::Slice beginKey, rocksdb::Slice endKey) {
./c-deps/rocksdb/java/rocksjni/write_batch.cc:219:  rocksdb::JniUtil::kv_op(deleteRange, env, jobj, jbegin_key, jbegin_key_len,
./c-deps/rocksdb/java/rocksjni/write_batch.cc:232:  auto* wb = reinterpret_cast<rocksdb::WriteBatch*>(jwb_handle);
./c-deps/rocksdb/java/rocksjni/write_batch.cc:234:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/write_batch.cc:236:  auto deleteRange = [&wb, &cf_handle](rocksdb::Slice beginKey,
./c-deps/rocksdb/java/rocksjni/write_batch.cc:237:                                       rocksdb::Slice endKey) {
./c-deps/rocksdb/java/rocksjni/write_batch.cc:240:  rocksdb::JniUtil::kv_op(deleteRange, env, jobj, jbegin_key, jbegin_key_len,
./c-deps/rocksdb/java/rocksjni/write_batch.cc:252:  auto* wb = reinterpret_cast<rocksdb::WriteBatch*>(jwb_handle);
./c-deps/rocksdb/java/rocksjni/write_batch.cc:254:  auto putLogData = [&wb] (rocksdb::Slice blob) {
./c-deps/rocksdb/java/rocksjni/write_batch.cc:257:  rocksdb::JniUtil::k_op(putLogData, env, jobj, jblob, jblob_len);
./c-deps/rocksdb/java/rocksjni/write_batch.cc:267:  auto* wb = reinterpret_cast<rocksdb::WriteBatch*>(jwb_handle);
./c-deps/rocksdb/java/rocksjni/write_batch.cc:270:  rocksdb::Status s = wb->Iterate(
./c-deps/rocksdb/java/rocksjni/write_batch.cc:271:    reinterpret_cast<rocksdb::WriteBatchHandlerJniCallback*>(handlerHandle));
./c-deps/rocksdb/java/rocksjni/write_batch.cc:276:  rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/write_batch.cc:286:  auto* wb = reinterpret_cast<rocksdb::WriteBatch*>(handle);
./c-deps/rocksdb/java/rocksjni/write_batch.cc:298:  auto* wbjnic = new rocksdb::WriteBatchHandlerJniCallback(env, jobj);
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:7:// calling c++ rocksdb::WriteBatch methods testing from Java side.
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:35:  auto* b = reinterpret_cast<rocksdb::WriteBatch*>(jwb_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:42:  rocksdb::InternalKeyComparator cmp(rocksdb::BytewiseComparator());
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:43:  auto factory = std::make_shared<rocksdb::SkipListFactory>();
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:44:  rocksdb::Options options;
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:45:  rocksdb::WriteBufferManager wb(options.db_write_buffer_size);
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:47:  rocksdb::MemTable* mem = new rocksdb::MemTable(
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:48:      cmp, rocksdb::ImmutableCFOptions(options),
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:49:      rocksdb::MutableCFOptions(options), &wb, rocksdb::kMaxSequenceNumber,
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:53:  rocksdb::ColumnFamilyMemTablesDefault cf_mems_default(mem);
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:54:  rocksdb::Status s =
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:55:      rocksdb::WriteBatchInternal::InsertInto(b, &cf_mems_default, nullptr);
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:57:  rocksdb::Arena arena;
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:58:  rocksdb::ScopedArenaIterator iter(mem->NewIterator(
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:59:      rocksdb::ReadOptions(), &arena));
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:61:    rocksdb::ParsedInternalKey ikey;
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:63:    bool parsed = rocksdb::ParseInternalKey(iter->key(), &ikey);
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:68:      case rocksdb::kTypeValue:
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:76:      case rocksdb::kTypeMerge:
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:84:      case rocksdb::kTypeDeletion:
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:95:    state.append(rocksdb::NumberToString(ikey.sequence));
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:99:  } else if (count != rocksdb::WriteBatchInternal::Count(b)) {
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:128:  auto* wb = reinterpret_cast<rocksdb::WriteBatch*>(jwb_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:131:  rocksdb::WriteBatchInternal::SetSequence(
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:132:      wb, static_cast<rocksdb::SequenceNumber>(jsn));
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:142:  auto* wb = reinterpret_cast<rocksdb::WriteBatch*>(jwb_handle);
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:145:  return static_cast<jlong>(rocksdb::WriteBatchInternal::Sequence(wb));
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:155:  auto* wb1 = reinterpret_cast<rocksdb::WriteBatch*>(jwb_handle_1);
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:157:  auto* wb2 = reinterpret_cast<rocksdb::WriteBatch*>(jwb_handle_2);
./c-deps/rocksdb/java/rocksjni/write_batch_test.cc:160:  rocksdb::WriteBatchInternal::Append(wb1, wb2);
./c-deps/rocksdb/java/rocksjni/statistics.cc:7:// calling c++ rocksdb::Statistics methods from Java side.
./c-deps/rocksdb/java/rocksjni/statistics.cc:59:  std::shared_ptr<rocksdb::Statistics>* pSptr_other_statistics = nullptr;
./c-deps/rocksdb/java/rocksjni/statistics.cc:62:        reinterpret_cast<std::shared_ptr<rocksdb::Statistics>*>(
./c-deps/rocksdb/java/rocksjni/statistics.cc:77:        const rocksdb::Histograms histogram =
./c-deps/rocksdb/java/rocksjni/statistics.cc:78:            rocksdb::HistogramTypeJni::toCppHistograms(jhistogram[i]);
./c-deps/rocksdb/java/rocksjni/statistics.cc:86:  std::shared_ptr<rocksdb::Statistics> sptr_other_statistics = nullptr;
./c-deps/rocksdb/java/rocksjni/statistics.cc:91:  auto* pSptr_statistics = new std::shared_ptr<rocksdb::StatisticsJni>(
./c-deps/rocksdb/java/rocksjni/statistics.cc:92:      new rocksdb::StatisticsJni(sptr_other_statistics, histograms));
./c-deps/rocksdb/java/rocksjni/statistics.cc:106:        reinterpret_cast<std::shared_ptr<rocksdb::Statistics>*>(jhandle);
./c-deps/rocksdb/java/rocksjni/statistics.cc:119:      reinterpret_cast<std::shared_ptr<rocksdb::Statistics>*>(jhandle);
./c-deps/rocksdb/java/rocksjni/statistics.cc:121:  return rocksdb::StatsLevelJni::toJavaStatsLevel(pSptr_statistics->get()->stats_level_);
./c-deps/rocksdb/java/rocksjni/statistics.cc:132:      reinterpret_cast<std::shared_ptr<rocksdb::Statistics>*>(jhandle);
./c-deps/rocksdb/java/rocksjni/statistics.cc:134:  auto stats_level = rocksdb::StatsLevelJni::toCppStatsLevel(jstats_level);
./c-deps/rocksdb/java/rocksjni/statistics.cc:146:      reinterpret_cast<std::shared_ptr<rocksdb::Statistics>*>(jhandle);
./c-deps/rocksdb/java/rocksjni/statistics.cc:148:  auto ticker = rocksdb::TickerTypeJni::toCppTickers(jticker_type);
./c-deps/rocksdb/java/rocksjni/statistics.cc:160:      reinterpret_cast<std::shared_ptr<rocksdb::Statistics>*>(jhandle);
./c-deps/rocksdb/java/rocksjni/statistics.cc:162:  auto ticker = rocksdb::TickerTypeJni::toCppTickers(jticker_type);
./c-deps/rocksdb/java/rocksjni/statistics.cc:174:      reinterpret_cast<std::shared_ptr<rocksdb::Statistics>*>(jhandle);
./c-deps/rocksdb/java/rocksjni/statistics.cc:177:  rocksdb::HistogramData data;  // TODO(AR) perhaps better to construct a Java Object Wrapper that uses ptr to C++ `new HistogramData`
./c-deps/rocksdb/java/rocksjni/statistics.cc:178:  auto histogram = rocksdb::HistogramTypeJni::toCppHistograms(jhistogram_type);
./c-deps/rocksdb/java/rocksjni/statistics.cc:180:      static_cast<rocksdb::Histograms>(histogram), &data);
./c-deps/rocksdb/java/rocksjni/statistics.cc:182:  jclass jclazz = rocksdb::HistogramDataJni::getJClass(env);
./c-deps/rocksdb/java/rocksjni/statistics.cc:188:  jmethodID mid = rocksdb::HistogramDataJni::getConstructorMethodId(
./c-deps/rocksdb/java/rocksjni/statistics.cc:209:      reinterpret_cast<std::shared_ptr<rocksdb::Statistics>*>(jhandle);
./c-deps/rocksdb/java/rocksjni/statistics.cc:211:  auto histogram = rocksdb::HistogramTypeJni::toCppHistograms(jhistogram_type);
./c-deps/rocksdb/java/rocksjni/statistics.cc:224:      reinterpret_cast<std::shared_ptr<rocksdb::Statistics>*>(jhandle);
./c-deps/rocksdb/java/rocksjni/statistics.cc:226:  rocksdb::Status s = pSptr_statistics->get()->Reset();
./c-deps/rocksdb/java/rocksjni/statistics.cc:228:   rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/statistics.cc:240:      reinterpret_cast<std::shared_ptr<rocksdb::Statistics>*>(jhandle);
./c-deps/rocksdb/java/rocksjni/compaction_filter.cc:7:// rocksdb::CompactionFilter.
./c-deps/rocksdb/java/rocksjni/compaction_filter.cc:23:  auto* cf = reinterpret_cast<rocksdb::CompactionFilter*>(handle);
./c-deps/rocksdb/java/rocksjni/compaction_options_fifo.cc:7:// rocksdb::CompactionOptionsFIFO.
./c-deps/rocksdb/java/rocksjni/compaction_options_fifo.cc:21:  const auto* opt = new rocksdb::CompactionOptionsFIFO();
./c-deps/rocksdb/java/rocksjni/compaction_options_fifo.cc:32:  auto* opt = reinterpret_cast<rocksdb::CompactionOptionsFIFO*>(jhandle);
./c-deps/rocksdb/java/rocksjni/compaction_options_fifo.cc:43:  auto* opt = reinterpret_cast<rocksdb::CompactionOptionsFIFO*>(jhandle);
./c-deps/rocksdb/java/rocksjni/compaction_options_fifo.cc:54:  delete reinterpret_cast<rocksdb::CompactionOptionsFIFO*>(jhandle);
./c-deps/rocksdb/java/rocksjni/merge_operator.cc:7:// for rocksdb::MergeOperator.
./c-deps/rocksdb/java/rocksjni/merge_operator.cc:33:  auto* sptr_string_append_op = new std::shared_ptr<rocksdb::MergeOperator>(
./c-deps/rocksdb/java/rocksjni/merge_operator.cc:34:    rocksdb::MergeOperators::CreateFromStringId("stringappend"));
./c-deps/rocksdb/java/rocksjni/merge_operator.cc:46:      reinterpret_cast<std::shared_ptr<rocksdb::MergeOperator>* >(jhandle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:7:// calling c++ rocksdb::DB methods from Java side.
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:31:// rocksdb::DB::Open
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:33:    std::function<rocksdb::Status(
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:34:      const rocksdb::Options&, const std::string&, rocksdb::DB**)> open_fn
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:42:  auto* opt = reinterpret_cast<rocksdb::Options*>(jopt_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:43:  rocksdb::DB* db = nullptr;
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:44:  rocksdb::Status s = open_fn(*opt, db_path, &db);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:51:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:64:    (rocksdb::Status(*)
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:65:      (const rocksdb::Options&, const std::string&, rocksdb::DB**)
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:66:    )&rocksdb::DB::Open
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:78:      const rocksdb::Options& options,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:79:      const std::string& db_path, rocksdb::DB** db) {
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:80:    return rocksdb::DB::OpenForReadOnly(options, db_path, db);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:86:    std::function<rocksdb::Status(
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:87:      const rocksdb::DBOptions&, const std::string&,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:88:      const std::vector<rocksdb::ColumnFamilyDescriptor>&,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:89:      std::vector<rocksdb::ColumnFamilyHandle*>*,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:90:      rocksdb::DB**)> open_fn
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:106:  std::vector<rocksdb::ColumnFamilyDescriptor> column_families;
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:108:  rocksdb::JniUtil::byteStrings<std::string>(
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:115:      rocksdb::ColumnFamilyOptions* cf_options =
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:116:          reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jco[idx]);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:118:          rocksdb::ColumnFamilyDescriptor(cf_name, *cf_options));
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:130:  auto* opt = reinterpret_cast<rocksdb::DBOptions*>(jopt_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:131:  std::vector<rocksdb::ColumnFamilyHandle*> handles;
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:132:  rocksdb::DB* db = nullptr;
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:133:  rocksdb::Status s = open_fn(*opt, db_path, column_families,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:164:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:179:        const rocksdb::DBOptions& options, const std::string& db_path,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:180:        const std::vector<rocksdb::ColumnFamilyDescriptor>& column_families,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:181:        std::vector<rocksdb::ColumnFamilyHandle*>* handles, rocksdb::DB** db) {
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:182:      return rocksdb::DB::OpenForReadOnly(options, db_path, column_families,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:196:    jcolumn_options, (rocksdb::Status(*)
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:197:      (const rocksdb::DBOptions&, const std::string&,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:198:        const std::vector<rocksdb::ColumnFamilyDescriptor>&,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:199:        std::vector<rocksdb::ColumnFamilyHandle*>*, rocksdb::DB**)
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:200:      )&rocksdb::DB::Open
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:205:// rocksdb::DB::ListColumnFamilies
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:221:  auto* opt = reinterpret_cast<rocksdb::Options*>(jopt_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:222:  rocksdb::Status s = rocksdb::DB::ListColumnFamilies(*opt, db_path,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:228:      rocksdb::JniUtil::stringsBytes(env, column_family_names);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:234:// rocksdb::DB::Put
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:239:bool rocksdb_put_helper(JNIEnv* env, rocksdb::DB* db,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:240:                        const rocksdb::WriteOptions& write_options,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:241:                        rocksdb::ColumnFamilyHandle* cf_handle, jbyteArray jkey,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:261:  rocksdb::Slice key_slice(reinterpret_cast<char*>(key), jkey_len);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:262:  rocksdb::Slice value_slice(reinterpret_cast<char*>(value), jval_len);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:264:  rocksdb::Status s;
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:279:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:294:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:295:  static const rocksdb::WriteOptions default_write_options =
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:296:      rocksdb::WriteOptions();
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:313:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:314:  static const rocksdb::WriteOptions default_write_options =
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:315:      rocksdb::WriteOptions();
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:316:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:321:    rocksdb::RocksDBExceptionJni::ThrowNew(env,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:322:        rocksdb::Status::InvalidArgument("Invalid ColumnFamilyHandle."));
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:337:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:338:  auto* write_options = reinterpret_cast<rocksdb::WriteOptions*>(
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:354:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:355:  auto* write_options = reinterpret_cast<rocksdb::WriteOptions*>(
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:357:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:362:    rocksdb::RocksDBExceptionJni::ThrowNew(env,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:363:        rocksdb::Status::InvalidArgument("Invalid ColumnFamilyHandle."));
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:368:// rocksdb::DB::Write
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:377:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:378:  auto* write_options = reinterpret_cast<rocksdb::WriteOptions*>(
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:380:  auto* wb = reinterpret_cast<rocksdb::WriteBatch*>(jwb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:382:  rocksdb::Status s = db->Write(*write_options, wb);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:385:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:397:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:398:  auto* write_options = reinterpret_cast<rocksdb::WriteOptions*>(
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:400:  auto* wbwi = reinterpret_cast<rocksdb::WriteBatchWithIndex*>(jwbwi_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:403:  rocksdb::Status s = db->Write(*write_options, wb);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:406:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:411:// rocksdb::DB::KeyMayExist
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:412:jboolean key_may_exist_helper(JNIEnv* env, rocksdb::DB* db,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:413:    const rocksdb::ReadOptions& read_opt,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:414:    rocksdb::ColumnFamilyHandle* cf_handle, jbyteArray jkey, jint jkey_off,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:426:  rocksdb::Slice key_slice(reinterpret_cast<char*>(key), jkey_len);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:445:        rocksdb::StringBuilderJni::append(env, jstring_builder,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:465:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:467:  return key_may_exist_helper(env, db, rocksdb::ReadOptions(),
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:479:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:480:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:484:    return key_may_exist_helper(env, db, rocksdb::ReadOptions(),
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:487:    rocksdb::RocksDBExceptionJni::ThrowNew(env,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:488:        rocksdb::Status::InvalidArgument("Invalid ColumnFamilyHandle."));
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:501:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:502:  auto& read_options = *reinterpret_cast<rocksdb::ReadOptions*>(
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:518:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:519:  auto& read_options = *reinterpret_cast<rocksdb::ReadOptions*>(
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:521:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:528:    rocksdb::RocksDBExceptionJni::ThrowNew(env,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:529:        rocksdb::Status::InvalidArgument("Invalid ColumnFamilyHandle."));
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:535:// rocksdb::DB::Get
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:538:    JNIEnv* env, rocksdb::DB* db, const rocksdb::ReadOptions& read_opt,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:539:    rocksdb::ColumnFamilyHandle* column_family_handle, jbyteArray jkey,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:550:  rocksdb::Slice key_slice(
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:554:  rocksdb::Status s;
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:570:    jbyteArray jret_value = rocksdb::JniUtil::copyBytes(env, value);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:578:  rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:591:      reinterpret_cast<rocksdb::DB*>(jdb_handle),
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:592:      rocksdb::ReadOptions(), nullptr,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:604:  auto db_handle = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:605:  auto cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:607:    return rocksdb_get_helper(env, db_handle, rocksdb::ReadOptions(),
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:610:    rocksdb::RocksDBExceptionJni::ThrowNew(env,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:611:        rocksdb::Status::InvalidArgument("Invalid ColumnFamilyHandle."));
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:625:      reinterpret_cast<rocksdb::DB*>(jdb_handle),
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:626:      *reinterpret_cast<rocksdb::ReadOptions*>(jropt_handle), nullptr,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:638:  auto* db_handle = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:639:  auto& ro_opt = *reinterpret_cast<rocksdb::ReadOptions*>(jropt_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:640:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:645:    rocksdb::RocksDBExceptionJni::ThrowNew(env,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:646:        rocksdb::Status::InvalidArgument("Invalid ColumnFamilyHandle."));
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:651:jint rocksdb_get_helper(JNIEnv* env, rocksdb::DB* db,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:652:                        const rocksdb::ReadOptions& read_options,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:653:                        rocksdb::ColumnFamilyHandle* column_family_handle,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:668:  rocksdb::Slice key_slice(reinterpret_cast<char*>(key), jkey_len);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:673:  rocksdb::Status s;
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:694:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:731:jobjectArray multi_get_helper(JNIEnv* env, jobject jdb, rocksdb::DB* db,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:732:    const rocksdb::ReadOptions& rOpt, jobjectArray jkeys,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:735:  std::vector<rocksdb::ColumnFamilyHandle*> cf_handles;
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:747:          reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcfh[i]);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:772:  std::vector<rocksdb::Slice> keys;
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:799:    rocksdb::Slice key_slice(reinterpret_cast<char*>(key), len_key);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:810:  std::vector<rocksdb::Status> s;
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:822:      rocksdb::ByteJni::new2dByteArray(env, static_cast<jsize>(s.size()));
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:835:  for (std::vector<rocksdb::Status>::size_type i = 0; i != s.size(); i++) {
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:875:  return multi_get_helper(env, jdb, reinterpret_cast<rocksdb::DB*>(jdb_handle),
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:876:      rocksdb::ReadOptions(), jkeys, jkey_offs, jkey_lens, nullptr);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:888:  return multi_get_helper(env, jdb, reinterpret_cast<rocksdb::DB*>(jdb_handle),
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:889:      rocksdb::ReadOptions(), jkeys, jkey_offs, jkey_lens,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:901:  return multi_get_helper(env, jdb, reinterpret_cast<rocksdb::DB*>(jdb_handle),
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:902:      *reinterpret_cast<rocksdb::ReadOptions*>(jropt_handle), jkeys, jkey_offs,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:915:  return multi_get_helper(env, jdb, reinterpret_cast<rocksdb::DB*>(jdb_handle),
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:916:      *reinterpret_cast<rocksdb::ReadOptions*>(jropt_handle), jkeys, jkey_offs,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:931:  return rocksdb_get_helper(env, reinterpret_cast<rocksdb::DB*>(jdb_handle),
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:932:                            rocksdb::ReadOptions(), nullptr, jkey, jkey_off,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:948:  auto* db_handle = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:949:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:952:    return rocksdb_get_helper(env, db_handle, rocksdb::ReadOptions(), cf_handle,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:956:    rocksdb::RocksDBExceptionJni::ThrowNew(env,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:957:        rocksdb::Status::InvalidArgument("Invalid ColumnFamilyHandle."));
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:976:      env, reinterpret_cast<rocksdb::DB*>(jdb_handle),
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:977:      *reinterpret_cast<rocksdb::ReadOptions*>(jropt_handle), nullptr, jkey,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:990:  auto* db_handle = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:991:  auto& ro_opt = *reinterpret_cast<rocksdb::ReadOptions*>(jropt_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:992:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:999:    rocksdb::RocksDBExceptionJni::ThrowNew(env,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1000:        rocksdb::Status::InvalidArgument("Invalid ColumnFamilyHandle."));
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1007:// rocksdb::DB::Delete()
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1013:    JNIEnv* env, rocksdb::DB* db, const rocksdb::WriteOptions& write_options,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1014:    rocksdb::ColumnFamilyHandle* cf_handle, jbyteArray jkey, jint jkey_off,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1023:  rocksdb::Slice key_slice(reinterpret_cast<char*>(key), jkey_len);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1025:  rocksdb::Status s;
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1040:  rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1052:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1053:  static const rocksdb::WriteOptions default_write_options =
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1054:      rocksdb::WriteOptions();
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1067:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1068:  static const rocksdb::WriteOptions default_write_options =
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1069:      rocksdb::WriteOptions();
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1070:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1075:    rocksdb::RocksDBExceptionJni::ThrowNew(env,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1076:        rocksdb::Status::InvalidArgument("Invalid ColumnFamilyHandle."));
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1088:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1090:      reinterpret_cast<rocksdb::WriteOptions*>(jwrite_options);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1104:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1106:      reinterpret_cast<rocksdb::WriteOptions*>(jwrite_options);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1107:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1112:    rocksdb::RocksDBExceptionJni::ThrowNew(env,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1113:        rocksdb::Status::InvalidArgument("Invalid ColumnFamilyHandle."));
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1118:// rocksdb::DB::SingleDelete()
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1124:    JNIEnv* env, rocksdb::DB* db, const rocksdb::WriteOptions& write_options,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1125:    rocksdb::ColumnFamilyHandle* cf_handle, jbyteArray jkey, jint jkey_len) {
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1131:  rocksdb::Slice key_slice(reinterpret_cast<char*>(key), jkey_len);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1133:  rocksdb::Status s;
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1150:  rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1162:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1163:  static const rocksdb::WriteOptions default_write_options =
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1164:      rocksdb::WriteOptions();
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1177:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1178:  static const rocksdb::WriteOptions default_write_options =
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1179:      rocksdb::WriteOptions();
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1180:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1185:    rocksdb::RocksDBExceptionJni::ThrowNew(env,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1186:        rocksdb::Status::InvalidArgument("Invalid ColumnFamilyHandle."));
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1198:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1200:      reinterpret_cast<rocksdb::WriteOptions*>(jwrite_options);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1214:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1216:      reinterpret_cast<rocksdb::WriteOptions*>(jwrite_options);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1217:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1222:    rocksdb::RocksDBExceptionJni::ThrowNew(env,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1223:        rocksdb::Status::InvalidArgument("Invalid ColumnFamilyHandle."));
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1228:// rocksdb::DB::DeleteRange()
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1233:bool rocksdb_delete_range_helper(JNIEnv* env, rocksdb::DB* db,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1234:                                 const rocksdb::WriteOptions& write_options,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1235:                                 rocksdb::ColumnFamilyHandle* cf_handle,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1247:  rocksdb::Slice begin_key_slice(reinterpret_cast<char*>(begin_key),
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1258:  rocksdb::Slice end_key_slice(reinterpret_cast<char*>(end_key), jend_key_len);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1260:  rocksdb::Status s =
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1271:  rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1284:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1285:  static const rocksdb::WriteOptions default_write_options =
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1286:      rocksdb::WriteOptions();
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1301:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1302:  static const rocksdb::WriteOptions default_write_options =
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1303:      rocksdb::WriteOptions();
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1304:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1310:    rocksdb::RocksDBExceptionJni::ThrowNew(
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1311:        env, rocksdb::Status::InvalidArgument("Invalid ColumnFamilyHandle."));
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1324:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1326:      reinterpret_cast<rocksdb::WriteOptions*>(jwrite_options);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1342:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1344:      reinterpret_cast<rocksdb::WriteOptions*>(jwrite_options);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1345:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1351:    rocksdb::RocksDBExceptionJni::ThrowNew(
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1352:        env, rocksdb::Status::InvalidArgument("Invalid ColumnFamilyHandle."));
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1357:// rocksdb::DB::Merge
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1362:bool rocksdb_merge_helper(JNIEnv* env, rocksdb::DB* db,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1363:                          const rocksdb::WriteOptions& write_options,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1364:                          rocksdb::ColumnFamilyHandle* cf_handle,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1374:  rocksdb::Slice key_slice(reinterpret_cast<char*>(key), jkey_len);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1384:  rocksdb::Slice value_slice(reinterpret_cast<char*>(value), jval_len);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1386:  rocksdb::Status s;
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1401:  rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1415:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1416:  static const rocksdb::WriteOptions default_write_options =
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1417:      rocksdb::WriteOptions();
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1432:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1433:  static const rocksdb::WriteOptions default_write_options =
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1434:      rocksdb::WriteOptions();
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1435:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1440:    rocksdb::RocksDBExceptionJni::ThrowNew(env,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1441:        rocksdb::Status::InvalidArgument("Invalid ColumnFamilyHandle."));
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1454:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1456:      reinterpret_cast<rocksdb::WriteOptions*>(jwrite_options_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1471:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1473:      reinterpret_cast<rocksdb::WriteOptions*>(jwrite_options_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1474:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1479:    rocksdb::RocksDBExceptionJni::ThrowNew(env,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1480:        rocksdb::Status::InvalidArgument("Invalid ColumnFamilyHandle."));
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1485:// rocksdb::DB::~DB()
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1494:  auto* db = reinterpret_cast<rocksdb::DB*>(jhandle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1500:    rocksdb::DB* db, rocksdb::ReadOptions read_options,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1501:    rocksdb::ColumnFamilyHandle* cf_handle) {
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1502:  rocksdb::Iterator* iterator = nullptr;
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1518:  auto* db = reinterpret_cast<rocksdb::DB*>(db_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1519:  return rocksdb_iterator_helper(db, rocksdb::ReadOptions(),
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1531:  auto* db = reinterpret_cast<rocksdb::DB*>(db_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1532:  auto& read_options = *reinterpret_cast<rocksdb::ReadOptions*>(
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1545:  auto* db = reinterpret_cast<rocksdb::DB*>(db_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1546:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1547:  return rocksdb_iterator_helper(db, rocksdb::ReadOptions(),
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1559:  auto* db = reinterpret_cast<rocksdb::DB*>(db_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1560:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1561:  auto& read_options = *reinterpret_cast<rocksdb::ReadOptions*>(
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1575:  auto* db = reinterpret_cast<rocksdb::DB*>(db_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1576:  auto& read_options = *reinterpret_cast<rocksdb::ReadOptions*>(
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1579:  std::vector<rocksdb::ColumnFamilyHandle*> cf_handles;
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1590:          reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcfh[i]);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1597:  std::vector<rocksdb::Iterator*> iterators;
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1598:  rocksdb::Status s = db->NewIterators(read_options,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1608:    for (std::vector<rocksdb::Iterator*>::size_type i = 0;
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1621:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1633:  auto* db_handle = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1646:  rocksdb::ColumnFamilyHandle* handle;
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1648:  std::string column_name = rocksdb::JniUtil::byteString<std::string>(env,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1657:  auto* db_handle = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1659:      reinterpret_cast<rocksdb::ColumnFamilyOptions*>(jcolumn_options);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1661:  rocksdb::Status s = db_handle->CreateColumnFamily(
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1668:  rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1679:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1680:  auto* db_handle = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1681:  rocksdb::Status s = db_handle->DropColumnFamily(cf_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1683:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1693:  auto* db = reinterpret_cast<rocksdb::DB*>(db_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1694:  const rocksdb::Snapshot* snapshot = db->GetSnapshot();
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1704:  auto* db = reinterpret_cast<rocksdb::DB*>(db_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1705:  auto* snapshot = reinterpret_cast<rocksdb::Snapshot*>(snapshot_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1722:  rocksdb::Slice property_slice(property, jproperty_len);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1724:  auto *db = reinterpret_cast<rocksdb::DB*>(db_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1733:  rocksdb::RocksDBExceptionJni::ThrowNew(env, rocksdb::Status::NotFound());
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1750:  rocksdb::Slice property_slice(property, jproperty_len);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1752:  auto* db = reinterpret_cast<rocksdb::DB*>(db_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1753:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1762:  rocksdb::RocksDBExceptionJni::ThrowNew(env, rocksdb::Status::NotFound());
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1779:  rocksdb::Slice property_slice(property, jproperty_len);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1781:  auto* db = reinterpret_cast<rocksdb::DB*>(db_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1790:  rocksdb::RocksDBExceptionJni::ThrowNew(env, rocksdb::Status::NotFound());
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1807:  rocksdb::Slice property_slice(property, jproperty_len);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1809:  auto* db = reinterpret_cast<rocksdb::DB*>(db_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1810:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1819:  rocksdb::RocksDBExceptionJni::ThrowNew(env, rocksdb::Status::NotFound());
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1824:// rocksdb::DB::Flush
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1827:    JNIEnv* env, rocksdb::DB* db, const rocksdb::FlushOptions& flush_options,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1828:  rocksdb::ColumnFamilyHandle* column_family_handle) {
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1829:  rocksdb::Status s;
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1836:      rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1848:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1850:      reinterpret_cast<rocksdb::FlushOptions*>(jflush_options);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1862:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1864:      reinterpret_cast<rocksdb::FlushOptions*>(jflush_options);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1865:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1870:// rocksdb::DB::CompactRange - Full
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1872:void rocksdb_compactrange_helper(JNIEnv* env, rocksdb::DB* db,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1873:    rocksdb::ColumnFamilyHandle* cf_handle, jboolean jreduce_level,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1876:  rocksdb::Status s;
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1877:  rocksdb::CompactRangeOptions compact_options;
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1891:  rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1902:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1916:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1917:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1923:// rocksdb::DB::CompactRange - Range
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1929:bool rocksdb_compactrange_helper(JNIEnv* env, rocksdb::DB* db,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1930:    rocksdb::ColumnFamilyHandle* cf_handle, jbyteArray jbegin, jint jbegin_len,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1947:  const rocksdb::Slice begin_slice(reinterpret_cast<char*>(begin), jbegin_len);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1948:  const rocksdb::Slice end_slice(reinterpret_cast<char*>(end), jend_len);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1950:  rocksdb::Status s;
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1951:  rocksdb::CompactRangeOptions compact_options;
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1969:  rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1982:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1997:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:1998:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2004:// rocksdb::DB::PauseBackgroundWork
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2013:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2016:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2021:// rocksdb::DB::ContinueBackgroundWork
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2030:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2033:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2038:// rocksdb::DB::GetLatestSequenceNumber
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2047:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2052:// rocksdb::DB enable/disable file deletions
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2061:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2062:  rocksdb::Status s = db->DisableFileDeletions();
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2064:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2075:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2076:  rocksdb::Status s = db->EnableFileDeletions(jforce);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2078:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2083:// rocksdb::DB::GetUpdatesSince
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2092:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2093:  rocksdb::SequenceNumber sequence_number =
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2094:      static_cast<rocksdb::SequenceNumber>(jsequence_number);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2095:  std::unique_ptr<rocksdb::TransactionLogIterator> iter;
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2096:  rocksdb::Status s = db->GetUpdatesSince(sequence_number, &iter);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2101:  rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2161:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2162:  auto* cf_handle = reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2167:// rocksdb::DB::IngestExternalFile
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2180:      rocksdb::JniUtil::copyStrings(env, jfile_path_list, jfile_path_list_len,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2187:  auto* db = reinterpret_cast<rocksdb::DB*>(jdb_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2189:      reinterpret_cast<rocksdb::ColumnFamilyHandle*>(jcf_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2191:      reinterpret_cast<rocksdb::IngestExternalFileOptions*>(
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2193:  rocksdb::Status s =
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2196:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2213:  auto* options = reinterpret_cast<rocksdb::Options*>(joptions_handle);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2215:    rocksdb::RocksDBExceptionJni::ThrowNew(env,
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2216:        rocksdb::Status::InvalidArgument("Invalid Options."));
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2219:  rocksdb::Status s = rocksdb::DestroyDB(db_path, *options);
./c-deps/rocksdb/java/rocksjni/rocksjni.cc:2223:    rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:7:// calling C++ rocksdb::BackupEngine methods from the Java side.
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:24:  auto* rocks_env = reinterpret_cast<rocksdb::Env*>(env_handle);
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:26:      reinterpret_cast<rocksdb::BackupableDBOptions*>(
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:28:  rocksdb::BackupEngine* backup_engine;
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:29:  auto status = rocksdb::BackupEngine::Open(rocks_env,
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:35:    rocksdb::RocksDBExceptionJni::ThrowNew(env, status);
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:48:  auto* db = reinterpret_cast<rocksdb::DB*>(db_handle);
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:49:  auto* backup_engine = reinterpret_cast<rocksdb::BackupEngine*>(jbe_handle);
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:57:  rocksdb::RocksDBExceptionJni::ThrowNew(env, status);
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:67:  auto* backup_engine = reinterpret_cast<rocksdb::BackupEngine*>(jbe_handle);
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:68:  std::vector<rocksdb::BackupInfo> backup_infos;
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:70:  return rocksdb::BackupInfoListJni::getBackupInfo(env, backup_infos);
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:80:  auto* backup_engine = reinterpret_cast<rocksdb::BackupEngine*>(jbe_handle);
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:81:  std::vector<rocksdb::BackupID> backup_ids;
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:106:  auto* backup_engine = reinterpret_cast<rocksdb::BackupEngine*>(jbe_handle);
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:113:  rocksdb::RocksDBExceptionJni::ThrowNew(env, status);
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:123:  auto* backup_engine = reinterpret_cast<rocksdb::BackupEngine*>(jbe_handle);
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:132:  rocksdb::RocksDBExceptionJni::ThrowNew(env, status);
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:142:  auto* backup_engine = reinterpret_cast<rocksdb::BackupEngine*>(jbe_handle);
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:144:      backup_engine->DeleteBackup(static_cast<rocksdb::BackupID>(jbackup_id));
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:150:  rocksdb::RocksDBExceptionJni::ThrowNew(env, status);
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:161:  auto* backup_engine = reinterpret_cast<rocksdb::BackupEngine*>(jbe_handle);
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:174:      reinterpret_cast<rocksdb::RestoreOptions*>(jrestore_options_handle);
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:177:          static_cast<rocksdb::BackupID>(jbackup_id), db_dir, wal_dir,
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:187:  rocksdb::RocksDBExceptionJni::ThrowNew(env, status);
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:198:  auto* backup_engine = reinterpret_cast<rocksdb::BackupEngine*>(jbe_handle);
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:211:      reinterpret_cast<rocksdb::RestoreOptions*>(jrestore_options_handle);
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:223:  rocksdb::RocksDBExceptionJni::ThrowNew(env, status);
./c-deps/rocksdb/java/rocksjni/backupenginejni.cc:233:  auto* be = reinterpret_cast<rocksdb::BackupEngine*>(jbe_handle);
./c-deps/rocksdb/java/rocksjni/compaction_filter_factory_jnicallback.h:7:// rocksdb::CompactionFilterFactory.
./c-deps/rocksdb/java/rocksjni/compaction_options_universal.cc:7:// rocksdb::CompactionOptionsUniversal.
./c-deps/rocksdb/java/rocksjni/compaction_options_universal.cc:22:  const auto* opt = new rocksdb::CompactionOptionsUniversal();
./c-deps/rocksdb/java/rocksjni/compaction_options_universal.cc:33:  auto* opt = reinterpret_cast<rocksdb::CompactionOptionsUniversal*>(jhandle);
./c-deps/rocksdb/java/rocksjni/compaction_options_universal.cc:44:  auto* opt = reinterpret_cast<rocksdb::CompactionOptionsUniversal*>(jhandle);
./c-deps/rocksdb/java/rocksjni/compaction_options_universal.cc:55:  auto* opt = reinterpret_cast<rocksdb::CompactionOptionsUniversal*>(jhandle);
./c-deps/rocksdb/java/rocksjni/compaction_options_universal.cc:66:  auto* opt = reinterpret_cast<rocksdb::CompactionOptionsUniversal*>(jhandle);
./c-deps/rocksdb/java/rocksjni/compaction_options_universal.cc:77:  auto* opt = reinterpret_cast<rocksdb::CompactionOptionsUniversal*>(jhandle);
./c-deps/rocksdb/java/rocksjni/compaction_options_universal.cc:88:  auto* opt = reinterpret_cast<rocksdb::CompactionOptionsUniversal*>(jhandle);
./c-deps/rocksdb/java/rocksjni/compaction_options_universal.cc:100:  auto* opt = reinterpret_cast<rocksdb::CompactionOptionsUniversal*>(jhandle);
./c-deps/rocksdb/java/rocksjni/compaction_options_universal.cc:112:  auto* opt = reinterpret_cast<rocksdb::CompactionOptionsUniversal*>(jhandle);
./c-deps/rocksdb/java/rocksjni/compaction_options_universal.cc:123:  auto* opt = reinterpret_cast<rocksdb::CompactionOptionsUniversal*>(jhandle);
./c-deps/rocksdb/java/rocksjni/compaction_options_universal.cc:135:  auto* opt = reinterpret_cast<rocksdb::CompactionOptionsUniversal*>(jhandle);
./c-deps/rocksdb/java/rocksjni/compaction_options_universal.cc:146:  auto* opt = reinterpret_cast<rocksdb::CompactionOptionsUniversal*>(jhandle);
./c-deps/rocksdb/java/rocksjni/compaction_options_universal.cc:148:      rocksdb::CompactionStopStyleJni::toCppCompactionStopStyle(
./c-deps/rocksdb/java/rocksjni/compaction_options_universal.cc:159:  auto* opt = reinterpret_cast<rocksdb::CompactionOptionsUniversal*>(jhandle);
./c-deps/rocksdb/java/rocksjni/compaction_options_universal.cc:160:  return rocksdb::CompactionStopStyleJni::toJavaCompactionStopStyle(
./c-deps/rocksdb/java/rocksjni/compaction_options_universal.cc:171:  auto* opt = reinterpret_cast<rocksdb::CompactionOptionsUniversal*>(jhandle);
./c-deps/rocksdb/java/rocksjni/compaction_options_universal.cc:182:  auto* opt = reinterpret_cast<rocksdb::CompactionOptionsUniversal*>(jhandle);
./c-deps/rocksdb/java/rocksjni/compaction_options_universal.cc:193:  delete reinterpret_cast<rocksdb::CompactionOptionsUniversal*>(jhandle);
./c-deps/rocksdb/java/rocksjni/ingest_external_file_options.cc:7:// rocksdb::FilterPolicy.
./c-deps/rocksdb/java/rocksjni/ingest_external_file_options.cc:21:  auto* options = new rocksdb::IngestExternalFileOptions();
./c-deps/rocksdb/java/rocksjni/ingest_external_file_options.cc:34:  auto* options = new rocksdb::IngestExternalFileOptions();
./c-deps/rocksdb/java/rocksjni/ingest_external_file_options.cc:50:      reinterpret_cast<rocksdb::IngestExternalFileOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/ingest_external_file_options.cc:62:      reinterpret_cast<rocksdb::IngestExternalFileOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/ingest_external_file_options.cc:74:      reinterpret_cast<rocksdb::IngestExternalFileOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/ingest_external_file_options.cc:87:      reinterpret_cast<rocksdb::IngestExternalFileOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/ingest_external_file_options.cc:99:      reinterpret_cast<rocksdb::IngestExternalFileOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/ingest_external_file_options.cc:111:      reinterpret_cast<rocksdb::IngestExternalFileOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/ingest_external_file_options.cc:123:      reinterpret_cast<rocksdb::IngestExternalFileOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/ingest_external_file_options.cc:135:      reinterpret_cast<rocksdb::IngestExternalFileOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/ingest_external_file_options.cc:147:      reinterpret_cast<rocksdb::IngestExternalFileOptions*>(jhandle);
./c-deps/rocksdb/java/rocksjni/iterator.cc:7:// calling c++ rocksdb::Iterator methods from Java side.
./c-deps/rocksdb/java/rocksjni/iterator.cc:24:  auto* it = reinterpret_cast<rocksdb::Iterator*>(handle);
./c-deps/rocksdb/java/rocksjni/iterator.cc:36:  return reinterpret_cast<rocksdb::Iterator*>(handle)->Valid();
./c-deps/rocksdb/java/rocksjni/iterator.cc:46:  reinterpret_cast<rocksdb::Iterator*>(handle)->SeekToFirst();
./c-deps/rocksdb/java/rocksjni/iterator.cc:56:  reinterpret_cast<rocksdb::Iterator*>(handle)->SeekToLast();
./c-deps/rocksdb/java/rocksjni/iterator.cc:66:  reinterpret_cast<rocksdb::Iterator*>(handle)->Next();
./c-deps/rocksdb/java/rocksjni/iterator.cc:76:  reinterpret_cast<rocksdb::Iterator*>(handle)->Prev();
./c-deps/rocksdb/java/rocksjni/iterator.cc:93:  rocksdb::Slice target_slice(
./c-deps/rocksdb/java/rocksjni/iterator.cc:96:  auto* it = reinterpret_cast<rocksdb::Iterator*>(handle);
./c-deps/rocksdb/java/rocksjni/iterator.cc:116:  rocksdb::Slice target_slice(
./c-deps/rocksdb/java/rocksjni/iterator.cc:119:  auto* it = reinterpret_cast<rocksdb::Iterator*>(handle);
./c-deps/rocksdb/java/rocksjni/iterator.cc:132:  auto* it = reinterpret_cast<rocksdb::Iterator*>(handle);
./c-deps/rocksdb/java/rocksjni/iterator.cc:133:  rocksdb::Status s = it->status();
./c-deps/rocksdb/java/rocksjni/iterator.cc:139:  rocksdb::RocksDBExceptionJni::ThrowNew(env, s);
./c-deps/rocksdb/java/rocksjni/iterator.cc:149:  auto* it = reinterpret_cast<rocksdb::Iterator*>(handle);
./c-deps/rocksdb/java/rocksjni/iterator.cc:150:  rocksdb::Slice key_slice = it->key();
./c-deps/rocksdb/java/rocksjni/iterator.cc:169:  auto* it = reinterpret_cast<rocksdb::Iterator*>(handle);
./c-deps/rocksdb/java/rocksjni/iterator.cc:170:  rocksdb::Slice value_slice = it->value();
./c-deps/rocksdb/java/src/main/java/org/rocksdb/ColumnFamilyOptions.java:30:   * an {@code rocksdb::DBOptions} in the c++ side.
./c-deps/rocksdb/java/src/main/java/org/rocksdb/Options.java:32:   * an {@code rocksdb::Options} in the c++ side.
./c-deps/rocksdb/java/src/main/java/org/rocksdb/DBOptions.java:28:   * an {@code rocksdb::DBOptions} in the c++ side.
./c-deps/rocksdb/java/src/main/java/org/rocksdb/TtlDB.java:170:   * <p>Internally, TtlDB owns the {@code rocksdb::DB} pointer
./c-deps/rocksdb/java/src/main/java/org/rocksdb/TtlDB.java:173:   * c++ {@code rocksdb::TtlDB} and should be transparent to
./c-deps/rocksdb/java/src/main/java/org/rocksdb/AbstractCompactionFilterFactory.java:65:   * as disposing of a rocksdb::AbstractCompactionFilterFactory requires
./c-deps/rocksdb/java/src/main/java/org/rocksdb/Logger.java:113:   * as disposing of a rocksdb::LoggerJniCallback requires
./c-deps/rocksdb/java/src/main/java/org/rocksdb/ReadOptions.java:429:  // would also reap its associated rocksdb::Slice native object since it's
./c-deps/libroach/keys.h:8:const rocksdb::Slice kLocalMax("\x02", 1);
./c-deps/libroach/keys.h:9:const rocksdb::Slice kMeta2KeyMax("\x03\xff\xff", 3);
./c-deps/libroach/keys.h:11:const std::vector<std::pair<rocksdb::Slice, rocksdb::Slice> > kSortedNoSplitSpans = {
./c-deps/libroach/keys.h:12:  std::make_pair(rocksdb::Slice("\x88", 1), rocksdb::Slice("\x93", 1)),
./c-deps/libroach/keys.h:13:  std::make_pair(rocksdb::Slice("\x04\x00\x6c\x69\x76\x65\x6e\x65\x73\x73\x2d", 11), rocksdb::Slice("\x04\x00\x6c\x69\x76\x65\x6e\x65\x73\x73\x2e", 11)),
./c-deps/libroach/keys.h:14:  std::make_pair(rocksdb::Slice("\x03\xff\xff", 3), rocksdb::Slice("\x04", 1)),
./c-deps/libroach/keys.h:15:  std::make_pair(rocksdb::Slice("", 0), rocksdb::Slice("\x03", 1)),
./c-deps/libroach/keys.h:17:const std::vector<std::pair<rocksdb::Slice, rocksdb::Slice> > kSortedNoSplitSpansWithoutMeta2Splits = {
./c-deps/libroach/keys.h:18:  std::make_pair(rocksdb::Slice("\x88", 1), rocksdb::Slice("\x93", 1)),
./c-deps/libroach/keys.h:19:  std::make_pair(rocksdb::Slice("\x04\x00\x6c\x69\x76\x65\x6e\x65\x73\x73\x2d", 11), rocksdb::Slice("\x04\x00\x6c\x69\x76\x65\x6e\x65\x73\x73\x2e", 11)),
./c-deps/libroach/keys.h:20:  std::make_pair(rocksdb::Slice("", 0), rocksdb::Slice("\x04", 1)),
./c-deps/libroach/status.h:25:inline DBStatus ToDBStatus(const rocksdb::Status& status) {
./c-deps/libroach/snapshot.cc:29:  rocksdb::ReadOptions read_opts;
./c-deps/libroach/snapshot.cc:45:DBIterator* DBSnapshot::NewIter(rocksdb::ReadOptions* read_opts) {
./c-deps/libroach/chunked_buffer.h:28:  void Put(const rocksdb::Slice& key, const rocksdb::Slice& value);
./c-deps/libroach/options.h:22:// DBMakeOptions constructs a rocksdb::Options given a DBOptions.
./c-deps/libroach/options.h:23:rocksdb::Options DBMakeOptions(DBOptions db_opts);
./c-deps/libroach/db.cc:42:__attribute__((weak)) rocksdb::Status DBOpenHook(const std::string& db_dir, const DBOptions opts) {
./c-deps/libroach/db.cc:44:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/db.cc:47:  return rocksdb::Status::OK();
./c-deps/libroach/db.cc:50:DBKey ToDBKey(const rocksdb::Slice& s) {
./c-deps/libroach/db.cc:53:  rocksdb::Slice tmp;
./c-deps/libroach/db.cc:70:    rocksdb::Slice key;
./c-deps/libroach/db.cc:83:  rocksdb::Options options = DBMakeOptions(db_opts);
./c-deps/libroach/db.cc:87:    // TODO(peter): Investigate using rocksdb::LoadOptionsFromFile if
./c-deps/libroach/db.cc:94:    rocksdb::Status status = rocksdb::GetOptionsFromString(options, additional_options, &options);
./c-deps/libroach/db.cc:115:  std::unique_ptr<rocksdb::Env> memenv;
./c-deps/libroach/db.cc:117:    memenv.reset(rocksdb::NewMemEnv(rocksdb::Env::Default()));
./c-deps/libroach/db.cc:121:  std::unique_ptr<rocksdb::Env> switching_env;
./c-deps/libroach/db.cc:127:  rocksdb::DB* db_ptr;
./c-deps/libroach/db.cc:129:  rocksdb::Status status;
./c-deps/libroach/db.cc:131:    status = rocksdb::DB::OpenForReadOnly(options, db_dir, &db_ptr);
./c-deps/libroach/db.cc:133:    status = rocksdb::DB::Open(options, db_dir, &db_ptr);
./c-deps/libroach/db.cc:146:  rocksdb::Options options;
./c-deps/libroach/db.cc:147:  return ToDBStatus(rocksdb::DestroyDB(ToString(dir), options));
./c-deps/libroach/db.cc:159:  rocksdb::FlushOptions options;
./c-deps/libroach/db.cc:176:  rocksdb::WriteBatch batch;
./c-deps/libroach/db.cc:178:  rocksdb::WriteOptions options;
./c-deps/libroach/db.cc:191:  rocksdb::CompactRangeOptions options;
./c-deps/libroach/db.cc:198:    options.bottommost_level_compaction = rocksdb::BottommostLevelCompaction::kForce;
./c-deps/libroach/db.cc:212:  std::vector<rocksdb::LiveFileMetaData> all_metadata;
./c-deps/libroach/db.cc:213:  std::vector<rocksdb::LiveFileMetaData> metadata;
./c-deps/libroach/db.cc:240:    const rocksdb::Slice start_slice(start_key);
./c-deps/libroach/db.cc:241:    const rocksdb::Slice end_slice(end_key);
./c-deps/libroach/db.cc:273:  std::vector<rocksdb::SstFileMetaData> sst;
./c-deps/libroach/db.cc:282:            [](const rocksdb::SstFileMetaData& a, const rocksdb::SstFileMetaData& b) -> bool {
./c-deps/libroach/db.cc:288:  rocksdb::Slice last;
./c-deps/libroach/db.cc:289:  rocksdb::Slice* last_ptr = nullptr;
./c-deps/libroach/db.cc:297:    rocksdb::Slice cur(sst[i].largestkey);
./c-deps/libroach/db.cc:298:    rocksdb::Status status = db->rep->CompactRange(options, last_ptr, &cur);
./c-deps/libroach/db.cc:316:  const rocksdb::Range r(start_key, end_key);
./c-deps/libroach/db.cc:317:  const uint8_t flags = rocksdb::DB::SizeApproximationFlags::INCLUDE_FILES;
./c-deps/libroach/db.cc:334:  rocksdb::Iterator* const iter_rep = iter->rep.get();
./c-deps/libroach/db.cc:374:  rocksdb::ReadOptions opts;
./c-deps/libroach/db.cc:383:  rocksdb::ReadOptions opts;
./c-deps/libroach/db.cc:385:  opts.table_filter = [min, max](const rocksdb::TableProperties& props) {
./c-deps/libroach/db.cc:424:    rocksdb::Slice key;
./c-deps/libroach/db.cc:425:    rocksdb::Slice ts;
./c-deps/libroach/db.cc:438:    rocksdb::Slice key;
./c-deps/libroach/db.cc:439:    rocksdb::Slice ts;
./c-deps/libroach/db.cc:466:    rocksdb::Slice key;
./c-deps/libroach/db.cc:467:    rocksdb::Slice ts;
./c-deps/libroach/db.cc:476:    rocksdb::Slice key;
./c-deps/libroach/db.cc:477:    rocksdb::Slice ts;
./c-deps/libroach/db.cc:530:  rocksdb::IngestExternalFileOptions ingest_options;
./c-deps/libroach/db.cc:548:  rocksdb::Status status = db->rep->IngestExternalFile(paths, ingest_options);
./c-deps/libroach/db.cc:557:  std::unique_ptr<rocksdb::Options> options;
./c-deps/libroach/db.cc:558:  std::unique_ptr<rocksdb::Env> memenv;
./c-deps/libroach/db.cc:559:  rocksdb::SstFileWriter rep;
./c-deps/libroach/db.cc:561:  DBSstFileWriter(rocksdb::Options* o, rocksdb::Env* m)
./c-deps/libroach/db.cc:562:      : options(o), memenv(m), rep(rocksdb::EnvOptions(), *o, o->comparator) {}
./c-deps/libroach/db.cc:571:  rocksdb::BlockBasedTableOptions table_options;
./c-deps/libroach/db.cc:579:  table_options.checksum = rocksdb::kCRC32c;
./c-deps/libroach/db.cc:581:  rocksdb::Options* options = new rocksdb::Options();
./c-deps/libroach/db.cc:583:  options->table_factory.reset(rocksdb::NewBlockBasedTableFactory(table_options));
./c-deps/libroach/db.cc:585:  std::unique_ptr<rocksdb::Env> memenv;
./c-deps/libroach/db.cc:586:  memenv.reset(rocksdb::NewMemEnv(rocksdb::Env::Default()));
./c-deps/libroach/db.cc:593:  rocksdb::Status status = fw->rep.Open("sst");
./c-deps/libroach/db.cc:601:  rocksdb::Status status = fw->rep.Put(EncodeKey(key), ToSlice(val));
./c-deps/libroach/db.cc:609:  rocksdb::Status status = fw->rep.Finish();
./c-deps/libroach/db.cc:620:  const rocksdb::EnvOptions soptions;
./c-deps/libroach/db.cc:621:  rocksdb::unique_ptr<rocksdb::SequentialFile> sst;
./c-deps/libroach/db.cc:631:  rocksdb::Slice sst_contents;
./c-deps/libroach/db.cc:660:      rocksdb::Env::Default()->LockFile(ToString(filename), (rocksdb::FileLock**)lock));
./c-deps/libroach/db.cc:664:  return ToDBStatus(rocksdb::Env::Default()->UnlockFile((rocksdb::FileLock*)lock));
./c-deps/libroach/merge.h:26:                                    bool full_merge, rocksdb::Logger* logger);
./c-deps/libroach/merge.h:28:rocksdb::MergeOperator* NewMergeOperator();
./c-deps/libroach/db.h:27:rocksdb::Status DBOpenHook(const std::string& db_dir, const DBOptions opts);
./c-deps/libroach/db.h:29:// ToDBSlice returns a DBSlice from a rocksdb::Slice
./c-deps/libroach/db.h:30:inline DBSlice ToDBSlice(const rocksdb::Slice& s) {
./c-deps/libroach/db.h:44:// ToDBString converts a rocksdb::Slice to a DBString.
./c-deps/libroach/db.h:45:inline DBString ToDBString(const rocksdb::Slice& s) {
./c-deps/libroach/db.h:54:DBKey ToDBKey(const rocksdb::Slice& s);
./c-deps/libroach/db.h:60:// ToSlice converts a DBSlice/DBString to a rocksdb::Slice.
./c-deps/libroach/db.h:61:inline rocksdb::Slice ToSlice(DBSlice s) { return rocksdb::Slice(s.data, s.len); }
./c-deps/libroach/db.h:62:inline rocksdb::Slice ToSlice(DBString s) { return rocksdb::Slice(s.data, s.len); }
./c-deps/libroach/db.h:71:MVCCStatsResult MVCCComputeStatsInternal(::rocksdb::Iterator* const iter_rep, DBKey start,
./c-deps/libroach/chunked_buffer.cc:22:void chunkedBuffer::Put(const rocksdb::Slice& key, const rocksdb::Slice& value) {
./c-deps/libroach/snapshot.h:24:  const rocksdb::Snapshot* snapshot;
./c-deps/libroach/snapshot.h:37:  virtual DBIterator* NewIter(rocksdb::ReadOptions*);
./c-deps/libroach/batch.cc:40:DBStatus ProcessDeltaKey(Getter* base, rocksdb::WBWIIterator* delta, rocksdb::Slice key,
./c-deps/libroach/batch.cc:50:    rocksdb::WriteEntry entry = delta->Entry();
./c-deps/libroach/batch.cc:52:    case rocksdb::kPutRecord:
./c-deps/libroach/batch.cc:58:    case rocksdb::kMergeRecord: {
./c-deps/libroach/batch.cc:89:    case rocksdb::kDeleteRecord:
./c-deps/libroach/batch.cc:113:class BaseDeltaIterator : public rocksdb::Iterator {
./c-deps/libroach/batch.cc:115:  BaseDeltaIterator(rocksdb::Iterator* base_iterator, rocksdb::WBWIIterator* delta_iterator,
./c-deps/libroach/batch.cc:119:        status_(rocksdb::Status::OK()),
./c-deps/libroach/batch.cc:147:  void Seek(const rocksdb::Slice& k) override {
./c-deps/libroach/batch.cc:169:      status_ = rocksdb::Status::NotSupported("Next() on invalid iterator");
./c-deps/libroach/batch.cc:174:  void Prev() override { status_ = rocksdb::Status::NotSupported("Prev() not supported"); }
./c-deps/libroach/batch.cc:176:  rocksdb::Slice key() const override {
./c-deps/libroach/batch.cc:180:  rocksdb::Slice value() const override {
./c-deps/libroach/batch.cc:187:  rocksdb::Status status() const override {
./c-deps/libroach/batch.cc:245:      status_ = rocksdb::Status::Corruption("unable to merge records");
./c-deps/libroach/batch.cc:282:  bool CheckPrefix(const rocksdb::Slice key) { return KeyPrefix(key) != prefix_start_key_; }
./c-deps/libroach/batch.cc:375:  mutable rocksdb::Status status_;
./c-deps/libroach/batch.cc:379:  // The base iterator, presumably obtained from a rocksdb::DB.
./c-deps/libroach/batch.cc:380:  std::unique_ptr<rocksdb::Iterator> base_iterator_;
./c-deps/libroach/batch.cc:381:  // The delta iterator obtained from a rocksdb::WriteBatchWithIndex.
./c-deps/libroach/batch.cc:382:  std::unique_ptr<rocksdb::WBWIIterator> delta_iterator_;
./c-deps/libroach/batch.cc:392:  rocksdb::Slice prefix_start_key_;
./c-deps/libroach/batch.cc:395:class DBBatchInserter : public rocksdb::WriteBatch::Handler {
./c-deps/libroach/batch.cc:397:  DBBatchInserter(rocksdb::WriteBatchBase* batch) : batch_(batch) {}
./c-deps/libroach/batch.cc:399:  virtual void Put(const rocksdb::Slice& key, const rocksdb::Slice& value) {
./c-deps/libroach/batch.cc:402:  virtual void Delete(const rocksdb::Slice& key) { batch_->Delete(key); }
./c-deps/libroach/batch.cc:403:  virtual void Merge(const rocksdb::Slice& key, const rocksdb::Slice& value) {
./c-deps/libroach/batch.cc:406:  virtual rocksdb::Status DeleteRangeCF(uint32_t column_family_id, const rocksdb::Slice& begin_key,
./c-deps/libroach/batch.cc:407:                                        const rocksdb::Slice& end_key) {
./c-deps/libroach/batch.cc:410:      return rocksdb::Status::OK();
./c-deps/libroach/batch.cc:412:    return rocksdb::Status::InvalidArgument("DeleteRangeCF not implemented");
./c-deps/libroach/batch.cc:414:  virtual void LogData(const rocksdb::Slice& blob) { batch_->PutLogData(blob); }
./c-deps/libroach/batch.cc:417:  rocksdb::WriteBatchBase* const batch_;
./c-deps/libroach/batch.cc:440:  rocksdb::ReadOptions read_opts;
./c-deps/libroach/batch.cc:450:  std::unique_ptr<rocksdb::WBWIIterator> iter(batch.NewIterator());
./c-deps/libroach/batch.cc:472:  rocksdb::WriteOptions options;
./c-deps/libroach/batch.cc:484:  rocksdb::WriteBatch batch(ToString(repr));
./c-deps/libroach/batch.cc:485:  rocksdb::Status status = batch.Iterate(&inserter);
./c-deps/libroach/batch.cc:495:DBIterator* DBBatch::NewIter(rocksdb::ReadOptions* read_opts) {
./c-deps/libroach/batch.cc:502:  rocksdb::Iterator* base = rep->NewIterator(*read_opts);
./c-deps/libroach/batch.cc:503:  rocksdb::WBWIIterator* delta = batch.NewIterator();
./c-deps/libroach/batch.cc:548:  rocksdb::WriteOptions options;
./c-deps/libroach/batch.cc:560:  rocksdb::WriteBatch batch(ToString(repr));
./c-deps/libroach/batch.cc:561:  rocksdb::Status status = batch.Iterate(&inserter);
./c-deps/libroach/batch.cc:571:DBIterator* DBWriteOnlyBatch::NewIter(rocksdb::ReadOptions* read_opts) { return NULL; }
./c-deps/libroach/batch.cc:581:rocksdb::WriteBatch::Handler* GetDBBatchInserter(::rocksdb::WriteBatchBase* batch) {
./c-deps/libroach/engine.h:26:  rocksdb::DB* const rep;
./c-deps/libroach/engine.h:29:  DBEngine(rocksdb::DB* r, std::atomic<int64_t>* iters) : rep(r), iters(iters) {}
./c-deps/libroach/engine.h:41:  virtual DBIterator* NewIter(rocksdb::ReadOptions*) = 0;
./c-deps/libroach/engine.h:53:  std::unique_ptr<rocksdb::Env> switching_env;
./c-deps/libroach/engine.h:54:  std::unique_ptr<rocksdb::Env> memenv;
./c-deps/libroach/engine.h:55:  std::unique_ptr<rocksdb::DB> rep_deleter;
./c-deps/libroach/engine.h:56:  std::shared_ptr<rocksdb::Cache> block_cache;
./c-deps/libroach/engine.h:63:  DBImpl(rocksdb::DB* r, rocksdb::Env* m, std::shared_ptr<rocksdb::Cache> bc,
./c-deps/libroach/engine.h:64:         std::shared_ptr<DBEventListener> event_listener, rocksdb::Env* s_env);
./c-deps/libroach/engine.h:76:  virtual DBIterator* NewIter(rocksdb::ReadOptions*);
./c-deps/libroach/testutils.cc:24:rocksdb::Status compareErrorMessage(rocksdb::Status status, const char* err_msg) {
./c-deps/libroach/testutils.cc:28:      return rocksdb::Status::OK();
./c-deps/libroach/testutils.cc:30:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/testutils.cc:36:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/testutils.cc:41:    return rocksdb::Status::OK();
./c-deps/libroach/testutils.cc:43:  return rocksdb::Status::InvalidArgument(
./c-deps/libroach/testutils.cc:47:rocksdb::Status compareErrorMessage(rocksdb::Status status, std::string err_msg) {
./c-deps/libroach/encoding.h:35:bool DecodeUint32(rocksdb::Slice* buf, uint32_t* value);
./c-deps/libroach/encoding.h:39:bool DecodeUint64(rocksdb::Slice* buf, uint64_t* value);
./c-deps/libroach/encoding.h:49:std::string EncodeKey(const rocksdb::Slice& key, int64_t wall_time, int32_t logical);
./c-deps/libroach/encoding.h:59:WARN_UNUSED_RESULT bool SplitKey(rocksdb::Slice buf, rocksdb::Slice* key,
./c-deps/libroach/encoding.h:60:                                 rocksdb::Slice* timestamp);
./c-deps/libroach/encoding.h:64:WARN_UNUSED_RESULT bool DecodeTimestamp(rocksdb::Slice* timestamp, int64_t* wall_time,
./c-deps/libroach/encoding.h:66:WARN_UNUSED_RESULT bool DecodeTimestamp(rocksdb::Slice buf,
./c-deps/libroach/encoding.h:73:WARN_UNUSED_RESULT bool DecodeKey(rocksdb::Slice buf, rocksdb::Slice* key, int64_t* wall_time,
./c-deps/libroach/encoding.h:75:WARN_UNUSED_RESULT inline bool DecodeKey(rocksdb::Slice buf, rocksdb::Slice* key, DBTimestamp* ts) {
./c-deps/libroach/encoding.h:82:rocksdb::Slice KeyPrefix(const rocksdb::Slice& src);
./c-deps/libroach/env_switching.h:20:rocksdb::Env* NewSwitchingEnv(rocksdb::Env* base_env, std::shared_ptr<rocksdb::Logger> logger);
./c-deps/libroach/iterator.h:29:  std::unique_ptr<rocksdb::Iterator> rep;
./c-deps/libroach/iterator.h:31:  std::unique_ptr<rocksdb::WriteBatch> intents;
./c-deps/libroach/encoding.cc:39:bool DecodeUint32(rocksdb::Slice* buf, uint32_t* value) {
./c-deps/libroach/encoding.cc:50:bool DecodeUint64(rocksdb::Slice* buf, uint64_t* value) {
./c-deps/libroach/encoding.cc:80:std::string EncodeKey(const rocksdb::Slice& key, int64_t wall_time, int32_t logical) {
./c-deps/libroach/encoding.cc:100:WARN_UNUSED_RESULT bool SplitKey(rocksdb::Slice buf, rocksdb::Slice* key,
./c-deps/libroach/encoding.cc:101:                                 rocksdb::Slice* timestamp) {
./c-deps/libroach/encoding.cc:109:  *key = rocksdb::Slice(buf.data(), buf.size() - ts_size - 1);
./c-deps/libroach/encoding.cc:110:  *timestamp = rocksdb::Slice(key->data() + key->size(), ts_size);
./c-deps/libroach/encoding.cc:114:WARN_UNUSED_RESULT bool DecodeTimestamp(rocksdb::Slice* timestamp, int64_t* wall_time,
./c-deps/libroach/encoding.cc:133:WARN_UNUSED_RESULT bool DecodeTimestamp(rocksdb::Slice buf,
./c-deps/libroach/encoding.cc:145:WARN_UNUSED_RESULT bool DecodeKey(rocksdb::Slice buf, rocksdb::Slice* key, int64_t* wall_time,
./c-deps/libroach/encoding.cc:149:  rocksdb::Slice timestamp;
./c-deps/libroach/encoding.cc:162:rocksdb::Slice KeyPrefix(const rocksdb::Slice& src) {
./c-deps/libroach/encoding.cc:163:  rocksdb::Slice key;
./c-deps/libroach/encoding.cc:164:  rocksdb::Slice ts;
./c-deps/libroach/encoding.cc:176:  return rocksdb::Slice(key.data(), key.size() + 1);
./c-deps/libroach/getter.cc:32:  rocksdb::Status s = rep->Get(options, key, &tmp);
./c-deps/libroach/ccl/key_manager.cc:18:rocksdb::Status KeyFromFile(rocksdb::Env* env, const std::string& path,
./c-deps/libroach/ccl/key_manager.cc:33:    return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager.cc:38:  status = rocksdb::ReadFileToString(env, path, &contents);
./c-deps/libroach/ccl/key_manager.cc:56:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/ccl/key_manager.cc:68:  return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager.cc:71:rocksdb::Status KeyFromKeyInfo(rocksdb::Env* env, const enginepbccl::KeyInfo& store_info,
./c-deps/libroach/ccl/key_manager.cc:89:    return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager.cc:105:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/ccl/key_manager.cc:113:  return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager.cc:116:rocksdb::Status ValidateRegistry(enginepbccl::DataKeysRegistry* registry) {
./c-deps/libroach/ccl/key_manager.cc:120:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/ccl/key_manager.cc:126:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/ccl/key_manager.cc:130:  return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager.cc:135:rocksdb::Status GenerateDataKey(rocksdb::Env* env, enginepbccl::DataKeysRegistry* reg) {
./c-deps/libroach/ccl/key_manager.cc:152:  return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager.cc:160:rocksdb::Status FileKeyManager::LoadKeys() {
./c-deps/libroach/ccl/key_manager.cc:162:  rocksdb::Status status = KeyManagerUtils::KeyFromFile(env_, active_key_path_, active.get());
./c-deps/libroach/ccl/key_manager.cc:175:  return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager.cc:194:DataKeyManager::DataKeyManager(rocksdb::Env* env, const std::string& db_dir,
./c-deps/libroach/ccl/key_manager.cc:200:rocksdb::Status DataKeyManager::LoadKeysHelper(enginepbccl::DataKeysRegistry* registry) {
./c-deps/libroach/ccl/key_manager.cc:201:  rocksdb::Status status = env_->FileExists(registry_path_);
./c-deps/libroach/ccl/key_manager.cc:204:    return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager.cc:210:  status = rocksdb::ReadFileToString(env_, registry_path_, &contents);
./c-deps/libroach/ccl/key_manager.cc:216:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/ccl/key_manager.cc:219:  return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager.cc:222:rocksdb::Status DataKeyManager::LoadKeys() {
./c-deps/libroach/ccl/key_manager.cc:243:  return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager.cc:276:rocksdb::Status DataKeyManager::MaybeRotateKeyLocked() {
./c-deps/libroach/ccl/key_manager.cc:280:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/ccl/key_manager.cc:289:    return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager.cc:299:    return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager.cc:315:rocksdb::Status
./c-deps/libroach/ccl/key_manager.cc:330:      return rocksdb::Status::InvalidArgument(fmt::StringPrintf(
./c-deps/libroach/ccl/key_manager.cc:359:rocksdb::Status
./c-deps/libroach/ccl/key_manager.cc:370:    return rocksdb::Status::InvalidArgument("failed to serialize key registry");
./c-deps/libroach/ccl/key_manager.cc:381:  return rocksdb::Status::OK();
./c-deps/libroach/ccl/db.cc:29:rocksdb::Status DBOpenHook(const std::string& db_dir, const DBOptions db_opts) {
./c-deps/libroach/ccl/db.cc:32:    return rocksdb::Status::OK();
./c-deps/libroach/ccl/db.cc:37:    return rocksdb::Status::InvalidArgument("failed to parse extra options");
./c-deps/libroach/ccl/db.cc:41:    return rocksdb::Status::InvalidArgument("unknown encryption key source");
./c-deps/libroach/ccl/db.cc:51:      rocksdb::Env::Default(), opts.key_files().current_key(), opts.key_files().old_key()));
./c-deps/libroach/ccl/db.cc:52:  rocksdb::Status status = store_key_manager->LoadKeys();
./c-deps/libroach/ccl/db.cc:59:      new DataKeyManager(rocksdb::Env::Default(), db_dir, opts.data_key_rotation_period()));
./c-deps/libroach/ccl/db.cc:73:  return rocksdb::Status::InvalidArgument("encryption is not supported");
./c-deps/libroach/ccl/db.cc:85:  rocksdb::WriteBatchWithIndex batch(&kComparator, 0, true);
./c-deps/libroach/ccl/db.cc:86:  rocksdb::WriteBatch b(ToString(repr));
./c-deps/libroach/ccl/db.cc:87:  std::unique_ptr<rocksdb::WriteBatch::Handler> inserter(GetDBBatchInserter(&batch));
./c-deps/libroach/ccl/db.cc:88:  rocksdb::Status status = b.Iterate(inserter.get());
./c-deps/libroach/ccl/db.cc:92:  std::unique_ptr<rocksdb::Iterator> iter;
./c-deps/libroach/ccl/db.cc:93:  iter.reset(batch.NewIteratorWithBase(rocksdb::NewEmptyIterator()));
./c-deps/libroach/ccl/key_manager.h:31:rocksdb::Status KeyFromFile(rocksdb::Env* env, const std::string& path,
./c-deps/libroach/ccl/key_manager.h:35:rocksdb::Status KeyFromKeyInfo(rocksdb::Env* env, const enginepbccl::KeyInfo& store_info,
./c-deps/libroach/ccl/key_manager.h:39:rocksdb::Status ValidateRegistry(enginepbccl::DataKeysRegistry* registry);
./c-deps/libroach/ccl/key_manager.h:42:rocksdb::Status GenerateDataKey(rocksdb::Env* env, enginepbccl::DataKeysRegistry* reg);
./c-deps/libroach/ccl/key_manager.h:86:  explicit FileKeyManager(rocksdb::Env* env, const std::string& active_key_path,
./c-deps/libroach/ccl/key_manager.h:94:  rocksdb::Status LoadKeys();
./c-deps/libroach/ccl/key_manager.h:100:  rocksdb::Env* env_;
./c-deps/libroach/ccl/key_manager.h:114:  explicit DataKeyManager(rocksdb::Env* env, const std::string& db_dir, int64_t rotation_period);
./c-deps/libroach/ccl/key_manager.h:120:  rocksdb::Status LoadKeys();
./c-deps/libroach/ccl/key_manager.h:124:  rocksdb::Status SetActiveStoreKey(std::unique_ptr<enginepbccl::KeyInfo> store_key);
./c-deps/libroach/ccl/key_manager.h:131:  rocksdb::Status LoadKeysHelper(enginepbccl::DataKeysRegistry* registry);
./c-deps/libroach/ccl/key_manager.h:132:  rocksdb::Status PersistRegistryLocked(std::unique_ptr<enginepbccl::DataKeysRegistry> reg);
./c-deps/libroach/ccl/key_manager.h:134:  rocksdb::Status MaybeRotateKeyLocked();
./c-deps/libroach/ccl/key_manager.h:137:  rocksdb::Env* env_;
./c-deps/libroach/ccl/key_manager_test.cc:33:  std::unique_ptr<rocksdb::Env> env(rocksdb::NewMemEnv(rocksdb::Env::Default()));
./c-deps/libroach/ccl/key_manager_test.cc:52:    ASSERT_OK(rocksdb::WriteStringToFile(env.get(), k.contents, k.filename));
./c-deps/libroach/ccl/key_manager_test.cc:136:rocksdb::Status compareNonRandomKeyInfo(const enginepbccl::KeyInfo& actual,
./c-deps/libroach/ccl/key_manager_test.cc:139:    return rocksdb::Status::InvalidArgument(fmt::StringPrintf(
./c-deps/libroach/ccl/key_manager_test.cc:145:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/ccl/key_manager_test.cc:151:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/ccl/key_manager_test.cc:157:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/ccl/key_manager_test.cc:161:  return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager_test.cc:164:rocksdb::Status compareKeyInfo(const enginepbccl::KeyInfo& actual, const testKey& expected) {
./c-deps/libroach/ccl/key_manager_test.cc:171:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/ccl/key_manager_test.cc:175:  return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager_test.cc:178:rocksdb::Status compareKey(const enginepbccl::SecretKey& actual, const testKey& expected) {
./c-deps/libroach/ccl/key_manager_test.cc:180:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/ccl/key_manager_test.cc:198:  std::unique_ptr<rocksdb::Env> env(rocksdb::NewMemEnv(rocksdb::Env::Default()));
./c-deps/libroach/ccl/key_manager_test.cc:201:  ASSERT_OK(rocksdb::WriteStringToFile(env.get(), key_file_128, "16.key"));
./c-deps/libroach/ccl/key_manager_test.cc:202:  ASSERT_OK(rocksdb::WriteStringToFile(env.get(), key_file_192, "24.key"));
./c-deps/libroach/ccl/key_manager_test.cc:203:  ASSERT_OK(rocksdb::WriteStringToFile(env.get(), key_file_256, "32.key"));
./c-deps/libroach/ccl/key_manager_test.cc:264:  std::unique_ptr<rocksdb::Env> env(rocksdb::NewMemEnv(rocksdb::Env::Default()));
./c-deps/libroach/ccl/key_manager_test.cc:276:    ASSERT_OK(rocksdb::WriteStringToFile(env.get(), "blah blah", registry_path));
./c-deps/libroach/ccl/key_manager_test.cc:284:    ASSERT_OK(rocksdb::WriteStringToFile(env.get(), "", registry_path));
./c-deps/libroach/ccl/key_manager_test.cc:295:    ASSERT_OK(rocksdb::WriteStringToFile(env.get(), contents, registry_path));
./c-deps/libroach/ccl/key_manager_test.cc:308:    ASSERT_OK(rocksdb::WriteStringToFile(env.get(), contents, registry_path));
./c-deps/libroach/ccl/key_manager_test.cc:322:    ASSERT_OK(rocksdb::WriteStringToFile(env.get(), contents, registry_path));
./c-deps/libroach/ccl/key_manager_test.cc:344:    ASSERT_OK(rocksdb::WriteStringToFile(env.get(), contents, registry_path));
./c-deps/libroach/ccl/key_manager_test.cc:369:  std::unique_ptr<rocksdb::Env> env(rocksdb::NewMemEnv(rocksdb::Env::Default()));
./c-deps/libroach/ccl/key_manager_test.cc:440:  std::unique_ptr<rocksdb::Env> env(rocksdb::NewMemEnv(rocksdb::Env::Default()));
./c-deps/libroach/ccl/key_manager_test.cc:557:  std::unique_ptr<rocksdb::Env> memenv(rocksdb::NewMemEnv(rocksdb::Env::Default()));
./c-deps/libroach/utils.h:23:rocksdb::Status SafeWriteStringToFile(rocksdb::Env* env, const std::string& filename,
./c-deps/libroach/batch.h:27:  rocksdb::WriteBatchWithIndex batch;
./c-deps/libroach/batch.h:40:  virtual DBIterator* NewIter(rocksdb::ReadOptions*);
./c-deps/libroach/batch.h:48:  rocksdb::WriteBatch batch;
./c-deps/libroach/batch.h:61:  virtual DBIterator* NewIter(rocksdb::ReadOptions*);
./c-deps/libroach/batch.h:69:::rocksdb::WriteBatch::Handler* GetDBBatchInserter(::rocksdb::WriteBatchBase* batch);
./c-deps/libroach/encoding_test.cc:56:    rocksdb::Slice slice(buf);
./c-deps/libroach/encoding_test.cc:65:    rocksdb::Slice slice(buf);
./c-deps/libroach/comparator.cc:20:int DBComparator::Compare(const rocksdb::Slice& a, const rocksdb::Slice& b) const {
./c-deps/libroach/comparator.cc:21:  rocksdb::Slice key_a, key_b;
./c-deps/libroach/comparator.cc:22:  rocksdb::Slice ts_a, ts_b;
./c-deps/libroach/comparator.cc:44:bool DBComparator::Equal(const rocksdb::Slice& a, const rocksdb::Slice& b) const { return a == b; }
./c-deps/libroach/comparator.cc:47:void DBComparator::FindShortestSeparator(std::string* start, const rocksdb::Slice& limit) const {}
./c-deps/libroach/utils.cc:19:rocksdb::Status SafeWriteStringToFile(rocksdb::Env* env, const std::string& filename,
./c-deps/libroach/utils.cc:22:  auto status = rocksdb::WriteStringToFile(env, contents, tmpname, true /* should_sync */);
./c-deps/libroach/eventlistener.h:24:class DBEventListener : public rocksdb::EventListener {
./c-deps/libroach/eventlistener.h:33:  virtual void OnFlushCompleted(rocksdb::DB* db,
./c-deps/libroach/eventlistener.h:34:                                const rocksdb::FlushJobInfo& flush_job_info) override;
./c-deps/libroach/eventlistener.h:35:  virtual void OnCompactionCompleted(rocksdb::DB* db,
./c-deps/libroach/eventlistener.h:36:                                     const rocksdb::CompactionJobInfo& ci) override;
./c-deps/libroach/engine.cc:33:  std::vector<rocksdb::LiveFileMetaData> metadata;
./c-deps/libroach/engine.cc:44:    rocksdb::Slice tmp;
./c-deps/libroach/engine.cc:62:  rocksdb::TablePropertiesCollection props;
./c-deps/libroach/engine.cc:63:  rocksdb::Status status = rep->GetPropertiesOfAllTables(&props);
./c-deps/libroach/engine.cc:78:      if (!DecodeTimestamp(rocksdb::Slice(ts_min->second), sst->mutable_ts_min())) {
./c-deps/libroach/engine.cc:81:            rocksdb::Slice(ts_min->second).ToString(true).c_str(), sst->path().c_str());
./c-deps/libroach/engine.cc:88:      if (!DecodeTimestamp(rocksdb::Slice(ts_max->second), sst->mutable_ts_max())) {
./c-deps/libroach/engine.cc:91:            rocksdb::Slice(ts_max->second).ToString(true).c_str(), sst->path().c_str());
./c-deps/libroach/engine.cc:101:DBImpl::DBImpl(rocksdb::DB* r, rocksdb::Env* m, std::shared_ptr<rocksdb::Cache> bc,
./c-deps/libroach/engine.cc:102:               std::shared_ptr<DBEventListener> event_listener, rocksdb::Env* s_env)
./c-deps/libroach/engine.cc:112:  const rocksdb::Options& opts = rep->GetOptions();
./c-deps/libroach/engine.cc:113:  const std::shared_ptr<rocksdb::Statistics>& s = opts.statistics;
./c-deps/libroach/engine.cc:114:  rocksdb::Info(opts.info_log, "bloom filter utility:    %0.1f%%",
./c-deps/libroach/engine.cc:115:                (100.0 * s->getTickerCount(rocksdb::BLOOM_FILTER_PREFIX_USEFUL)) /
./c-deps/libroach/engine.cc:116:                    s->getTickerCount(rocksdb::BLOOM_FILTER_PREFIX_CHECKED));
./c-deps/libroach/engine.cc:129:  rocksdb::WriteOptions options;
./c-deps/libroach/engine.cc:134:  rocksdb::WriteOptions options;
./c-deps/libroach/engine.cc:139:  rocksdb::ReadOptions read_opts;
./c-deps/libroach/engine.cc:145:  rocksdb::WriteOptions options;
./c-deps/libroach/engine.cc:150:  rocksdb::WriteOptions options;
./c-deps/libroach/engine.cc:158:  rocksdb::WriteBatch batch(ToString(repr));
./c-deps/libroach/engine.cc:159:  rocksdb::WriteOptions options;
./c-deps/libroach/engine.cc:166:DBIterator* DBImpl::NewIter(rocksdb::ReadOptions* read_opts) {
./c-deps/libroach/engine.cc:175:  const rocksdb::Options& opts = rep->GetOptions();
./c-deps/libroach/engine.cc:176:  const std::shared_ptr<rocksdb::Statistics>& s = opts.statistics;
./c-deps/libroach/engine.cc:188:  stats->block_cache_hits = (int64_t)s->getTickerCount(rocksdb::BLOCK_CACHE_HIT);
./c-deps/libroach/engine.cc:189:  stats->block_cache_misses = (int64_t)s->getTickerCount(rocksdb::BLOCK_CACHE_MISS);
./c-deps/libroach/engine.cc:193:      (int64_t)s->getTickerCount(rocksdb::BLOOM_FILTER_PREFIX_CHECKED);
./c-deps/libroach/engine.cc:195:      (int64_t)s->getTickerCount(rocksdb::BLOOM_FILTER_PREFIX_USEFUL);
./c-deps/libroach/engine.cc:212:  rocksdb::Status s;
./c-deps/libroach/engine.cc:214:  const rocksdb::EnvOptions soptions;
./c-deps/libroach/engine.cc:215:  rocksdb::unique_ptr<rocksdb::WritableFile> destfile;
./c-deps/libroach/mvcc.h:67:        intents_(new rocksdb::WriteBatch),
./c-deps/libroach/mvcc.h:119:    // auto pctx = rocksdb::get_perf_context();
./c-deps/libroach/mvcc.h:247:        kvs_->Put(cur_raw_key_, rocksdb::Slice());
./c-deps/libroach/mvcc.h:327:  bool backwardLatestVersion(const rocksdb::Slice& key, int i) {
./c-deps/libroach/mvcc.h:331:      rocksdb::Slice peeked_key;
./c-deps/libroach/mvcc.h:354:  bool prevKey(const rocksdb::Slice& key) {
./c-deps/libroach/mvcc.h:364:      rocksdb::Slice peeked_key;
./c-deps/libroach/mvcc.h:410:  bool advanceKeyAtNewKey(const rocksdb::Slice& key) {
./c-deps/libroach/mvcc.h:421:  bool addAndAdvance(const rocksdb::Slice& value) {
./c-deps/libroach/mvcc.h:499:  bool iterSeek(const rocksdb::Slice& key) {
./c-deps/libroach/mvcc.h:507:  bool iterSeekReverse(const rocksdb::Slice& key) {
./c-deps/libroach/mvcc.h:552:  bool iterPeekPrev(rocksdb::Slice* peeked_key) {
./c-deps/libroach/mvcc.h:563:      cur_raw_key_ = rocksdb::Slice(saved_buf_.data(), cur_raw_key_.size());
./c-deps/libroach/mvcc.h:564:      cur_value_ = rocksdb::Slice(saved_buf_.data() + cur_raw_key_.size(), cur_value_.size());
./c-deps/libroach/mvcc.h:565:      rocksdb::Slice dummy_timestamp;
./c-deps/libroach/mvcc.h:579:        *peeked_key = rocksdb::Slice();
./c-deps/libroach/mvcc.h:585:    rocksdb::Slice dummy_timestamp;
./c-deps/libroach/mvcc.h:602:  rocksdb::Iterator* const iter_rep_;
./c-deps/libroach/mvcc.h:603:  const rocksdb::Slice start_key_;
./c-deps/libroach/mvcc.h:604:  const rocksdb::Slice end_key_;
./c-deps/libroach/mvcc.h:607:  const rocksdb::Slice txn_id_;
./c-deps/libroach/mvcc.h:615:  std::unique_ptr<rocksdb::WriteBatch> intents_;
./c-deps/libroach/mvcc.h:624:  rocksdb::Slice cur_raw_key_;
./c-deps/libroach/mvcc.h:627:  rocksdb::Slice cur_key_;
./c-deps/libroach/mvcc.h:631:  rocksdb::Slice cur_value_;
./c-deps/libroach/options.cc:29:class DBPrefixExtractor : public rocksdb::SliceTransform {
./c-deps/libroach/options.cc:40:  virtual rocksdb::Slice Transform(const rocksdb::Slice& src) const { return KeyPrefix(src); }
./c-deps/libroach/options.cc:42:  virtual bool InDomain(const rocksdb::Slice& src) const { return true; }
./c-deps/libroach/options.cc:44:  virtual bool InRange(const rocksdb::Slice& dst) const { return Transform(dst) == dst; }
./c-deps/libroach/options.cc:47:class DBLogger : public rocksdb::Logger {
./c-deps/libroach/options.cc:104:class TimeBoundTblPropCollector : public rocksdb::TablePropertiesCollector {
./c-deps/libroach/options.cc:108:  rocksdb::Status Finish(rocksdb::UserCollectedProperties* properties) override {
./c-deps/libroach/options.cc:109:    *properties = rocksdb::UserCollectedProperties{
./c-deps/libroach/options.cc:113:    return rocksdb::Status::OK();
./c-deps/libroach/options.cc:116:  rocksdb::Status AddUserKey(const rocksdb::Slice& user_key, const rocksdb::Slice& value,
./c-deps/libroach/options.cc:117:                             rocksdb::EntryType type, rocksdb::SequenceNumber seq,
./c-deps/libroach/options.cc:119:    rocksdb::Slice unused;
./c-deps/libroach/options.cc:120:    rocksdb::Slice ts;
./c-deps/libroach/options.cc:130:    return rocksdb::Status::OK();
./c-deps/libroach/options.cc:133:  virtual rocksdb::UserCollectedProperties GetReadableProperties() const override {
./c-deps/libroach/options.cc:134:    return rocksdb::UserCollectedProperties{};
./c-deps/libroach/options.cc:142:class TimeBoundTblPropCollectorFactory : public rocksdb::TablePropertiesCollectorFactory {
./c-deps/libroach/options.cc:145:  virtual rocksdb::TablePropertiesCollector* CreateTablePropertiesCollector(
./c-deps/libroach/options.cc:146:      rocksdb::TablePropertiesCollectorFactory::Context context) override {
./c-deps/libroach/options.cc:154:rocksdb::Options DBMakeOptions(DBOptions db_opts) {
./c-deps/libroach/options.cc:157:  rocksdb::Options options;
./c-deps/libroach/options.cc:170:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/libroach/options.cc:172:  options.compaction_pri = rocksdb::kMinOverlappingRatio;
./c-deps/libroach/options.cc:204:  std::shared_ptr<rocksdb::TablePropertiesCollectorFactory> time_bound_prop_collector(
./c-deps/libroach/options.cc:267:  rocksdb::BlockBasedTableOptions table_options;
./c-deps/libroach/options.cc:286:  table_options.filter_policy.reset(rocksdb::NewBloomFilterPolicy(10, false /* !block_based */));
./c-deps/libroach/options.cc:298:  options.table_factory.reset(rocksdb::NewBlockBasedTableFactory(table_options));
./c-deps/libroach/testutils.h:24:rocksdb::Status compareErrorMessage(rocksdb::Status status, const char* err_msg);
./c-deps/libroach/testutils.h:25:rocksdb::Status compareErrorMessage(rocksdb::Status status, std::string err_msg);
./c-deps/libroach/testutils.h:27:// FakeTimeEnv is a simple wrapper around a rocksdb::Env that returns a fixed time
./c-deps/libroach/testutils.h:29:class FakeTimeEnv : public rocksdb::EnvWrapper {
./c-deps/libroach/testutils.h:31:  explicit FakeTimeEnv(rocksdb::Env* base_env) : rocksdb::EnvWrapper(base_env), fake_time_(0){};
./c-deps/libroach/testutils.h:32:  virtual rocksdb::Status GetCurrentTime(int64_t* unix_time) override {
./c-deps/libroach/testutils.h:34:    return rocksdb::Status::OK();
./c-deps/libroach/comparator.h:21:class DBComparator : public rocksdb::Comparator {
./c-deps/libroach/comparator.h:27:  virtual int Compare(const rocksdb::Slice& a, const rocksdb::Slice& b) const override;
./c-deps/libroach/comparator.h:28:  virtual bool Equal(const rocksdb::Slice& a, const rocksdb::Slice& b) const override;
./c-deps/libroach/comparator.h:30:                                     const rocksdb::Slice& limit) const override;
./c-deps/libroach/eventlistener.cc:22:void DBEventListener::OnFlushCompleted(rocksdb::DB* db,
./c-deps/libroach/eventlistener.cc:23:                                       const rocksdb::FlushJobInfo& flush_job_info) {
./c-deps/libroach/eventlistener.cc:27:    const rocksdb::TableProperties& p = flush_job_info.table_properties;
./c-deps/libroach/eventlistener.cc:37:void DBEventListener::OnCompactionCompleted(rocksdb::DB* db, const rocksdb::CompactionJobInfo& ci) {
./c-deps/libroach/eventlistener.cc:44:      const rocksdb::TableProperties& p = *iter->second;
./c-deps/libroach/getter.h:35:  rocksdb::Iterator* const base;
./c-deps/libroach/getter.h:37:  IteratorGetter(rocksdb::Iterator* iter) : base(iter) {}
./c-deps/libroach/getter.h:43:// retrieves the value for the supplied key from a rocksdb::DB.
./c-deps/libroach/getter.h:45:  rocksdb::DB* const rep;
./c-deps/libroach/getter.h:46:  rocksdb::ReadOptions const options;
./c-deps/libroach/getter.h:49:  DBGetter(rocksdb::DB* const r, rocksdb::ReadOptions opts, std::string&& k)
./c-deps/libroach/cache.cc:20:  cache->rep = rocksdb::NewLRUCache(size, num_cache_shard_bits);
./c-deps/libroach/ldb.cc:27:class KeyFormatter : public rocksdb::SliceFormatter {
./c-deps/libroach/ldb.cc:28:  std::string Format(const rocksdb::Slice& s) const {
./c-deps/libroach/ldb.cc:39:  rocksdb::Options options = DBMakeOptions(DBOptions());
./c-deps/libroach/ldb.cc:40:  rocksdb::LDBOptions ldb_options;
./c-deps/libroach/ldb.cc:42:  rocksdb::LDBTool tool;
./c-deps/libroach/cache.h:24:  std::shared_ptr<rocksdb::Cache> rep;
./c-deps/libroach/merge.cc:30:rocksdb::Slice ValueDataBytes(const std::string& val) {
./c-deps/libroach/merge.cc:32:    return rocksdb::Slice();
./c-deps/libroach/merge.cc:34:  return rocksdb::Slice(val.data() + kHeaderSize, val.size() - kHeaderSize);
./c-deps/libroach/merge.cc:51:  const rocksdb::Slice d = ValueDataBytes(val);
./c-deps/libroach/merge.cc:85:                                              bool full_merge, rocksdb::Logger* logger) {
./c-deps/libroach/merge.cc:90:    rocksdb::Warn(logger, "left InternalTimeSeriesData could not be parsed from bytes.");
./c-deps/libroach/merge.cc:94:    rocksdb::Warn(logger, "right InternalTimeSeriesData could not be parsed from bytes.");
./c-deps/libroach/merge.cc:101:    rocksdb::Warn(logger, "TimeSeries merge failed due to mismatched start timestamps");
./c-deps/libroach/merge.cc:105:    rocksdb::Warn(logger, "TimeSeries merge failed due to mismatched sample durations.");
./c-deps/libroach/merge.cc:179:WARN_UNUSED_RESULT bool ConsolidateTimeSeriesValue(std::string* val, rocksdb::Logger* logger) {
./c-deps/libroach/merge.cc:183:    rocksdb::Warn(logger, "InternalTimeSeriesData could not be parsed from bytes.");
./c-deps/libroach/merge.cc:218:class DBMergeOperator : public rocksdb::MergeOperator {
./c-deps/libroach/merge.cc:221:  virtual bool FullMerge(const rocksdb::Slice& key, const rocksdb::Slice* existing_value,
./c-deps/libroach/merge.cc:223:                         rocksdb::Logger* logger) const WARN_UNUSED_RESULT {
./c-deps/libroach/merge.cc:244:        rocksdb::Warn(logger, "corrupted existing value");
./c-deps/libroach/merge.cc:256:      rocksdb::Warn(logger, "serialization error");
./c-deps/libroach/merge.cc:262:  virtual bool PartialMergeMulti(const rocksdb::Slice& key,
./c-deps/libroach/merge.cc:263:                                 const std::deque<rocksdb::Slice>& operand_list,
./c-deps/libroach/merge.cc:265:                                 rocksdb::Logger* logger) const WARN_UNUSED_RESULT {
./c-deps/libroach/merge.cc:275:      rocksdb::Warn(logger, "serialization error");
./c-deps/libroach/merge.cc:283:                const rocksdb::Slice& operand, bool full_merge,
./c-deps/libroach/merge.cc:284:                rocksdb::Logger* logger) const WARN_UNUSED_RESULT {
./c-deps/libroach/merge.cc:287:      rocksdb::Warn(logger, "corrupted operand value");
./c-deps/libroach/merge.cc:298:                                    bool full_merge, rocksdb::Logger* logger) {
./c-deps/libroach/merge.cc:301:      rocksdb::Warn(logger, "inconsistent value types for merge (left = bytes, right = ?)");
./c-deps/libroach/merge.cc:315:        rocksdb::Warn(logger, "inconsistent value types for merging time "
./c-deps/libroach/merge.cc:322:      const rocksdb::Slice rdata = ValueDataBytes(right.raw_bytes());
./c-deps/libroach/merge.cc:353:rocksdb::MergeOperator* NewMergeOperator() { return new DBMergeOperator; }
./c-deps/libroach/env_switching.cc:38:class SwitchingEnv : public rocksdb::EnvWrapper {
./c-deps/libroach/env_switching.cc:40:  SwitchingEnv(rocksdb::Env* base_env, std::shared_ptr<rocksdb::Logger> logger)
./c-deps/libroach/env_switching.cc:41:      : rocksdb::EnvWrapper(base_env), logger(logger) {
./c-deps/libroach/env_switching.cc:42:    rocksdb::Info(logger, "initialized switching env");
./c-deps/libroach/env_switching.cc:46:  std::shared_ptr<rocksdb::Logger> logger;
./c-deps/libroach/env_switching.cc:49:rocksdb::Env* NewSwitchingEnv(rocksdb::Env* base_env, std::shared_ptr<rocksdb::Logger> logger) {
./c-deps/libroach/env_switching.cc:50:  return new SwitchingEnv(base_env ? base_env : rocksdb::Env::Default(), logger);
./c-deps/libroach/mvcc.cc:25:bool IsValidSplitKey(const rocksdb::Slice& key, bool allow_meta2_splits) {
./c-deps/libroach/mvcc.cc:71:MVCCStatsResult MVCCComputeStatsInternal(::rocksdb::Iterator* const iter_rep, DBKey start,
./c-deps/libroach/mvcc.cc:90:    const rocksdb::Slice key = iter_rep->key();
./c-deps/libroach/mvcc.cc:91:    const rocksdb::Slice value = iter_rep->value();
./c-deps/libroach/mvcc.cc:93:    rocksdb::Slice decoded_key;
./c-deps/libroach/mvcc.cc:101:    const bool isSys = (rocksdb::Slice(decoded_key).compare(kLocalMax) < 0);
./c-deps/libroach/mvcc.cc:211:  const rocksdb::Slice min_split_key = ToSlice(min_split.key);
./c-deps/libroach/mvcc.cc:220:    const rocksdb::Slice key = iter_rep->key();
./c-deps/libroach/mvcc.cc:221:    rocksdb::Slice decoded_key;
./pkg/storage/engine/enginepb/file_registry.proto:39:  // Env level identifies which rocksdb::Env is responsible for this file.
./pkg/storage/engine/enginepb/file_registry.pb.go:79:	// Env level identifies which rocksdb::Env is responsible for this file.
./pkg/storage/engine/engine.go:308:// 3. rocksdb::DB::GetProperty().
./pkg/keys/gen_cpp_keys.go:68:	fmt.Fprintf(f, "const rocksdb::Slice kLocalMax(%s);\n", rocksdbSlice(keys.LocalMax))
./pkg/keys/gen_cpp_keys.go:69:	fmt.Fprintf(f, "const rocksdb::Slice kMeta2KeyMax(%s);\n", rocksdbSlice(keys.Meta2KeyMax))
./pkg/keys/gen_cpp_keys.go:80:		fmt.Fprintf(f, "const std::vector<std::pair<rocksdb::Slice, rocksdb::Slice> > kSorted%s = {\n", name)
./pkg/keys/gen_cpp_keys.go:82:			fmt.Fprintf(f, "  std::make_pair(rocksdb::Slice(%s), rocksdb::Slice(%s)),\n",
./docs/RFCS/20171220_encryption_at_rest.md:722:* `rocksdb::GetLiveFiles`: retrieve the list of all files in the database
./docs/RFCS/20171220_encryption_at_rest.md:723:* `rocksdb::GetSortedWalFiles`: retrieve the sorted list of all wal files
./docs/RFCS/20171220_encryption_at_rest.md:897:The previous version of this RFC proposed using the `rocksdb::EncryptedEnv` for all files, with encryption state
