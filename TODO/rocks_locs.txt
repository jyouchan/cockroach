All locations where rocks occurs

./c-deps/libroach/keys.h:8:const rocksdb::Slice kLocalMax("\x02", 1);
./c-deps/libroach/keys.h:9:const rocksdb::Slice kMeta2KeyMax("\x03\xff\xff", 3);
./c-deps/libroach/keys.h:11:const std::vector<std::pair<rocksdb::Slice, rocksdb::Slice> > kSortedNoSplitSpans = {
./c-deps/libroach/keys.h:12:  std::make_pair(rocksdb::Slice("\x88", 1), rocksdb::Slice("\x93", 1)),
./c-deps/libroach/keys.h:13:  std::make_pair(rocksdb::Slice("\x04\x00\x6c\x69\x76\x65\x6e\x65\x73\x73\x2d", 11), rocksdb::Slice("\x04\x00\x6c\x69\x76\x65\x6e\x65\x73\x73\x2e", 11)),
./c-deps/libroach/keys.h:14:  std::make_pair(rocksdb::Slice("\x03\xff\xff", 3), rocksdb::Slice("\x04", 1)),
./c-deps/libroach/keys.h:15:  std::make_pair(rocksdb::Slice("", 0), rocksdb::Slice("\x03", 1)),
./c-deps/libroach/keys.h:17:const std::vector<std::pair<rocksdb::Slice, rocksdb::Slice> > kSortedNoSplitSpansWithoutMeta2Splits = {
./c-deps/libroach/keys.h:18:  std::make_pair(rocksdb::Slice("\x88", 1), rocksdb::Slice("\x93", 1)),
./c-deps/libroach/keys.h:19:  std::make_pair(rocksdb::Slice("\x04\x00\x6c\x69\x76\x65\x6e\x65\x73\x73\x2d", 11), rocksdb::Slice("\x04\x00\x6c\x69\x76\x65\x6e\x65\x73\x73\x2e", 11)),
./c-deps/libroach/keys.h:20:  std::make_pair(rocksdb::Slice("", 0), rocksdb::Slice("\x04", 1)),
./c-deps/libroach/godefs.cc:31:void __attribute__((weak)) rocksDBLog(char*, int) { die_missing_symbol(__func__); }
./c-deps/libroach/status.h:24:// ToDBStatus converts a rocksdb Status to a DBStatus.
./c-deps/libroach/status.h:25:inline DBStatus ToDBStatus(const rocksdb::Status& status) {
./c-deps/libroach/snapshot.cc:29:  rocksdb::ReadOptions read_opts;
./c-deps/libroach/snapshot.cc:45:DBIterator* DBSnapshot::NewIter(rocksdb::ReadOptions* read_opts) {
./c-deps/libroach/chunked_buffer.h:17:#include <rocksdb/db.h>
./c-deps/libroach/chunked_buffer.h:28:  void Put(const rocksdb::Slice& key, const rocksdb::Slice& value);
./c-deps/libroach/options.h:18:#include <rocksdb/options.h>
./c-deps/libroach/options.h:22:// DBMakeOptions constructs a rocksdb::Options given a DBOptions.
./c-deps/libroach/options.h:23:rocksdb::Options DBMakeOptions(DBOptions db_opts);
./c-deps/libroach/db.cc:17:#include <rocksdb/convenience.h>
./c-deps/libroach/db.cc:18:#include <rocksdb/sst_file_writer.h>
./c-deps/libroach/db.cc:19:#include <rocksdb/table.h>
./c-deps/libroach/db.cc:42:__attribute__((weak)) rocksdb::Status DBOpenHook(const std::string& db_dir, const DBOptions opts) {
./c-deps/libroach/db.cc:44:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/db.cc:47:  return rocksdb::Status::OK();
./c-deps/libroach/db.cc:50:DBKey ToDBKey(const rocksdb::Slice& s) {
./c-deps/libroach/db.cc:53:  rocksdb::Slice tmp;
./c-deps/libroach/db.cc:70:    rocksdb::Slice key;
./c-deps/libroach/db.cc:83:  rocksdb::Options options = DBMakeOptions(db_opts);
./c-deps/libroach/db.cc:85:  const std::string additional_options = ToString(db_opts.rocksdb_options);
./c-deps/libroach/db.cc:87:    // TODO(peter): Investigate using rocksdb::LoadOptionsFromFile if
./c-deps/libroach/db.cc:94:    rocksdb::Status status = rocksdb::GetOptionsFromString(options, additional_options, &options);
./c-deps/libroach/db.cc:115:  std::unique_ptr<rocksdb::Env> memenv;
./c-deps/libroach/db.cc:117:    memenv.reset(rocksdb::NewMemEnv(rocksdb::Env::Default()));
./c-deps/libroach/db.cc:121:  std::unique_ptr<rocksdb::Env> switching_env;
./c-deps/libroach/db.cc:127:  rocksdb::DB* db_ptr;
./c-deps/libroach/db.cc:129:  rocksdb::Status status;
./c-deps/libroach/db.cc:131:    status = rocksdb::DB::OpenForReadOnly(options, db_dir, &db_ptr);
./c-deps/libroach/db.cc:133:    status = rocksdb::DB::Open(options, db_dir, &db_ptr);
./c-deps/libroach/db.cc:146:  rocksdb::Options options;
./c-deps/libroach/db.cc:147:  return ToDBStatus(rocksdb::DestroyDB(ToString(dir), options));
./c-deps/libroach/db.cc:159:  rocksdb::FlushOptions options;
./c-deps/libroach/db.cc:170:  // https://github.com/facebook/rocksdb/wiki/RocksDB-FAQ for more details.
./c-deps/libroach/db.cc:176:  rocksdb::WriteBatch batch;
./c-deps/libroach/db.cc:178:  rocksdb::WriteOptions options;
./c-deps/libroach/db.cc:191:  rocksdb::CompactRangeOptions options;
./c-deps/libroach/db.cc:198:    options.bottommost_level_compaction = rocksdb::BottommostLevelCompaction::kForce;
./c-deps/libroach/db.cc:212:  std::vector<rocksdb::LiveFileMetaData> all_metadata;
./c-deps/libroach/db.cc:213:  std::vector<rocksdb::LiveFileMetaData> metadata;
./c-deps/libroach/db.cc:240:    const rocksdb::Slice start_slice(start_key);
./c-deps/libroach/db.cc:241:    const rocksdb::Slice end_slice(end_key);
./c-deps/libroach/db.cc:273:  std::vector<rocksdb::SstFileMetaData> sst;
./c-deps/libroach/db.cc:282:            [](const rocksdb::SstFileMetaData& a, const rocksdb::SstFileMetaData& b) -> bool {
./c-deps/libroach/db.cc:288:  rocksdb::Slice last;
./c-deps/libroach/db.cc:289:  rocksdb::Slice* last_ptr = nullptr;
./c-deps/libroach/db.cc:297:    rocksdb::Slice cur(sst[i].largestkey);
./c-deps/libroach/db.cc:298:    rocksdb::Status status = db->rep->CompactRange(options, last_ptr, &cur);
./c-deps/libroach/db.cc:316:  const rocksdb::Range r(start_key, end_key);
./c-deps/libroach/db.cc:317:  const uint8_t flags = rocksdb::DB::SizeApproximationFlags::INCLUDE_FILES;
./c-deps/libroach/db.cc:334:  rocksdb::Iterator* const iter_rep = iter->rep.get();
./c-deps/libroach/db.cc:374:  rocksdb::ReadOptions opts;
./c-deps/libroach/db.cc:383:  rocksdb::ReadOptions opts;
./c-deps/libroach/db.cc:385:  opts.table_filter = [min, max](const rocksdb::TableProperties& props) {
./c-deps/libroach/db.cc:424:    rocksdb::Slice key;
./c-deps/libroach/db.cc:425:    rocksdb::Slice ts;
./c-deps/libroach/db.cc:438:    rocksdb::Slice key;
./c-deps/libroach/db.cc:439:    rocksdb::Slice ts;
./c-deps/libroach/db.cc:466:    rocksdb::Slice key;
./c-deps/libroach/db.cc:467:    rocksdb::Slice ts;
./c-deps/libroach/db.cc:476:    rocksdb::Slice key;
./c-deps/libroach/db.cc:477:    rocksdb::Slice ts;
./c-deps/libroach/db.cc:530:  rocksdb::IngestExternalFileOptions ingest_options;
./c-deps/libroach/db.cc:548:  rocksdb::Status status = db->rep->IngestExternalFile(paths, ingest_options);
./c-deps/libroach/db.cc:557:  std::unique_ptr<rocksdb::Options> options;
./c-deps/libroach/db.cc:558:  std::unique_ptr<rocksdb::Env> memenv;
./c-deps/libroach/db.cc:559:  rocksdb::SstFileWriter rep;
./c-deps/libroach/db.cc:561:  DBSstFileWriter(rocksdb::Options* o, rocksdb::Env* m)
./c-deps/libroach/db.cc:562:      : options(o), memenv(m), rep(rocksdb::EnvOptions(), *o, o->comparator) {}
./c-deps/libroach/db.cc:571:  rocksdb::BlockBasedTableOptions table_options;
./c-deps/libroach/db.cc:577:  // https://github.com/facebook/rocksdb/blob/972f96b3fbae1a4675043bdf4279c9072ad69645/include/rocksdb/table.h#L198
./c-deps/libroach/db.cc:579:  table_options.checksum = rocksdb::kCRC32c;
./c-deps/libroach/db.cc:581:  rocksdb::Options* options = new rocksdb::Options();
./c-deps/libroach/db.cc:583:  options->table_factory.reset(rocksdb::NewBlockBasedTableFactory(table_options));
./c-deps/libroach/db.cc:585:  std::unique_ptr<rocksdb::Env> memenv;
./c-deps/libroach/db.cc:586:  memenv.reset(rocksdb::NewMemEnv(rocksdb::Env::Default()));
./c-deps/libroach/db.cc:593:  rocksdb::Status status = fw->rep.Open("sst");
./c-deps/libroach/db.cc:601:  rocksdb::Status status = fw->rep.Put(EncodeKey(key), ToSlice(val));
./c-deps/libroach/db.cc:609:  rocksdb::Status status = fw->rep.Finish();
./c-deps/libroach/db.cc:620:  const rocksdb::EnvOptions soptions;
./c-deps/libroach/db.cc:621:  rocksdb::unique_ptr<rocksdb::SequentialFile> sst;
./c-deps/libroach/db.cc:631:  rocksdb::Slice sst_contents;
./c-deps/libroach/db.cc:660:      rocksdb::Env::Default()->LockFile(ToString(filename), (rocksdb::FileLock**)lock));
./c-deps/libroach/db.cc:664:  return ToDBStatus(rocksdb::Env::Default()->UnlockFile((rocksdb::FileLock*)lock));
./c-deps/libroach/merge.h:18:#include <rocksdb/merge_operator.h>
./c-deps/libroach/merge.h:26:                                    bool full_merge, rocksdb::Logger* logger);
./c-deps/libroach/merge.h:28:rocksdb::MergeOperator* NewMergeOperator();
./c-deps/libroach/db.h:19:#include <rocksdb/comparator.h>
./c-deps/libroach/db.h:20:#include <rocksdb/iterator.h>
./c-deps/libroach/db.h:21:#include <rocksdb/status.h>
./c-deps/libroach/db.h:22:#include <rocksdb/write_batch.h>
./c-deps/libroach/db.h:27:rocksdb::Status DBOpenHook(const std::string& db_dir, const DBOptions opts);
./c-deps/libroach/db.h:29:// ToDBSlice returns a DBSlice from a rocksdb::Slice
./c-deps/libroach/db.h:30:inline DBSlice ToDBSlice(const rocksdb::Slice& s) {
./c-deps/libroach/db.h:44:// ToDBString converts a rocksdb::Slice to a DBString.
./c-deps/libroach/db.h:45:inline DBString ToDBString(const rocksdb::Slice& s) {
./c-deps/libroach/db.h:53:// ToDBKey converts a rocksb::Slice to a DBKey.
./c-deps/libroach/db.h:54:DBKey ToDBKey(const rocksdb::Slice& s);
./c-deps/libroach/db.h:60:// ToSlice converts a DBSlice/DBString to a rocksdb::Slice.
./c-deps/libroach/db.h:61:inline rocksdb::Slice ToSlice(DBSlice s) { return rocksdb::Slice(s.data, s.len); }
./c-deps/libroach/db.h:62:inline rocksdb::Slice ToSlice(DBString s) { return rocksdb::Slice(s.data, s.len); }
./c-deps/libroach/db.h:71:MVCCStatsResult MVCCComputeStatsInternal(::rocksdb::Iterator* const iter_rep, DBKey start,
./c-deps/libroach/chunked_buffer.cc:16:#include <rocksdb/db.h>
./c-deps/libroach/chunked_buffer.cc:22:void chunkedBuffer::Put(const rocksdb::Slice& key, const rocksdb::Slice& value) {
./c-deps/libroach/snapshot.h:18:#include <rocksdb/db.h>
./c-deps/libroach/snapshot.h:24:  const rocksdb::Snapshot* snapshot;
./c-deps/libroach/snapshot.h:37:  virtual DBIterator* NewIter(rocksdb::ReadOptions*);
./c-deps/libroach/batch.cc:40:DBStatus ProcessDeltaKey(Getter* base, rocksdb::WBWIIterator* delta, rocksdb::Slice key,
./c-deps/libroach/batch.cc:50:    rocksdb::WriteEntry entry = delta->Entry();
./c-deps/libroach/batch.cc:52:    case rocksdb::kPutRecord:
./c-deps/libroach/batch.cc:58:    case rocksdb::kMergeRecord: {
./c-deps/libroach/batch.cc:89:    case rocksdb::kDeleteRecord:
./c-deps/libroach/batch.cc:113:class BaseDeltaIterator : public rocksdb::Iterator {
./c-deps/libroach/batch.cc:115:  BaseDeltaIterator(rocksdb::Iterator* base_iterator, rocksdb::WBWIIterator* delta_iterator,
./c-deps/libroach/batch.cc:119:        status_(rocksdb::Status::OK()),
./c-deps/libroach/batch.cc:147:  void Seek(const rocksdb::Slice& k) override {
./c-deps/libroach/batch.cc:169:      status_ = rocksdb::Status::NotSupported("Next() on invalid iterator");
./c-deps/libroach/batch.cc:174:  void Prev() override { status_ = rocksdb::Status::NotSupported("Prev() not supported"); }
./c-deps/libroach/batch.cc:176:  rocksdb::Slice key() const override {
./c-deps/libroach/batch.cc:180:  rocksdb::Slice value() const override {
./c-deps/libroach/batch.cc:187:  rocksdb::Status status() const override {
./c-deps/libroach/batch.cc:245:      status_ = rocksdb::Status::Corruption("unable to merge records");
./c-deps/libroach/batch.cc:282:  bool CheckPrefix(const rocksdb::Slice key) { return KeyPrefix(key) != prefix_start_key_; }
./c-deps/libroach/batch.cc:375:  mutable rocksdb::Status status_;
./c-deps/libroach/batch.cc:379:  // The base iterator, presumably obtained from a rocksdb::DB.
./c-deps/libroach/batch.cc:380:  std::unique_ptr<rocksdb::Iterator> base_iterator_;
./c-deps/libroach/batch.cc:381:  // The delta iterator obtained from a rocksdb::WriteBatchWithIndex.
./c-deps/libroach/batch.cc:382:  std::unique_ptr<rocksdb::WBWIIterator> delta_iterator_;
./c-deps/libroach/batch.cc:392:  rocksdb::Slice prefix_start_key_;
./c-deps/libroach/batch.cc:395:class DBBatchInserter : public rocksdb::WriteBatch::Handler {
./c-deps/libroach/batch.cc:397:  DBBatchInserter(rocksdb::WriteBatchBase* batch) : batch_(batch) {}
./c-deps/libroach/batch.cc:399:  virtual void Put(const rocksdb::Slice& key, const rocksdb::Slice& value) {
./c-deps/libroach/batch.cc:402:  virtual void Delete(const rocksdb::Slice& key) { batch_->Delete(key); }
./c-deps/libroach/batch.cc:403:  virtual void Merge(const rocksdb::Slice& key, const rocksdb::Slice& value) {
./c-deps/libroach/batch.cc:406:  virtual rocksdb::Status DeleteRangeCF(uint32_t column_family_id, const rocksdb::Slice& begin_key,
./c-deps/libroach/batch.cc:407:                                        const rocksdb::Slice& end_key) {
./c-deps/libroach/batch.cc:410:      return rocksdb::Status::OK();
./c-deps/libroach/batch.cc:412:    return rocksdb::Status::InvalidArgument("DeleteRangeCF not implemented");
./c-deps/libroach/batch.cc:414:  virtual void LogData(const rocksdb::Slice& blob) { batch_->PutLogData(blob); }
./c-deps/libroach/batch.cc:417:  rocksdb::WriteBatchBase* const batch_;
./c-deps/libroach/batch.cc:440:  rocksdb::ReadOptions read_opts;
./c-deps/libroach/batch.cc:450:  std::unique_ptr<rocksdb::WBWIIterator> iter(batch.NewIterator());
./c-deps/libroach/batch.cc:472:  rocksdb::WriteOptions options;
./c-deps/libroach/batch.cc:484:  rocksdb::WriteBatch batch(ToString(repr));
./c-deps/libroach/batch.cc:485:  rocksdb::Status status = batch.Iterate(&inserter);
./c-deps/libroach/batch.cc:495:DBIterator* DBBatch::NewIter(rocksdb::ReadOptions* read_opts) {
./c-deps/libroach/batch.cc:502:  rocksdb::Iterator* base = rep->NewIterator(*read_opts);
./c-deps/libroach/batch.cc:503:  rocksdb::WBWIIterator* delta = batch.NewIterator();
./c-deps/libroach/batch.cc:548:  rocksdb::WriteOptions options;
./c-deps/libroach/batch.cc:560:  rocksdb::WriteBatch batch(ToString(repr));
./c-deps/libroach/batch.cc:561:  rocksdb::Status status = batch.Iterate(&inserter);
./c-deps/libroach/batch.cc:571:DBIterator* DBWriteOnlyBatch::NewIter(rocksdb::ReadOptions* read_opts) { return NULL; }
./c-deps/libroach/batch.cc:581:rocksdb::WriteBatch::Handler* GetDBBatchInserter(::rocksdb::WriteBatchBase* batch) {
./c-deps/libroach/engine.h:19:#include <rocksdb/cache.h>
./c-deps/libroach/engine.h:20:#include <rocksdb/db.h>
./c-deps/libroach/engine.h:21:#include <rocksdb/env.h>
./c-deps/libroach/engine.h:22:#include <rocksdb/statistics.h>
./c-deps/libroach/engine.h:26:  rocksdb::DB* const rep;
./c-deps/libroach/engine.h:29:  DBEngine(rocksdb::DB* r, std::atomic<int64_t>* iters) : rep(r), iters(iters) {}
./c-deps/libroach/engine.h:41:  virtual DBIterator* NewIter(rocksdb::ReadOptions*) = 0;
./c-deps/libroach/engine.h:53:  std::unique_ptr<rocksdb::Env> switching_env;
./c-deps/libroach/engine.h:54:  std::unique_ptr<rocksdb::Env> memenv;
./c-deps/libroach/engine.h:55:  std::unique_ptr<rocksdb::DB> rep_deleter;
./c-deps/libroach/engine.h:56:  std::shared_ptr<rocksdb::Cache> block_cache;
./c-deps/libroach/engine.h:63:  DBImpl(rocksdb::DB* r, rocksdb::Env* m, std::shared_ptr<rocksdb::Cache> bc,
./c-deps/libroach/engine.h:64:         std::shared_ptr<DBEventListener> event_listener, rocksdb::Env* s_env);
./c-deps/libroach/engine.h:76:  virtual DBIterator* NewIter(rocksdb::ReadOptions*);
./c-deps/libroach/testutils.cc:18:#include <rocksdb/status.h>
./c-deps/libroach/testutils.cc:24:rocksdb::Status compareErrorMessage(rocksdb::Status status, const char* err_msg) {
./c-deps/libroach/testutils.cc:28:      return rocksdb::Status::OK();
./c-deps/libroach/testutils.cc:30:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/testutils.cc:36:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/testutils.cc:41:    return rocksdb::Status::OK();
./c-deps/libroach/testutils.cc:43:  return rocksdb::Status::InvalidArgument(
./c-deps/libroach/testutils.cc:47:rocksdb::Status compareErrorMessage(rocksdb::Status status, std::string err_msg) {
./c-deps/libroach/encoding.h:18:#include <rocksdb/slice.h>
./c-deps/libroach/encoding.h:35:bool DecodeUint32(rocksdb::Slice* buf, uint32_t* value);
./c-deps/libroach/encoding.h:39:bool DecodeUint64(rocksdb::Slice* buf, uint64_t* value);
./c-deps/libroach/encoding.h:49:std::string EncodeKey(const rocksdb::Slice& key, int64_t wall_time, int32_t logical);
./c-deps/libroach/encoding.h:59:WARN_UNUSED_RESULT bool SplitKey(rocksdb::Slice buf, rocksdb::Slice* key,
./c-deps/libroach/encoding.h:60:                                 rocksdb::Slice* timestamp);
./c-deps/libroach/encoding.h:64:WARN_UNUSED_RESULT bool DecodeTimestamp(rocksdb::Slice* timestamp, int64_t* wall_time,
./c-deps/libroach/encoding.h:66:WARN_UNUSED_RESULT bool DecodeTimestamp(rocksdb::Slice buf,
./c-deps/libroach/encoding.h:73:WARN_UNUSED_RESULT bool DecodeKey(rocksdb::Slice buf, rocksdb::Slice* key, int64_t* wall_time,
./c-deps/libroach/encoding.h:75:WARN_UNUSED_RESULT inline bool DecodeKey(rocksdb::Slice buf, rocksdb::Slice* key, DBTimestamp* ts) {
./c-deps/libroach/encoding.h:82:rocksdb::Slice KeyPrefix(const rocksdb::Slice& src);
./c-deps/libroach/env_switching.h:17:#include <rocksdb/env.h>
./c-deps/libroach/env_switching.h:20:rocksdb::Env* NewSwitchingEnv(rocksdb::Env* base_env, std::shared_ptr<rocksdb::Logger> logger);
./c-deps/libroach/iterator.h:19:#include <rocksdb/iterator.h>
./c-deps/libroach/iterator.h:20:#include <rocksdb/write_batch.h>
./c-deps/libroach/iterator.h:29:  std::unique_ptr<rocksdb::Iterator> rep;
./c-deps/libroach/iterator.h:31:  std::unique_ptr<rocksdb::WriteBatch> intents;
./c-deps/libroach/encoding.cc:16:#include <rocksdb/slice.h>
./c-deps/libroach/encoding.cc:39:bool DecodeUint32(rocksdb::Slice* buf, uint32_t* value) {
./c-deps/libroach/encoding.cc:50:bool DecodeUint64(rocksdb::Slice* buf, uint64_t* value) {
./c-deps/libroach/encoding.cc:80:std::string EncodeKey(const rocksdb::Slice& key, int64_t wall_time, int32_t logical) {
./c-deps/libroach/encoding.cc:100:WARN_UNUSED_RESULT bool SplitKey(rocksdb::Slice buf, rocksdb::Slice* key,
./c-deps/libroach/encoding.cc:101:                                 rocksdb::Slice* timestamp) {
./c-deps/libroach/encoding.cc:109:  *key = rocksdb::Slice(buf.data(), buf.size() - ts_size - 1);
./c-deps/libroach/encoding.cc:110:  *timestamp = rocksdb::Slice(key->data() + key->size(), ts_size);
./c-deps/libroach/encoding.cc:114:WARN_UNUSED_RESULT bool DecodeTimestamp(rocksdb::Slice* timestamp, int64_t* wall_time,
./c-deps/libroach/encoding.cc:133:WARN_UNUSED_RESULT bool DecodeTimestamp(rocksdb::Slice buf,
./c-deps/libroach/encoding.cc:145:WARN_UNUSED_RESULT bool DecodeKey(rocksdb::Slice buf, rocksdb::Slice* key, int64_t* wall_time,
./c-deps/libroach/encoding.cc:149:  rocksdb::Slice timestamp;
./c-deps/libroach/encoding.cc:162:rocksdb::Slice KeyPrefix(const rocksdb::Slice& src) {
./c-deps/libroach/encoding.cc:163:  rocksdb::Slice key;
./c-deps/libroach/encoding.cc:164:  rocksdb::Slice ts;
./c-deps/libroach/encoding.cc:176:  return rocksdb::Slice(key.data(), key.size() + 1);
./c-deps/libroach/getter.cc:32:  rocksdb::Status s = rep->Get(options, key, &tmp);
./c-deps/libroach/getter.cc:35:      // This mirrors the logic in rocksdb_get(). It doesn't seem like
./c-deps/libroach/ccl/key_manager.cc:18:rocksdb::Status KeyFromFile(rocksdb::Env* env, const std::string& path,
./c-deps/libroach/ccl/key_manager.cc:33:    return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager.cc:38:  status = rocksdb::ReadFileToString(env, path, &contents);
./c-deps/libroach/ccl/key_manager.cc:56:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/ccl/key_manager.cc:68:  return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager.cc:71:rocksdb::Status KeyFromKeyInfo(rocksdb::Env* env, const enginepbccl::KeyInfo& store_info,
./c-deps/libroach/ccl/key_manager.cc:89:    return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager.cc:105:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/ccl/key_manager.cc:113:  return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager.cc:116:rocksdb::Status ValidateRegistry(enginepbccl::DataKeysRegistry* registry) {
./c-deps/libroach/ccl/key_manager.cc:120:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/ccl/key_manager.cc:126:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/ccl/key_manager.cc:130:  return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager.cc:135:rocksdb::Status GenerateDataKey(rocksdb::Env* env, enginepbccl::DataKeysRegistry* reg) {
./c-deps/libroach/ccl/key_manager.cc:152:  return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager.cc:160:rocksdb::Status FileKeyManager::LoadKeys() {
./c-deps/libroach/ccl/key_manager.cc:162:  rocksdb::Status status = KeyManagerUtils::KeyFromFile(env_, active_key_path_, active.get());
./c-deps/libroach/ccl/key_manager.cc:175:  return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager.cc:194:DataKeyManager::DataKeyManager(rocksdb::Env* env, const std::string& db_dir,
./c-deps/libroach/ccl/key_manager.cc:200:rocksdb::Status DataKeyManager::LoadKeysHelper(enginepbccl::DataKeysRegistry* registry) {
./c-deps/libroach/ccl/key_manager.cc:201:  rocksdb::Status status = env_->FileExists(registry_path_);
./c-deps/libroach/ccl/key_manager.cc:204:    return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager.cc:210:  status = rocksdb::ReadFileToString(env_, registry_path_, &contents);
./c-deps/libroach/ccl/key_manager.cc:216:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/ccl/key_manager.cc:219:  return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager.cc:222:rocksdb::Status DataKeyManager::LoadKeys() {
./c-deps/libroach/ccl/key_manager.cc:243:  return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager.cc:276:rocksdb::Status DataKeyManager::MaybeRotateKeyLocked() {
./c-deps/libroach/ccl/key_manager.cc:280:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/ccl/key_manager.cc:289:    return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager.cc:299:    return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager.cc:315:rocksdb::Status
./c-deps/libroach/ccl/key_manager.cc:330:      return rocksdb::Status::InvalidArgument(fmt::StringPrintf(
./c-deps/libroach/ccl/key_manager.cc:359:rocksdb::Status
./c-deps/libroach/ccl/key_manager.cc:370:    return rocksdb::Status::InvalidArgument("failed to serialize key registry");
./c-deps/libroach/ccl/key_manager.cc:381:  return rocksdb::Status::OK();
./c-deps/libroach/ccl/db.cc:13:#include <rocksdb/comparator.h>
./c-deps/libroach/ccl/db.cc:14:#include <rocksdb/iterator.h>
./c-deps/libroach/ccl/db.cc:15:#include <rocksdb/utilities/write_batch_with_index.h>
./c-deps/libroach/ccl/db.cc:16:#include <rocksdb/write_batch.h>
./c-deps/libroach/ccl/db.cc:29:rocksdb::Status DBOpenHook(const std::string& db_dir, const DBOptions db_opts) {
./c-deps/libroach/ccl/db.cc:32:    return rocksdb::Status::OK();
./c-deps/libroach/ccl/db.cc:37:    return rocksdb::Status::InvalidArgument("failed to parse extra options");
./c-deps/libroach/ccl/db.cc:41:    return rocksdb::Status::InvalidArgument("unknown encryption key source");
./c-deps/libroach/ccl/db.cc:51:      rocksdb::Env::Default(), opts.key_files().current_key(), opts.key_files().old_key()));
./c-deps/libroach/ccl/db.cc:52:  rocksdb::Status status = store_key_manager->LoadKeys();
./c-deps/libroach/ccl/db.cc:59:      new DataKeyManager(rocksdb::Env::Default(), db_dir, opts.data_key_rotation_period()));
./c-deps/libroach/ccl/db.cc:73:  return rocksdb::Status::InvalidArgument("encryption is not supported");
./c-deps/libroach/ccl/db.cc:85:  rocksdb::WriteBatchWithIndex batch(&kComparator, 0, true);
./c-deps/libroach/ccl/db.cc:86:  rocksdb::WriteBatch b(ToString(repr));
./c-deps/libroach/ccl/db.cc:87:  std::unique_ptr<rocksdb::WriteBatch::Handler> inserter(GetDBBatchInserter(&batch));
./c-deps/libroach/ccl/db.cc:88:  rocksdb::Status status = b.Iterate(inserter.get());
./c-deps/libroach/ccl/db.cc:92:  std::unique_ptr<rocksdb::Iterator> iter;
./c-deps/libroach/ccl/db.cc:93:  iter.reset(batch.NewIteratorWithBase(rocksdb::NewEmptyIterator()));
./c-deps/libroach/ccl/key_manager.h:12:#include <rocksdb/env.h>
./c-deps/libroach/ccl/key_manager.h:13:#include <rocksdb/status.h>
./c-deps/libroach/ccl/key_manager.h:31:rocksdb::Status KeyFromFile(rocksdb::Env* env, const std::string& path,
./c-deps/libroach/ccl/key_manager.h:35:rocksdb::Status KeyFromKeyInfo(rocksdb::Env* env, const enginepbccl::KeyInfo& store_info,
./c-deps/libroach/ccl/key_manager.h:39:rocksdb::Status ValidateRegistry(enginepbccl::DataKeysRegistry* registry);
./c-deps/libroach/ccl/key_manager.h:42:rocksdb::Status GenerateDataKey(rocksdb::Env* env, enginepbccl::DataKeysRegistry* reg);
./c-deps/libroach/ccl/key_manager.h:86:  explicit FileKeyManager(rocksdb::Env* env, const std::string& active_key_path,
./c-deps/libroach/ccl/key_manager.h:94:  rocksdb::Status LoadKeys();
./c-deps/libroach/ccl/key_manager.h:100:  rocksdb::Env* env_;
./c-deps/libroach/ccl/key_manager.h:113:  // `db_dir` is the rocksdb directory.
./c-deps/libroach/ccl/key_manager.h:114:  explicit DataKeyManager(rocksdb::Env* env, const std::string& db_dir, int64_t rotation_period);
./c-deps/libroach/ccl/key_manager.h:120:  rocksdb::Status LoadKeys();
./c-deps/libroach/ccl/key_manager.h:124:  rocksdb::Status SetActiveStoreKey(std::unique_ptr<enginepbccl::KeyInfo> store_key);
./c-deps/libroach/ccl/key_manager.h:131:  rocksdb::Status LoadKeysHelper(enginepbccl::DataKeysRegistry* registry);
./c-deps/libroach/ccl/key_manager.h:132:  rocksdb::Status PersistRegistryLocked(std::unique_ptr<enginepbccl::DataKeysRegistry> reg);
./c-deps/libroach/ccl/key_manager.h:134:  rocksdb::Status MaybeRotateKeyLocked();
./c-deps/libroach/ccl/key_manager.h:137:  rocksdb::Env* env_;
./c-deps/libroach/ccl/key_manager_test.cc:9:#include <rocksdb/env.h>
./c-deps/libroach/ccl/key_manager_test.cc:33:  std::unique_ptr<rocksdb::Env> env(rocksdb::NewMemEnv(rocksdb::Env::Default()));
./c-deps/libroach/ccl/key_manager_test.cc:52:    ASSERT_OK(rocksdb::WriteStringToFile(env.get(), k.contents, k.filename));
./c-deps/libroach/ccl/key_manager_test.cc:136:rocksdb::Status compareNonRandomKeyInfo(const enginepbccl::KeyInfo& actual,
./c-deps/libroach/ccl/key_manager_test.cc:139:    return rocksdb::Status::InvalidArgument(fmt::StringPrintf(
./c-deps/libroach/ccl/key_manager_test.cc:145:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/ccl/key_manager_test.cc:151:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/ccl/key_manager_test.cc:157:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/ccl/key_manager_test.cc:161:  return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager_test.cc:164:rocksdb::Status compareKeyInfo(const enginepbccl::KeyInfo& actual, const testKey& expected) {
./c-deps/libroach/ccl/key_manager_test.cc:171:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/ccl/key_manager_test.cc:175:  return rocksdb::Status::OK();
./c-deps/libroach/ccl/key_manager_test.cc:178:rocksdb::Status compareKey(const enginepbccl::SecretKey& actual, const testKey& expected) {
./c-deps/libroach/ccl/key_manager_test.cc:180:    return rocksdb::Status::InvalidArgument(
./c-deps/libroach/ccl/key_manager_test.cc:198:  std::unique_ptr<rocksdb::Env> env(rocksdb::NewMemEnv(rocksdb::Env::Default()));
./c-deps/libroach/ccl/key_manager_test.cc:201:  ASSERT_OK(rocksdb::WriteStringToFile(env.get(), key_file_128, "16.key"));
./c-deps/libroach/ccl/key_manager_test.cc:202:  ASSERT_OK(rocksdb::WriteStringToFile(env.get(), key_file_192, "24.key"));
./c-deps/libroach/ccl/key_manager_test.cc:203:  ASSERT_OK(rocksdb::WriteStringToFile(env.get(), key_file_256, "32.key"));
./c-deps/libroach/ccl/key_manager_test.cc:264:  std::unique_ptr<rocksdb::Env> env(rocksdb::NewMemEnv(rocksdb::Env::Default()));
./c-deps/libroach/ccl/key_manager_test.cc:276:    ASSERT_OK(rocksdb::WriteStringToFile(env.get(), "blah blah", registry_path));
./c-deps/libroach/ccl/key_manager_test.cc:284:    ASSERT_OK(rocksdb::WriteStringToFile(env.get(), "", registry_path));
./c-deps/libroach/ccl/key_manager_test.cc:295:    ASSERT_OK(rocksdb::WriteStringToFile(env.get(), contents, registry_path));
./c-deps/libroach/ccl/key_manager_test.cc:308:    ASSERT_OK(rocksdb::WriteStringToFile(env.get(), contents, registry_path));
./c-deps/libroach/ccl/key_manager_test.cc:322:    ASSERT_OK(rocksdb::WriteStringToFile(env.get(), contents, registry_path));
./c-deps/libroach/ccl/key_manager_test.cc:344:    ASSERT_OK(rocksdb::WriteStringToFile(env.get(), contents, registry_path));
./c-deps/libroach/ccl/key_manager_test.cc:369:  std::unique_ptr<rocksdb::Env> env(rocksdb::NewMemEnv(rocksdb::Env::Default()));
./c-deps/libroach/ccl/key_manager_test.cc:440:  std::unique_ptr<rocksdb::Env> env(rocksdb::NewMemEnv(rocksdb::Env::Default()));
./c-deps/libroach/ccl/key_manager_test.cc:557:  std::unique_ptr<rocksdb::Env> memenv(rocksdb::NewMemEnv(rocksdb::Env::Default()));
./c-deps/libroach/utils.h:17:#include <rocksdb/env.h>
./c-deps/libroach/utils.h:18:#include <rocksdb/status.h>
./c-deps/libroach/utils.h:23:rocksdb::Status SafeWriteStringToFile(rocksdb::Env* env, const std::string& filename,
./c-deps/libroach/CMakeLists.txt:48:  protos/storage/engine/enginepb/rocksdb.pb.cc
./c-deps/libroach/CMakeLists.txt:56:  PRIVATE ../rocksdb/include
./c-deps/libroach/CMakeLists.txt:70:  PRIVATE ../rocksdb/include
./c-deps/libroach/CMakeLists.txt:124:    PRIVATE ../rocksdb/include
./c-deps/libroach/batch.h:18:#include <rocksdb/db.h>
./c-deps/libroach/batch.h:19:#include <rocksdb/utilities/write_batch_with_index.h>
./c-deps/libroach/batch.h:27:  rocksdb::WriteBatchWithIndex batch;
./c-deps/libroach/batch.h:40:  virtual DBIterator* NewIter(rocksdb::ReadOptions*);
./c-deps/libroach/batch.h:48:  rocksdb::WriteBatch batch;
./c-deps/libroach/batch.h:61:  virtual DBIterator* NewIter(rocksdb::ReadOptions*);
./c-deps/libroach/batch.h:69:::rocksdb::WriteBatch::Handler* GetDBBatchInserter(::rocksdb::WriteBatchBase* batch);
./c-deps/libroach/encoding_test.cc:56:    rocksdb::Slice slice(buf);
./c-deps/libroach/encoding_test.cc:65:    rocksdb::Slice slice(buf);
./c-deps/libroach/comparator.cc:20:int DBComparator::Compare(const rocksdb::Slice& a, const rocksdb::Slice& b) const {
./c-deps/libroach/comparator.cc:21:  rocksdb::Slice key_a, key_b;
./c-deps/libroach/comparator.cc:22:  rocksdb::Slice ts_a, ts_b;
./c-deps/libroach/comparator.cc:44:bool DBComparator::Equal(const rocksdb::Slice& a, const rocksdb::Slice& b) const { return a == b; }
./c-deps/libroach/comparator.cc:47:void DBComparator::FindShortestSeparator(std::string* start, const rocksdb::Slice& limit) const {}
./c-deps/libroach/godefs.h:20:void __attribute__((weak)) rocksDBLog(char*, int);
./c-deps/libroach/utils.cc:19:rocksdb::Status SafeWriteStringToFile(rocksdb::Env* env, const std::string& filename,
./c-deps/libroach/utils.cc:22:  auto status = rocksdb::WriteStringToFile(env, contents, tmpname, true /* should_sync */);
./c-deps/libroach/eventlistener.h:19:#include <rocksdb/db.h>
./c-deps/libroach/eventlistener.h:24:class DBEventListener : public rocksdb::EventListener {
./c-deps/libroach/eventlistener.h:33:  virtual void OnFlushCompleted(rocksdb::DB* db,
./c-deps/libroach/eventlistener.h:34:                                const rocksdb::FlushJobInfo& flush_job_info) override;
./c-deps/libroach/eventlistener.h:35:  virtual void OnCompactionCompleted(rocksdb::DB* db,
./c-deps/libroach/eventlistener.h:36:                                     const rocksdb::CompactionJobInfo& ci) override;
./c-deps/libroach/include/libroach.h:74:  DBSlice rocksdb_options;
./c-deps/libroach/engine.cc:21:#include "protos/storage/engine/enginepb/rocksdb.pb.h"
./c-deps/libroach/engine.cc:33:  std::vector<rocksdb::LiveFileMetaData> metadata;
./c-deps/libroach/engine.cc:44:    rocksdb::Slice tmp;
./c-deps/libroach/engine.cc:62:  rocksdb::TablePropertiesCollection props;
./c-deps/libroach/engine.cc:63:  rocksdb::Status status = rep->GetPropertiesOfAllTables(&props);
./c-deps/libroach/engine.cc:78:      if (!DecodeTimestamp(rocksdb::Slice(ts_min->second), sst->mutable_ts_min())) {
./c-deps/libroach/engine.cc:81:            rocksdb::Slice(ts_min->second).ToString(true).c_str(), sst->path().c_str());
./c-deps/libroach/engine.cc:88:      if (!DecodeTimestamp(rocksdb::Slice(ts_max->second), sst->mutable_ts_max())) {
./c-deps/libroach/engine.cc:91:            rocksdb::Slice(ts_max->second).ToString(true).c_str(), sst->path().c_str());
./c-deps/libroach/engine.cc:101:DBImpl::DBImpl(rocksdb::DB* r, rocksdb::Env* m, std::shared_ptr<rocksdb::Cache> bc,
./c-deps/libroach/engine.cc:102:               std::shared_ptr<DBEventListener> event_listener, rocksdb::Env* s_env)
./c-deps/libroach/engine.cc:112:  const rocksdb::Options& opts = rep->GetOptions();
./c-deps/libroach/engine.cc:113:  const std::shared_ptr<rocksdb::Statistics>& s = opts.statistics;
./c-deps/libroach/engine.cc:114:  rocksdb::Info(opts.info_log, "bloom filter utility:    %0.1f%%",
./c-deps/libroach/engine.cc:115:                (100.0 * s->getTickerCount(rocksdb::BLOOM_FILTER_PREFIX_USEFUL)) /
./c-deps/libroach/engine.cc:116:                    s->getTickerCount(rocksdb::BLOOM_FILTER_PREFIX_CHECKED));
./c-deps/libroach/engine.cc:129:  rocksdb::WriteOptions options;
./c-deps/libroach/engine.cc:134:  rocksdb::WriteOptions options;
./c-deps/libroach/engine.cc:139:  rocksdb::ReadOptions read_opts;
./c-deps/libroach/engine.cc:145:  rocksdb::WriteOptions options;
./c-deps/libroach/engine.cc:150:  rocksdb::WriteOptions options;
./c-deps/libroach/engine.cc:158:  rocksdb::WriteBatch batch(ToString(repr));
./c-deps/libroach/engine.cc:159:  rocksdb::WriteOptions options;
./c-deps/libroach/engine.cc:166:DBIterator* DBImpl::NewIter(rocksdb::ReadOptions* read_opts) {
./c-deps/libroach/engine.cc:175:  const rocksdb::Options& opts = rep->GetOptions();
./c-deps/libroach/engine.cc:176:  const std::shared_ptr<rocksdb::Statistics>& s = opts.statistics;
./c-deps/libroach/engine.cc:179:  rep->GetIntProperty("rocksdb.cur-size-all-mem-tables", &memtable_total_size);
./c-deps/libroach/engine.cc:182:  rep->GetIntProperty("rocksdb.estimate-table-readers-mem", &table_readers_mem_estimate);
./c-deps/libroach/engine.cc:185:  rep->GetIntProperty("rocksdb.estimate-pending-compaction-bytes",
./c-deps/libroach/engine.cc:188:  stats->block_cache_hits = (int64_t)s->getTickerCount(rocksdb::BLOCK_CACHE_HIT);
./c-deps/libroach/engine.cc:189:  stats->block_cache_misses = (int64_t)s->getTickerCount(rocksdb::BLOCK_CACHE_MISS);
./c-deps/libroach/engine.cc:193:      (int64_t)s->getTickerCount(rocksdb::BLOOM_FILTER_PREFIX_CHECKED);
./c-deps/libroach/engine.cc:195:      (int64_t)s->getTickerCount(rocksdb::BLOOM_FILTER_PREFIX_USEFUL);
./c-deps/libroach/engine.cc:206:  rep->GetProperty("rocksdb.cfstats-no-file-histogram", &tmp);
./c-deps/libroach/engine.cc:212:  rocksdb::Status s;
./c-deps/libroach/engine.cc:214:  const rocksdb::EnvOptions soptions;
./c-deps/libroach/engine.cc:215:  rocksdb::unique_ptr<rocksdb::WritableFile> destfile;
./c-deps/libroach/protos/storage/engine/enginepb/rocksdb.pb.h:2:// source: storage/engine/enginepb/rocksdb.proto
./c-deps/libroach/protos/storage/engine/enginepb/rocksdb.pb.h:4:#ifndef PROTOBUF_storage_2fengine_2fenginepb_2frocksdb_2eproto__INCLUDED
./c-deps/libroach/protos/storage/engine/enginepb/rocksdb.pb.h:5:#define PROTOBUF_storage_2fengine_2fenginepb_2frocksdb_2eproto__INCLUDED
./c-deps/libroach/protos/storage/engine/enginepb/rocksdb.pb.h:53:namespace protobuf_storage_2fengine_2fenginepb_2frocksdb_2eproto {
./c-deps/libroach/protos/storage/engine/enginepb/rocksdb.pb.h:66:}  // namespace protobuf_storage_2fengine_2fenginepb_2frocksdb_2eproto
./c-deps/libroach/protos/storage/engine/enginepb/rocksdb.pb.h:189:  friend struct protobuf_storage_2fengine_2fenginepb_2frocksdb_2eproto::TableStruct;
./c-deps/libroach/protos/storage/engine/enginepb/rocksdb.pb.h:304:  friend struct protobuf_storage_2fengine_2fenginepb_2frocksdb_2eproto::TableStruct;
./c-deps/libroach/protos/storage/engine/enginepb/rocksdb.pb.h:554:#endif  // PROTOBUF_storage_2fengine_2fenginepb_2frocksdb_2eproto__INCLUDED
./c-deps/libroach/protos/storage/engine/enginepb/rocksdb.pb.cc:2:// source: storage/engine/enginepb/rocksdb.proto
./c-deps/libroach/protos/storage/engine/enginepb/rocksdb.pb.cc:5:#include "storage/engine/enginepb/rocksdb.pb.h"
./c-deps/libroach/protos/storage/engine/enginepb/rocksdb.pb.cc:32:namespace protobuf_storage_2fengine_2fenginepb_2frocksdb_2eproto {
./c-deps/libroach/protos/storage/engine/enginepb/rocksdb.pb.cc:80:}  // namespace protobuf_storage_2fengine_2fenginepb_2frocksdb_2eproto
./c-deps/libroach/protos/storage/engine/enginepb/rocksdb.pb.cc:94:    protobuf_storage_2fengine_2fenginepb_2frocksdb_2eproto::InitDefaults();
./c-deps/libroach/protos/storage/engine/enginepb/rocksdb.pb.cc:146:  protobuf_storage_2fengine_2fenginepb_2frocksdb_2eproto::InitDefaults();
./c-deps/libroach/protos/storage/engine/enginepb/rocksdb.pb.cc:519:    protobuf_storage_2fengine_2fenginepb_2frocksdb_2eproto::InitDefaults();
./c-deps/libroach/protos/storage/engine/enginepb/rocksdb.pb.cc:557:  protobuf_storage_2fengine_2fenginepb_2frocksdb_2eproto::InitDefaults();
./c-deps/libroach/mvcc.h:67:        intents_(new rocksdb::WriteBatch),
./c-deps/libroach/mvcc.h:119:    // auto pctx = rocksdb::get_perf_context();
./c-deps/libroach/mvcc.h:247:        kvs_->Put(cur_raw_key_, rocksdb::Slice());
./c-deps/libroach/mvcc.h:327:  bool backwardLatestVersion(const rocksdb::Slice& key, int i) {
./c-deps/libroach/mvcc.h:331:      rocksdb::Slice peeked_key;
./c-deps/libroach/mvcc.h:354:  bool prevKey(const rocksdb::Slice& key) {
./c-deps/libroach/mvcc.h:364:      rocksdb::Slice peeked_key;
./c-deps/libroach/mvcc.h:410:  bool advanceKeyAtNewKey(const rocksdb::Slice& key) {
./c-deps/libroach/mvcc.h:421:  bool addAndAdvance(const rocksdb::Slice& value) {
./c-deps/libroach/mvcc.h:499:  bool iterSeek(const rocksdb::Slice& key) {
./c-deps/libroach/mvcc.h:507:  bool iterSeekReverse(const rocksdb::Slice& key) {
./c-deps/libroach/mvcc.h:552:  bool iterPeekPrev(rocksdb::Slice* peeked_key) {
./c-deps/libroach/mvcc.h:563:      cur_raw_key_ = rocksdb::Slice(saved_buf_.data(), cur_raw_key_.size());
./c-deps/libroach/mvcc.h:564:      cur_value_ = rocksdb::Slice(saved_buf_.data() + cur_raw_key_.size(), cur_value_.size());
./c-deps/libroach/mvcc.h:565:      rocksdb::Slice dummy_timestamp;
./c-deps/libroach/mvcc.h:579:        *peeked_key = rocksdb::Slice();
./c-deps/libroach/mvcc.h:585:    rocksdb::Slice dummy_timestamp;
./c-deps/libroach/mvcc.h:602:  rocksdb::Iterator* const iter_rep_;
./c-deps/libroach/mvcc.h:603:  const rocksdb::Slice start_key_;
./c-deps/libroach/mvcc.h:604:  const rocksdb::Slice end_key_;
./c-deps/libroach/mvcc.h:607:  const rocksdb::Slice txn_id_;
./c-deps/libroach/mvcc.h:615:  std::unique_ptr<rocksdb::WriteBatch> intents_;
./c-deps/libroach/mvcc.h:624:  rocksdb::Slice cur_raw_key_;
./c-deps/libroach/mvcc.h:627:  rocksdb::Slice cur_key_;
./c-deps/libroach/mvcc.h:631:  rocksdb::Slice cur_value_;
./c-deps/libroach/options.cc:16:#include <rocksdb/filter_policy.h>
./c-deps/libroach/options.cc:17:#include <rocksdb/slice_transform.h>
./c-deps/libroach/options.cc:18:#include <rocksdb/table.h>
./c-deps/libroach/options.cc:29:class DBPrefixExtractor : public rocksdb::SliceTransform {
./c-deps/libroach/options.cc:40:  virtual rocksdb::Slice Transform(const rocksdb::Slice& src) const { return KeyPrefix(src); }
./c-deps/libroach/options.cc:42:  virtual bool InDomain(const rocksdb::Slice& src) const { return true; }
./c-deps/libroach/options.cc:44:  virtual bool InRange(const rocksdb::Slice& dst) const { return Transform(dst) == dst; }
./c-deps/libroach/options.cc:47:class DBLogger : public rocksdb::Logger {
./c-deps/libroach/options.cc:69:      rocksDBLog(space, result);
./c-deps/libroach/options.cc:92:        rocksDBLog(buf, result);
./c-deps/libroach/options.cc:104:class TimeBoundTblPropCollector : public rocksdb::TablePropertiesCollector {
./c-deps/libroach/options.cc:108:  rocksdb::Status Finish(rocksdb::UserCollectedProperties* properties) override {
./c-deps/libroach/options.cc:109:    *properties = rocksdb::UserCollectedProperties{
./c-deps/libroach/options.cc:113:    return rocksdb::Status::OK();
./c-deps/libroach/options.cc:116:  rocksdb::Status AddUserKey(const rocksdb::Slice& user_key, const rocksdb::Slice& value,
./c-deps/libroach/options.cc:117:                             rocksdb::EntryType type, rocksdb::SequenceNumber seq,
./c-deps/libroach/options.cc:119:    rocksdb::Slice unused;
./c-deps/libroach/options.cc:120:    rocksdb::Slice ts;
./c-deps/libroach/options.cc:130:    return rocksdb::Status::OK();
./c-deps/libroach/options.cc:133:  virtual rocksdb::UserCollectedProperties GetReadableProperties() const override {
./c-deps/libroach/options.cc:134:    return rocksdb::UserCollectedProperties{};
./c-deps/libroach/options.cc:142:class TimeBoundTblPropCollectorFactory : public rocksdb::TablePropertiesCollectorFactory {
./c-deps/libroach/options.cc:145:  virtual rocksdb::TablePropertiesCollector* CreateTablePropertiesCollector(
./c-deps/libroach/options.cc:146:      rocksdb::TablePropertiesCollectorFactory::Context context) override {
./c-deps/libroach/options.cc:154:rocksdb::Options DBMakeOptions(DBOptions db_opts) {
./c-deps/libroach/options.cc:155:  // Use the rocksdb options builder to configure the base options
./c-deps/libroach/options.cc:157:  rocksdb::Options options;
./c-deps/libroach/options.cc:170:  options.statistics = rocksdb::CreateDBStatistics();
./c-deps/libroach/options.cc:172:  options.compaction_pri = rocksdb::kMinOverlappingRatio;
./c-deps/libroach/options.cc:204:  std::shared_ptr<rocksdb::TablePropertiesCollectorFactory> time_bound_prop_collector(
./c-deps/libroach/options.cc:267:  rocksdb::BlockBasedTableOptions table_options;
./c-deps/libroach/options.cc:286:  table_options.filter_policy.reset(rocksdb::NewBloomFilterPolicy(10, false /* !block_based */));
./c-deps/libroach/options.cc:298:  options.table_factory.reset(rocksdb::NewBlockBasedTableFactory(table_options));
./c-deps/libroach/testutils.h:18:#include <rocksdb/env.h>
./c-deps/libroach/testutils.h:19:#include <rocksdb/status.h>
./c-deps/libroach/testutils.h:24:rocksdb::Status compareErrorMessage(rocksdb::Status status, const char* err_msg);
./c-deps/libroach/testutils.h:25:rocksdb::Status compareErrorMessage(rocksdb::Status status, std::string err_msg);
./c-deps/libroach/testutils.h:27:// FakeTimeEnv is a simple wrapper around a rocksdb::Env that returns a fixed time
./c-deps/libroach/testutils.h:29:class FakeTimeEnv : public rocksdb::EnvWrapper {
./c-deps/libroach/testutils.h:31:  explicit FakeTimeEnv(rocksdb::Env* base_env) : rocksdb::EnvWrapper(base_env), fake_time_(0){};
./c-deps/libroach/testutils.h:32:  virtual rocksdb::Status GetCurrentTime(int64_t* unix_time) override {
./c-deps/libroach/testutils.h:34:    return rocksdb::Status::OK();
./c-deps/libroach/comparator.h:17:#include <rocksdb/db.h>
./c-deps/libroach/comparator.h:21:class DBComparator : public rocksdb::Comparator {
./c-deps/libroach/comparator.h:27:  virtual int Compare(const rocksdb::Slice& a, const rocksdb::Slice& b) const override;
./c-deps/libroach/comparator.h:28:  virtual bool Equal(const rocksdb::Slice& a, const rocksdb::Slice& b) const override;
./c-deps/libroach/comparator.h:30:                                     const rocksdb::Slice& limit) const override;
./c-deps/libroach/eventlistener.cc:16:#include <rocksdb/table_properties.h>
./c-deps/libroach/eventlistener.cc:22:void DBEventListener::OnFlushCompleted(rocksdb::DB* db,
./c-deps/libroach/eventlistener.cc:23:                                       const rocksdb::FlushJobInfo& flush_job_info) {
./c-deps/libroach/eventlistener.cc:27:    const rocksdb::TableProperties& p = flush_job_info.table_properties;
./c-deps/libroach/eventlistener.cc:37:void DBEventListener::OnCompactionCompleted(rocksdb::DB* db, const rocksdb::CompactionJobInfo& ci) {
./c-deps/libroach/eventlistener.cc:44:      const rocksdb::TableProperties& p = *iter->second;
./c-deps/libroach/getter.h:18:#include <rocksdb/db.h>
./c-deps/libroach/getter.h:19:#include <rocksdb/iterator.h>
./c-deps/libroach/getter.h:35:  rocksdb::Iterator* const base;
./c-deps/libroach/getter.h:37:  IteratorGetter(rocksdb::Iterator* iter) : base(iter) {}
./c-deps/libroach/getter.h:43:// retrieves the value for the supplied key from a rocksdb::DB.
./c-deps/libroach/getter.h:45:  rocksdb::DB* const rep;
./c-deps/libroach/getter.h:46:  rocksdb::ReadOptions const options;
./c-deps/libroach/getter.h:49:  DBGetter(rocksdb::DB* const r, rocksdb::ReadOptions opts, std::string&& k)
./c-deps/libroach/cache.cc:20:  cache->rep = rocksdb::NewLRUCache(size, num_cache_shard_bits);
./c-deps/libroach/ldb.cc:15:#include <rocksdb/ldb_tool.h>
./c-deps/libroach/ldb.cc:27:class KeyFormatter : public rocksdb::SliceFormatter {
./c-deps/libroach/ldb.cc:28:  std::string Format(const rocksdb::Slice& s) const {
./c-deps/libroach/ldb.cc:39:  rocksdb::Options options = DBMakeOptions(DBOptions());
./c-deps/libroach/ldb.cc:40:  rocksdb::LDBOptions ldb_options;
./c-deps/libroach/ldb.cc:42:  rocksdb::LDBTool tool;
./c-deps/libroach/cache.h:20:#include <rocksdb/cache.h>
./c-deps/libroach/cache.h:24:  std::shared_ptr<rocksdb::Cache> rep;
./c-deps/libroach/merge.cc:16:#include <rocksdb/env.h>
./c-deps/libroach/merge.cc:30:rocksdb::Slice ValueDataBytes(const std::string& val) {
./c-deps/libroach/merge.cc:32:    return rocksdb::Slice();
./c-deps/libroach/merge.cc:34:  return rocksdb::Slice(val.data() + kHeaderSize, val.size() - kHeaderSize);
./c-deps/libroach/merge.cc:51:  const rocksdb::Slice d = ValueDataBytes(val);
./c-deps/libroach/merge.cc:85:                                              bool full_merge, rocksdb::Logger* logger) {
./c-deps/libroach/merge.cc:90:    rocksdb::Warn(logger, "left InternalTimeSeriesData could not be parsed from bytes.");
./c-deps/libroach/merge.cc:94:    rocksdb::Warn(logger, "right InternalTimeSeriesData could not be parsed from bytes.");
./c-deps/libroach/merge.cc:101:    rocksdb::Warn(logger, "TimeSeries merge failed due to mismatched start timestamps");
./c-deps/libroach/merge.cc:105:    rocksdb::Warn(logger, "TimeSeries merge failed due to mismatched sample durations.");
./c-deps/libroach/merge.cc:179:WARN_UNUSED_RESULT bool ConsolidateTimeSeriesValue(std::string* val, rocksdb::Logger* logger) {
./c-deps/libroach/merge.cc:183:    rocksdb::Warn(logger, "InternalTimeSeriesData could not be parsed from bytes.");
./c-deps/libroach/merge.cc:218:class DBMergeOperator : public rocksdb::MergeOperator {
./c-deps/libroach/merge.cc:221:  virtual bool FullMerge(const rocksdb::Slice& key, const rocksdb::Slice* existing_value,
./c-deps/libroach/merge.cc:223:                         rocksdb::Logger* logger) const WARN_UNUSED_RESULT {
./c-deps/libroach/merge.cc:234:    // merger via rocksdb_merge will not return an error, but simply
./c-deps/libroach/merge.cc:244:        rocksdb::Warn(logger, "corrupted existing value");
./c-deps/libroach/merge.cc:256:      rocksdb::Warn(logger, "serialization error");
./c-deps/libroach/merge.cc:262:  virtual bool PartialMergeMulti(const rocksdb::Slice& key,
./c-deps/libroach/merge.cc:263:                                 const std::deque<rocksdb::Slice>& operand_list,
./c-deps/libroach/merge.cc:265:                                 rocksdb::Logger* logger) const WARN_UNUSED_RESULT {
./c-deps/libroach/merge.cc:275:      rocksdb::Warn(logger, "serialization error");
./c-deps/libroach/merge.cc:283:                const rocksdb::Slice& operand, bool full_merge,
./c-deps/libroach/merge.cc:284:                rocksdb::Logger* logger) const WARN_UNUSED_RESULT {
./c-deps/libroach/merge.cc:287:      rocksdb::Warn(logger, "corrupted operand value");
./c-deps/libroach/merge.cc:298:                                    bool full_merge, rocksdb::Logger* logger) {
./c-deps/libroach/merge.cc:301:      rocksdb::Warn(logger, "inconsistent value types for merge (left = bytes, right = ?)");
./c-deps/libroach/merge.cc:315:        rocksdb::Warn(logger, "inconsistent value types for merging time "
./c-deps/libroach/merge.cc:322:      const rocksdb::Slice rdata = ValueDataBytes(right.raw_bytes());
./c-deps/libroach/merge.cc:353:rocksdb::MergeOperator* NewMergeOperator() { return new DBMergeOperator; }
./c-deps/libroach/env_switching.cc:38:class SwitchingEnv : public rocksdb::EnvWrapper {
./c-deps/libroach/env_switching.cc:40:  SwitchingEnv(rocksdb::Env* base_env, std::shared_ptr<rocksdb::Logger> logger)
./c-deps/libroach/env_switching.cc:41:      : rocksdb::EnvWrapper(base_env), logger(logger) {
./c-deps/libroach/env_switching.cc:42:    rocksdb::Info(logger, "initialized switching env");
./c-deps/libroach/env_switching.cc:46:  std::shared_ptr<rocksdb::Logger> logger;
./c-deps/libroach/env_switching.cc:49:rocksdb::Env* NewSwitchingEnv(rocksdb::Env* base_env, std::shared_ptr<rocksdb::Logger> logger) {
./c-deps/libroach/env_switching.cc:50:  return new SwitchingEnv(base_env ? base_env : rocksdb::Env::Default(), logger);
./c-deps/libroach/mvcc.cc:25:bool IsValidSplitKey(const rocksdb::Slice& key, bool allow_meta2_splits) {
./c-deps/libroach/mvcc.cc:71:MVCCStatsResult MVCCComputeStatsInternal(::rocksdb::Iterator* const iter_rep, DBKey start,
./c-deps/libroach/mvcc.cc:90:    const rocksdb::Slice key = iter_rep->key();
./c-deps/libroach/mvcc.cc:91:    const rocksdb::Slice value = iter_rep->value();
./c-deps/libroach/mvcc.cc:93:    rocksdb::Slice decoded_key;
./c-deps/libroach/mvcc.cc:101:    const bool isSys = (rocksdb::Slice(decoded_key).compare(kLocalMax) < 0);
./c-deps/libroach/mvcc.cc:211:  const rocksdb::Slice min_split_key = ToSlice(min_split.key);
./c-deps/libroach/mvcc.cc:220:    const rocksdb::Slice key = iter_rep->key();
./c-deps/libroach/mvcc.cc:221:    rocksdb::Slice decoded_key;
./c-deps/rocksdb-rebuild:1:Bump the version below when changing rocksdb CMake flags. Search for "BUILD
./pkg/ui/src/views/cluster/containers/nodeGraphs/dashboards/storage.tsx:86:        <Metric name="cr.store.rocksdb.read-amplification" title="Read Amplification" aggregateAvg />
./pkg/ui/src/views/cluster/containers/nodeGraphs/dashboards/storage.tsx:96:        <Metric name="cr.store.rocksdb.num-sstables" title="SSTables" />
./pkg/storage/store.go:686:	// rocksdb but before in-memory side effects have been processed.
./pkg/storage/store.go:903:		func(ctx context.Context) { s.asyncGossipStore(ctx, "compactor-initiated rocksdb compaction") },
./pkg/storage/store.go:4549:	if rocksdb, ok := s.engine.(*engine.RocksDB); ok {
./pkg/storage/store.go:4550:		sstables := rocksdb.GetSSTables()
./pkg/storage/store.go:4558:				rocksdb.GetCompactionStats(), humanizeutil.IBytes(stats.PendingCompactionBytesEstimate))
./pkg/storage/replica_raftstorage.go:463:// snapshot creates an OutgoingSnapshot containing a rocksdb snapshot for the
./pkg/storage/replica_raftstorage.go:727:		"(id=%s, encoded size=%d, %d rocksdb batches, %d log entries)",
./pkg/storage/replica_sideload_disk.go:85:		// https://github.com/facebook/rocksdb/blob/56656e12d67d8a63f1e4c4214da9feeec2bd442b/env/env_posix.cc#L171
./pkg/storage/engine/rocksdb.go:51:// TODO(tamird): why does rocksdb not link jemalloc,snappy statically?
./pkg/storage/engine/rocksdb.go:56:// #cgo LDFLAGS: -lrocksdb
./pkg/storage/engine/rocksdb.go:66:	"rocksdb.min_wal_sync_interval",
./pkg/storage/engine/rocksdb.go:71:var rocksdbConcurrency = envutil.EnvOrDefaultInt(
./pkg/storage/engine/rocksdb.go:88://export rocksDBLog
./pkg/storage/engine/rocksdb.go:89:func rocksDBLog(s *C.char, n C.int) {
./pkg/storage/engine/rocksdb.go:90:	// Note that rocksdb logging is only enabled if log.V(3) is true
./pkg/storage/engine/rocksdb.go:261:// https://github.com/facebook/rocksdb/wiki/RocksDB-Tuning-Guide#level-style-compaction
./pkg/storage/engine/rocksdb.go:477:		pending    []*rocksDBBatch
./pkg/storage/engine/rocksdb.go:484:		pending []*rocksDBBatch
./pkg/storage/engine/rocksdb.go:489:		m map[*rocksDBIterator][]byte
./pkg/storage/engine/rocksdb.go:564:		log.Infof(context.TODO(), "opening rocksdb instance at %q", r.cfg.Dir)
./pkg/storage/engine/rocksdb.go:574:			return fmt.Errorf("incompatible rocksdb data version, current:%d, on disk:%d, minimum:%d",
./pkg/storage/engine/rocksdb.go:593:			log.Infof(context.TODO(), "opening in memory rocksdb instance")
./pkg/storage/engine/rocksdb.go:609:			num_cpu:           C.int(rocksdbConcurrency),
./pkg/storage/engine/rocksdb.go:614:			rocksdb_options:   goToCSlice([]byte(r.cfg.RocksDBOptions)),
./pkg/storage/engine/rocksdb.go:618:		return errors.Wrap(err, "could not open rocksdb instance")
./pkg/storage/engine/rocksdb.go:630:	r.iters.m = make(map[*rocksDBIterator][]byte)
./pkg/storage/engine/rocksdb.go:686:		log.Errorf(context.TODO(), "closing unopened rocksdb instance")
./pkg/storage/engine/rocksdb.go:691:			log.Infof(context.TODO(), "closing in-memory rocksdb instance")
./pkg/storage/engine/rocksdb.go:698:		log.Infof(context.TODO(), "closing rocksdb instance at %q", r.cfg.Dir)
./pkg/storage/engine/rocksdb.go:834:			// This can happen if rocksdb removes files out from under us - just keep
./pkg/storage/engine/rocksdb.go:910:// NewIterator returns an iterator over this rocksdb engine.
./pkg/storage/engine/rocksdb.go:917:	it := &rocksDBIterator{}
./pkg/storage/engine/rocksdb.go:923:// read-only rocksDBSnapshot engine.
./pkg/storage/engine/rocksdb.go:928:	return &rocksDBSnapshot{
./pkg/storage/engine/rocksdb.go:934:// NewReadOnly returns a new ReadWriter wrapping this rocksdb engine.
./pkg/storage/engine/rocksdb.go:936:	return &rocksDBReadOnly{
./pkg/storage/engine/rocksdb.go:942:type rocksDBReadOnly struct {
./pkg/storage/engine/rocksdb.go:949:func (r *rocksDBReadOnly) Close() {
./pkg/storage/engine/rocksdb.go:951:		panic("closing an already-closed rocksDBReadOnly")
./pkg/storage/engine/rocksdb.go:954:	if i := &r.prefixIter.rocksDBIterator; i.iter != nil {
./pkg/storage/engine/rocksdb.go:957:	if i := &r.normalIter.rocksDBIterator; i.iter != nil {
./pkg/storage/engine/rocksdb.go:963:func (r *rocksDBReadOnly) Closed() bool {
./pkg/storage/engine/rocksdb.go:967:func (r *rocksDBReadOnly) Get(key MVCCKey) ([]byte, error) {
./pkg/storage/engine/rocksdb.go:969:		panic("using a closed rocksDBReadOnly")
./pkg/storage/engine/rocksdb.go:974:func (r *rocksDBReadOnly) GetProto(
./pkg/storage/engine/rocksdb.go:978:		panic("using a closed rocksDBReadOnly")
./pkg/storage/engine/rocksdb.go:983:func (r *rocksDBReadOnly) Iterate(start, end MVCCKey, f func(MVCCKeyValue) (bool, error)) error {
./pkg/storage/engine/rocksdb.go:985:		panic("using a closed rocksDBReadOnly")
./pkg/storage/engine/rocksdb.go:992:// rocksDBReadOnly. A panic will be thrown if multiple prefix or normal (non-prefix)
./pkg/storage/engine/rocksdb.go:993:// iterators are used simultaneously on the same rocksDBReadOnly.
./pkg/storage/engine/rocksdb.go:994:func (r *rocksDBReadOnly) NewIterator(prefix bool) Iterator {
./pkg/storage/engine/rocksdb.go:996:		panic("using a closed rocksDBReadOnly")
./pkg/storage/engine/rocksdb.go:1002:	if iter.rocksDBIterator.iter == nil {
./pkg/storage/engine/rocksdb.go:1003:		iter.rocksDBIterator.init(r.parent.rdb, prefix, r, r.parent)
./pkg/storage/engine/rocksdb.go:1012:func (r *rocksDBReadOnly) NewTimeBoundIterator(start, end hlc.Timestamp) Iterator {
./pkg/storage/engine/rocksdb.go:1014:		panic("using a closed rocksDBReadOnly")
./pkg/storage/engine/rocksdb.go:1016:	it := &rocksDBIterator{}
./pkg/storage/engine/rocksdb.go:1021:// Writer methods are not implemented for rocksDBReadOnly. Ideally, the code could be refactored so that
./pkg/storage/engine/rocksdb.go:1025:func (r *rocksDBReadOnly) ApplyBatchRepr(repr []byte, sync bool) error {
./pkg/storage/engine/rocksdb.go:1029:func (r *rocksDBReadOnly) Clear(key MVCCKey) error {
./pkg/storage/engine/rocksdb.go:1033:func (r *rocksDBReadOnly) ClearRange(start, end MVCCKey) error {
./pkg/storage/engine/rocksdb.go:1037:func (r *rocksDBReadOnly) ClearIterRange(iter Iterator, start, end MVCCKey) error {
./pkg/storage/engine/rocksdb.go:1041:func (r *rocksDBReadOnly) Merge(key MVCCKey, value []byte) error {
./pkg/storage/engine/rocksdb.go:1045:func (r *rocksDBReadOnly) Put(key MVCCKey, value []byte) error {
./pkg/storage/engine/rocksdb.go:1049:func (r *rocksDBReadOnly) LogData(data []byte) error {
./pkg/storage/engine/rocksdb.go:1053:// NewBatch returns a new batch wrapping this rocksdb engine.
./pkg/storage/engine/rocksdb.go:1058:// NewWriteOnlyBatch returns a new write-only batch wrapping this rocksdb
./pkg/storage/engine/rocksdb.go:1136:// https://github.com/facebook/rocksdb/wiki/RocksDB-Tuning-Guide#rocksdb-statistics.
./pkg/storage/engine/rocksdb.go:1141:type rocksDBSnapshot struct {
./pkg/storage/engine/rocksdb.go:1147:func (r *rocksDBSnapshot) Close() {
./pkg/storage/engine/rocksdb.go:1153:func (r *rocksDBSnapshot) Closed() bool {
./pkg/storage/engine/rocksdb.go:1159:func (r *rocksDBSnapshot) Get(key MVCCKey) ([]byte, error) {
./pkg/storage/engine/rocksdb.go:1163:func (r *rocksDBSnapshot) GetProto(
./pkg/storage/engine/rocksdb.go:1172:func (r *rocksDBSnapshot) Iterate(start, end MVCCKey, f func(MVCCKeyValue) (bool, error)) error {
./pkg/storage/engine/rocksdb.go:1178:func (r *rocksDBSnapshot) NewIterator(prefix bool) Iterator {
./pkg/storage/engine/rocksdb.go:1183:func (r *rocksDBSnapshot) NewTimeBoundIterator(start, end hlc.Timestamp) Iterator {
./pkg/storage/engine/rocksdb.go:1187:// reusableIterator wraps rocksDBIterator and allows reuse of an iterator
./pkg/storage/engine/rocksdb.go:1190:	rocksDBIterator
./pkg/storage/engine/rocksdb.go:1195:	// reusableIterator.Close() leaves the underlying rocksdb iterator open until
./pkg/storage/engine/rocksdb.go:1204:	*rocksDBBatch
./pkg/storage/engine/rocksdb.go:1226:	if iter.rocksDBIterator.iter == nil {
./pkg/storage/engine/rocksdb.go:1228:			iter.rocksDBIterator.init(r.parent.rdb, prefix, r, r.parent)
./pkg/storage/engine/rocksdb.go:1231:			iter.rocksDBIterator.init(r.batch, prefix, r, r.parent)
./pkg/storage/engine/rocksdb.go:1302:	if i := &r.prefixIter.rocksDBIterator; i.iter != nil {
./pkg/storage/engine/rocksdb.go:1305:	if i := &r.normalIter.rocksDBIterator; i.iter != nil {
./pkg/storage/engine/rocksdb.go:1310:// batchIterator wraps rocksDBIterator and ensures that the buffered mutations
./pkg/storage/engine/rocksdb.go:1313:	iter  rocksDBIterator
./pkg/storage/engine/rocksdb.go:1314:	batch *rocksDBBatch
./pkg/storage/engine/rocksdb.go:1423:	// reusableBatchIterator.Close() leaves the underlying rocksdb iterator open
./pkg/storage/engine/rocksdb.go:1431:type rocksDBBatch struct {
./pkg/storage/engine/rocksdb.go:1451:func newRocksDBBatch(parent *RocksDB, writeOnly bool) *rocksDBBatch {
./pkg/storage/engine/rocksdb.go:1452:	r := &rocksDBBatch{
./pkg/storage/engine/rocksdb.go:1456:	r.distinct.rocksDBBatch = r
./pkg/storage/engine/rocksdb.go:1460:func (r *rocksDBBatch) ensureBatch() {
./pkg/storage/engine/rocksdb.go:1466:func (r *rocksDBBatch) Close() {
./pkg/storage/engine/rocksdb.go:1485:func (r *rocksDBBatch) Closed() bool {
./pkg/storage/engine/rocksdb.go:1489:func (r *rocksDBBatch) Put(key MVCCKey, value []byte) error {
./pkg/storage/engine/rocksdb.go:1498:func (r *rocksDBBatch) Merge(key MVCCKey, value []byte) error {
./pkg/storage/engine/rocksdb.go:1507:func (r *rocksDBBatch) LogData(data []byte) error {
./pkg/storage/engine/rocksdb.go:1518:func (r *rocksDBBatch) ApplyBatchRepr(repr []byte, sync bool) error {
./pkg/storage/engine/rocksdb.go:1525:func (r *rocksDBBatch) Get(key MVCCKey) ([]byte, error) {
./pkg/storage/engine/rocksdb.go:1537:func (r *rocksDBBatch) GetProto(
./pkg/storage/engine/rocksdb.go:1551:func (r *rocksDBBatch) Iterate(start, end MVCCKey, f func(MVCCKeyValue) (bool, error)) error {
./pkg/storage/engine/rocksdb.go:1563:func (r *rocksDBBatch) Clear(key MVCCKey) error {
./pkg/storage/engine/rocksdb.go:1572:func (r *rocksDBBatch) ClearRange(start, end MVCCKey) error {
./pkg/storage/engine/rocksdb.go:1582:func (r *rocksDBBatch) ClearIterRange(iter Iterator, start, end MVCCKey) error {
./pkg/storage/engine/rocksdb.go:1596:func (r *rocksDBBatch) NewIterator(prefix bool) Iterator {
./pkg/storage/engine/rocksdb.go:1620:func (r *rocksDBBatch) NewTimeBoundIterator(start, end hlc.Timestamp) Iterator {
./pkg/storage/engine/rocksdb.go:1638:func (r *rocksDBBatch) Commit(syncCommit bool) error {
./pkg/storage/engine/rocksdb.go:1736:func (r *rocksDBBatch) commitInternal(sync bool) error {
./pkg/storage/engine/rocksdb.go:1774:func (r *rocksDBBatch) Empty() bool {
./pkg/storage/engine/rocksdb.go:1778:func (r *rocksDBBatch) Repr() []byte {
./pkg/storage/engine/rocksdb.go:1787:func (r *rocksDBBatch) unsafeRepr() []byte {
./pkg/storage/engine/rocksdb.go:1796:func (r *rocksDBBatch) Distinct() ReadWriter {
./pkg/storage/engine/rocksdb.go:1807:func (r *rocksDBBatch) flushMutations() {
./pkg/storage/engine/rocksdb.go:1828:type rocksDBIterator struct {
./pkg/storage/engine/rocksdb.go:1839:// TODO(peter): Is this pool useful now that rocksDBBatch.NewIterator doesn't
./pkg/storage/engine/rocksdb.go:1843:		return &rocksDBIterator{}
./pkg/storage/engine/rocksdb.go:1849:// The caller must call rocksDBIterator.Close() when finished with the
./pkg/storage/engine/rocksdb.go:1856:	r := iterPool.Get().(*rocksDBIterator)
./pkg/storage/engine/rocksdb.go:1861:func (r *rocksDBIterator) getIter() *C.DBIterator {
./pkg/storage/engine/rocksdb.go:1865:func (r *rocksDBIterator) init(rdb *C.DBEngine, prefix bool, engine Reader, parent *RocksDB) {
./pkg/storage/engine/rocksdb.go:1880:func (r *rocksDBIterator) initTimeBound(rdb *C.DBEngine, start, end hlc.Timestamp, engine Reader) {
./pkg/storage/engine/rocksdb.go:1888:func (r *rocksDBIterator) checkEngineOpen() {
./pkg/storage/engine/rocksdb.go:1894:func (r *rocksDBIterator) destroy() {
./pkg/storage/engine/rocksdb.go:1901:	*r = rocksDBIterator{}
./pkg/storage/engine/rocksdb.go:1905:func (r *rocksDBIterator) Close() {
./pkg/storage/engine/rocksdb.go:1910:func (r *rocksDBIterator) Seek(key MVCCKey) {
./pkg/storage/engine/rocksdb.go:1925:func (r *rocksDBIterator) SeekReverse(key MVCCKey) {
./pkg/storage/engine/rocksdb.go:1949:func (r *rocksDBIterator) Valid() (bool, error) {
./pkg/storage/engine/rocksdb.go:1953:func (r *rocksDBIterator) Next() {
./pkg/storage/engine/rocksdb.go:1958:func (r *rocksDBIterator) Prev() {
./pkg/storage/engine/rocksdb.go:1963:func (r *rocksDBIterator) NextKey() {
./pkg/storage/engine/rocksdb.go:1968:func (r *rocksDBIterator) PrevKey() {
./pkg/storage/engine/rocksdb.go:1973:func (r *rocksDBIterator) Key() MVCCKey {
./pkg/storage/engine/rocksdb.go:1974:	// The data returned by rocksdb_iter_{key,value} is not meant to be
./pkg/storage/engine/rocksdb.go:1980:func (r *rocksDBIterator) Value() []byte {
./pkg/storage/engine/rocksdb.go:1984:func (r *rocksDBIterator) ValueProto(msg protoutil.Message) error {
./pkg/storage/engine/rocksdb.go:1991:func (r *rocksDBIterator) UnsafeKey() MVCCKey {
./pkg/storage/engine/rocksdb.go:1995:func (r *rocksDBIterator) UnsafeValue() []byte {
./pkg/storage/engine/rocksdb.go:1999:func (r *rocksDBIterator) setState(state C.DBIterState) {
./pkg/storage/engine/rocksdb.go:2007:func (r *rocksDBIterator) ComputeStats(
./pkg/storage/engine/rocksdb.go:2032:func (r *rocksDBIterator) FindSplitKey(
./pkg/storage/engine/rocksdb.go:2044:func (r *rocksDBIterator) MVCCGet(
./pkg/storage/engine/rocksdb.go:2098:func (r *rocksDBIterator) MVCCScan(
./pkg/storage/engine/rocksdb.go:2430:	rocksDB         InMem
./pkg/storage/engine/rocksdb.go:2441:	return RocksDBSstFileReader{rocksDB: NewInMem(roachpb.Attributes{}, cacheSize)}
./pkg/storage/engine/rocksdb.go:2448:	if fr.rocksDB.RocksDB == nil {
./pkg/storage/engine/rocksdb.go:2454:	if err := fr.rocksDB.WriteFile(filename, data); err != nil {
./pkg/storage/engine/rocksdb.go:2459:		fr.rocksDB.rdb, goToCSlice([]byte(filename)), noMove, modify,
./pkg/storage/engine/rocksdb.go:2468:	if fr.rocksDB.RocksDB == nil {
./pkg/storage/engine/rocksdb.go:2471:	return fr.rocksDB.Iterate(start, end, f)
./pkg/storage/engine/rocksdb.go:2476:	return newRocksDBIterator(fr.rocksDB.rdb, prefix, fr.rocksDB, fr.rocksDB.RocksDB)
./pkg/storage/engine/rocksdb.go:2481:	if fr.rocksDB.RocksDB == nil {
./pkg/storage/engine/rocksdb.go:2484:	fr.rocksDB.RocksDB.Close()
./pkg/storage/engine/rocksdb.go:2485:	fr.rocksDB.RocksDB = nil
./pkg/storage/engine/rocksdb_test.go:169:			after.(*rocksDBIterator).engine,
./pkg/storage/engine/rocksdb_test.go:170:			after.(*rocksDBIterator).engine.Closed(),
./pkg/storage/engine/rocksdb_test.go:285:		{true, Version{-1}, "incompatible rocksdb data version, current:2, on disk:-1, minimum:0"},
./pkg/storage/engine/rocksdb_test.go:286:		{true, Version{3}, "incompatible rocksdb data version, current:2, on disk:3, minimum:0"},
./pkg/storage/engine/rocksdb_test.go:297:// openRocksDBWithVersion attempts to open a rocks db instance, optionally with
./pkg/storage/engine/rocksdb_test.go:320:	rocksdb, err := NewRocksDB(
./pkg/storage/engine/rocksdb_test.go:328:		rocksdb.Close()
./pkg/storage/engine/rocksdb_test.go:339:	rocksdb, err := NewRocksDB(
./pkg/storage/engine/rocksdb_test.go:349:	defer rocksdb.Close()
./pkg/storage/engine/rocksdb_test.go:361:		if err := MVCCPut(context.Background(), rocksdb, nil, key, ts, value, nil); err != nil {
./pkg/storage/engine/rocksdb_test.go:364:		if err := rocksdb.Flush(); err != nil {
./pkg/storage/engine/rocksdb_test.go:367:		keyOnlySize, err := rocksdb.ApproximateDiskBytes(key, key.Next())
./pkg/storage/engine/rocksdb_test.go:377:		allSize, err := rocksdb.ApproximateDiskBytes(roachpb.KeyMin, roachpb.KeyMax)
./pkg/storage/engine/rocksdb_test.go:501:	const expErr = `could not open rocksdb instance: Invalid argument: ` +
./pkg/storage/engine/rocksdb_test.go:533:		t.Fatalf("could not create new rocksdb db instance at %s: %v", dir, err)
./pkg/storage/engine/rocksdb_test.go:714:	rocksdb, err := NewRocksDB(
./pkg/storage/engine/rocksdb_test.go:722:		t.Fatalf("could not create new rocksdb db instance at %s: %v", dir, err)
./pkg/storage/engine/rocksdb_test.go:724:	defer rocksdb.Close()
./pkg/storage/engine/rocksdb_test.go:738:		if err := rocksdb.Put(key, []byte(s)); err != nil {
./pkg/storage/engine/rocksdb_test.go:742:	if err := rocksdb.Flush(); err != nil {
./pkg/storage/engine/rocksdb_test.go:746:	ssts, err := rocksdb.getUserProperties()
./pkg/storage/engine/rocksdb_test.go:761:	batch := rocksdb.NewBatch()
./pkg/storage/engine/rocksdb_test.go:816:// Regression test for https://github.com/facebook/rocksdb/issues/2752. Range
./pkg/storage/engine/rocksdb_test.go:833:		t.Fatalf("could not create new rocksdb db instance at %s: %v", dir, err)
./pkg/storage/engine/rocksdb_test.go:994:	rocksdb, err := NewRocksDB(
./pkg/storage/engine/rocksdb_test.go:1007:	rocksdb.Close()
./pkg/storage/engine/engine_test.go:162:			batch := eng.NewBatch().(*rocksDBBatch)
./pkg/storage/engine/temp_engine_test.go:40:		t.Fatalf("temp engine could not be asserted as a rocksdb instance")
./pkg/storage/engine/temp_engine.go:31:	rocksDBCfg := RocksDBConfig{
./pkg/storage/engine/temp_engine.go:39:	rocksDBCache := NewRocksDBCache(0)
./pkg/storage/engine/temp_engine.go:40:	rocksdb, err := NewRocksDB(rocksDBCfg, rocksDBCache)
./pkg/storage/engine/temp_engine.go:45:	return rocksdb, nil
./pkg/storage/engine/batch_test.go:185:		shouldPanic(t, func() { b.Close() }, "Close", "closing an already-closed rocksDBReadOnly")
./pkg/storage/engine/batch_test.go:187:			shouldPanic(t, f, string(i), "using a closed rocksDBReadOnly")
./pkg/storage/engine/batch_test.go:723:	batch := e.NewBatch().(*rocksDBBatch)
./pkg/storage/engine/batch_test.go:779:			batch := e.NewBatch().(*rocksDBBatch)
./pkg/storage/engine/batch.go:28:// These constants come from rocksdb/db/dbformat.h.
./pkg/storage/engine/batch.go:90:// rocksdb/db.cc:EncodeKey().
./pkg/storage/engine/batch.go:362:func rocksDBBatchDecodeHeader(repr []byte) (count int, orepr []byte, err error) {
./pkg/storage/engine/batch.go:376:func rocksDBBatchVarString(repr []byte) (s []byte, orepr []byte, err error) {
./pkg/storage/engine/batch.go:433:	count, repr, err := rocksDBBatchDecodeHeader(repr)
./pkg/storage/engine/batch.go:521:	s, r.repr, err = rocksDBBatchVarString(r.repr)
./pkg/storage/engine/enginepb/file_registry.proto:39:  // Env level identifies which rocksdb::Env is responsible for this file.
./pkg/storage/engine/enginepb/rocksdb.pb.go:2:// source: storage/engine/enginepb/rocksdb.proto
./pkg/storage/engine/enginepb/rocksdb.pb.go:546:func init() { proto.RegisterFile("storage/engine/enginepb/rocksdb.proto", fileDescriptorRocksdb) }
./pkg/storage/engine/enginepb/file_registry.pb.go:11:		storage/engine/enginepb/rocksdb.proto
./pkg/storage/engine/enginepb/file_registry.pb.go:79:	// Env level identifies which rocksdb::Env is responsible for this file.
./pkg/storage/engine/rocksdb_error.go:48:// c-deps/rocksdb/util/status.cc.
./pkg/storage/engine/rocksdb_error.go:52:	// string to avoid a directory such as /mnt/rocksdb/known/words from showing
./pkg/storage/engine/rocksdb_error.go:58:		if _, isSafe := rocksDBErrorDict[word]; isSafe {
./pkg/storage/engine/bench_test.go:103:		// of the keys rocksdb would create a single sstable. We want multiple
./pkg/storage/engine/bench_test.go:675:	rocksdb := setupMVCCInMemRocksDB(b, "put_delete")
./pkg/storage/engine/bench_test.go:676:	defer rocksdb.Close()
./pkg/storage/engine/bench_test.go:688:		if err := MVCCPut(context.Background(), rocksdb, nil, key, hlc.Timestamp{}, value, nil /* txn */); err != nil {
./pkg/storage/engine/bench_test.go:691:		if err := MVCCDelete(context.Background(), rocksdb, nil, key, hlc.Timestamp{}, nil /* txn */); err != nil {
./pkg/storage/engine/engine.go:248:	// refactor a bunch of code in rocksDBBatch.
./pkg/storage/engine/engine.go:306://    rocksdb/statistics.h
./pkg/storage/engine/engine.go:308:// 3. rocksdb::DB::GetProperty().
./pkg/storage/engine/engine.go:311:// https://github.com/facebook/rocksdb/wiki/Memory-usage-in-RocksDB
./pkg/storage/engine/rocksdb_error_dict.go:19:find c-deps/rocksdb/{db,env,memtable,table,util} \
./pkg/storage/engine/rocksdb_error_dict.go:37:var rocksDBErrorDict = map[string]struct{}{
./pkg/storage/engine/rocksdb_error_dict.go:745:	"rocksdb":                   {},
./pkg/storage/engine/rocksdb_error_dict.go:746:	"rocksdblite":               {},
./pkg/storage/engine/bench_rocksdb_test.go:31:	rocksdb, err := NewRocksDB(
./pkg/storage/engine/bench_rocksdb_test.go:39:		b.Fatalf("could not create new rocksdb db instance at %s: %v", dir, err)
./pkg/storage/engine/bench_rocksdb_test.go:41:	return rocksdb
./pkg/storage/replica_proposal.go:366:			// If the fs supports it, make a hard-link for rocks to ingest. We cannot
./pkg/storage/metrics.go:181:		Name: "rocksdb.block.cache.hits",
./pkg/storage/metrics.go:184:		Name: "rocksdb.block.cache.misses",
./pkg/storage/metrics.go:187:		Name: "rocksdb.block.cache.usage",
./pkg/storage/metrics.go:190:		Name: "rocksdb.block.cache.pinned-usage",
./pkg/storage/metrics.go:193:		Name: "rocksdb.bloom.filter.prefix.checked",
./pkg/storage/metrics.go:196:		Name: "rocksdb.bloom.filter.prefix.useful",
./pkg/storage/metrics.go:199:		Name: "rocksdb.memtable.total-size",
./pkg/storage/metrics.go:202:		Name: "rocksdb.flushes",
./pkg/storage/metrics.go:205:		Name: "rocksdb.compactions",
./pkg/storage/metrics.go:208:		Name: "rocksdb.table-readers-mem-estimate",
./pkg/storage/metrics.go:211:		Name: "rocksdb.read-amplification",
./pkg/storage/metrics.go:214:		Name: "rocksdb.num-sstables",
./pkg/storage/metrics.go:215:		Help: "Number of rocksdb SSTables"}
./pkg/storage/allocator_test.go:5214:		// range deletions don't immediately reclaim disk space in rocksdb.
./pkg/storage/allocator_test.go:5283:		// Simulate rocksdb compactions freeing up disk space.
./pkg/cmd/github-post/testdata/stress-fatal:547:rm -rf rocksdb.src
./pkg/cmd/github-post/testdata/stress-fatal:548:./scripts/untarxz.sh /go/src/github.com/cockroachdb/cockroach/c-deps/rocksdb.src.tar.xz -C /go/src/github.com/cockroachdb/cockroach/c-deps
./pkg/cmd/github-post/testdata/stress-fatal:549:touch /go/src/github.com/cockroachdb/cockroach/c-deps/rocksdb.src/.extracted
./pkg/cmd/github-post/testdata/stress-fatal:550:rm -rf /go/native/x86_64-pc-linux-gnu/rocksdb
./pkg/cmd/github-post/testdata/stress-fatal:551:mkdir -p /go/native/x86_64-pc-linux-gnu/rocksdb
./pkg/cmd/github-post/testdata/stress-fatal:552:cd /go/native/x86_64-pc-linux-gnu/rocksdb && cmake  /go/src/github.com/cockroachdb/cockroach/c-deps/rocksdb.src \
./pkg/cmd/github-post/testdata/stress-fatal:592:-- Build files have been written to: /go/native/x86_64-pc-linux-gnu/rocksdb
./pkg/cmd/github-post/testdata/stress-fatal:596:Scanning dependencies of target rocksdb
./pkg/cmd/github-post/testdata/stress-fatal:597:[  0%] Building CXX object CMakeFiles/rocksdb.dir/db/auto_roll_logger.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:598:[  0%] Building CXX object CMakeFiles/rocksdb.dir/db/c.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:599:[  3%] Building CXX object CMakeFiles/rocksdb.dir/db/builder.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:600:[  3%] Building CXX object CMakeFiles/rocksdb.dir/db/column_family.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:601:[  3%] Building CXX object CMakeFiles/rocksdb.dir/db/compaction.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:602:[  3%] Building CXX object CMakeFiles/rocksdb.dir/db/compaction_job.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:603:[  3%] Building CXX object CMakeFiles/rocksdb.dir/db/compacted_db_impl.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:604:[  3%] Building CXX object CMakeFiles/rocksdb.dir/db/compaction_iterator.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:605:[  6%] Building CXX object CMakeFiles/rocksdb.dir/db/compaction_picker.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:606:[  6%] Building CXX object CMakeFiles/rocksdb.dir/db/convenience.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:607:[  6%] Building CXX object CMakeFiles/rocksdb.dir/db/dbformat.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:608:[  6%] Building CXX object CMakeFiles/rocksdb.dir/db/db_filesnapshot.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:609:[  6%] Building CXX object CMakeFiles/rocksdb.dir/db/db_impl.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:610:[  6%] Building CXX object CMakeFiles/rocksdb.dir/db/db_impl_debug.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:611:[ 10%] Building CXX object CMakeFiles/rocksdb.dir/db/db_impl_experimental.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:612:[ 10%] Building CXX object CMakeFiles/rocksdb.dir/db/db_impl_readonly.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:613:[ 10%] Building CXX object CMakeFiles/rocksdb.dir/db/db_info_dumper.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:614:[ 10%] Building CXX object CMakeFiles/rocksdb.dir/db/db_iter.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:615:[ 10%] Building CXX object CMakeFiles/rocksdb.dir/db/event_helpers.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:616:[ 10%] Building CXX object CMakeFiles/rocksdb.dir/db/external_sst_file_ingestion_job.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:617:[ 10%] Building CXX object CMakeFiles/rocksdb.dir/db/experimental.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:618:[ 13%] Building CXX object CMakeFiles/rocksdb.dir/db/filename.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:619:[ 13%] Building CXX object CMakeFiles/rocksdb.dir/db/file_indexer.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:620:[ 13%] Building CXX object CMakeFiles/rocksdb.dir/db/flush_job.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:621:[ 13%] Building CXX object CMakeFiles/rocksdb.dir/db/flush_scheduler.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:622:[ 13%] Building CXX object CMakeFiles/rocksdb.dir/db/forward_iterator.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:623:[ 13%] Building CXX object CMakeFiles/rocksdb.dir/db/internal_stats.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:624:[ 13%] Building CXX object CMakeFiles/rocksdb.dir/db/log_reader.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:625:[ 17%] Building CXX object CMakeFiles/rocksdb.dir/db/log_writer.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:626:[ 17%] Building CXX object CMakeFiles/rocksdb.dir/db/malloc_stats.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:627:[ 17%] Building CXX object CMakeFiles/rocksdb.dir/db/managed_iterator.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:628:[ 17%] Building CXX object CMakeFiles/rocksdb.dir/db/memtable.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:629:[ 17%] Building CXX object CMakeFiles/rocksdb.dir/db/memtable_allocator.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:630:[ 17%] Building CXX object CMakeFiles/rocksdb.dir/db/memtable_list.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:631:[ 20%] Building CXX object CMakeFiles/rocksdb.dir/db/merge_helper.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:632:[ 20%] Building CXX object CMakeFiles/rocksdb.dir/db/merge_operator.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:633:[ 20%] Building CXX object CMakeFiles/rocksdb.dir/db/range_del_aggregator.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:634:[ 20%] Building CXX object CMakeFiles/rocksdb.dir/db/repair.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:635:[ 20%] Building CXX object CMakeFiles/rocksdb.dir/db/snapshot_impl.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:636:[ 20%] Building CXX object CMakeFiles/rocksdb.dir/db/table_cache.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:637:[ 20%] Building CXX object CMakeFiles/rocksdb.dir/db/table_properties_collector.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:638:[ 24%] Building CXX object CMakeFiles/rocksdb.dir/db/transaction_log_impl.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:639:[ 24%] Building CXX object CMakeFiles/rocksdb.dir/db/version_builder.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:640:[ 24%] Building CXX object CMakeFiles/rocksdb.dir/db/version_edit.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:641:[ 24%] Building CXX object CMakeFiles/rocksdb.dir/db/version_set.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:642:[ 24%] Building CXX object CMakeFiles/rocksdb.dir/db/wal_manager.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:643:[ 24%] Building CXX object CMakeFiles/rocksdb.dir/db/write_batch.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:644:[ 24%] Building CXX object CMakeFiles/rocksdb.dir/db/write_batch_base.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:645:[ 27%] Building CXX object CMakeFiles/rocksdb.dir/db/write_controller.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:646:[ 27%] Building CXX object CMakeFiles/rocksdb.dir/db/write_thread.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:647:[ 27%] Building CXX object CMakeFiles/rocksdb.dir/memtable/hash_cuckoo_rep.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:648:[ 27%] Building CXX object CMakeFiles/rocksdb.dir/memtable/hash_linklist_rep.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:649:[ 27%] Building CXX object CMakeFiles/rocksdb.dir/memtable/hash_skiplist_rep.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:650:[ 27%] Building CXX object CMakeFiles/rocksdb.dir/memtable/skiplistrep.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:651:[ 31%] Building CXX object CMakeFiles/rocksdb.dir/memtable/vectorrep.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:652:[ 31%] Building CXX object CMakeFiles/rocksdb.dir/port/stack_trace.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:653:[ 31%] Building CXX object CMakeFiles/rocksdb.dir/table/adaptive_table_factory.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:654:[ 31%] Building CXX object CMakeFiles/rocksdb.dir/table/block.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:655:[ 31%] Building CXX object CMakeFiles/rocksdb.dir/table/block_based_filter_block.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:656:[ 31%] Building CXX object CMakeFiles/rocksdb.dir/table/block_based_table_builder.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:657:[ 31%] Building CXX object CMakeFiles/rocksdb.dir/table/block_based_table_factory.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:658:[ 34%] Building CXX object CMakeFiles/rocksdb.dir/table/block_based_table_reader.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:659:[ 34%] Building CXX object CMakeFiles/rocksdb.dir/table/block_builder.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:660:[ 34%] Building CXX object CMakeFiles/rocksdb.dir/table/block_prefix_index.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:661:[ 34%] Building CXX object CMakeFiles/rocksdb.dir/table/bloom_block.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:662:[ 34%] Building CXX object CMakeFiles/rocksdb.dir/table/cuckoo_table_builder.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:663:[ 34%] Building CXX object CMakeFiles/rocksdb.dir/table/cuckoo_table_factory.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:664:[ 34%] Building CXX object CMakeFiles/rocksdb.dir/table/cuckoo_table_reader.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:665:[ 37%] Building CXX object CMakeFiles/rocksdb.dir/table/flush_block_policy.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:666:[ 37%] Building CXX object CMakeFiles/rocksdb.dir/table/format.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:667:[ 37%] Building CXX object CMakeFiles/rocksdb.dir/table/full_filter_block.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:668:[ 37%] Building CXX object CMakeFiles/rocksdb.dir/table/get_context.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:669:[ 37%] Building CXX object CMakeFiles/rocksdb.dir/table/index_builder.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:670:[ 37%] Building CXX object CMakeFiles/rocksdb.dir/table/iterator.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:671:[ 41%] Building CXX object CMakeFiles/rocksdb.dir/table/merging_iterator.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:672:[ 41%] Building CXX object CMakeFiles/rocksdb.dir/table/sst_file_writer.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:673:[ 41%] Building CXX object CMakeFiles/rocksdb.dir/table/meta_blocks.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:674:[ 41%] Building CXX object CMakeFiles/rocksdb.dir/table/partitioned_filter_block.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:675:[ 41%] Building CXX object CMakeFiles/rocksdb.dir/table/plain_table_builder.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:676:[ 41%] Building CXX object CMakeFiles/rocksdb.dir/table/plain_table_factory.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:677:[ 41%] Building CXX object CMakeFiles/rocksdb.dir/table/plain_table_index.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:678:[ 44%] Building CXX object CMakeFiles/rocksdb.dir/table/plain_table_key_coding.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:679:[ 44%] Building CXX object CMakeFiles/rocksdb.dir/table/plain_table_reader.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:680:[ 44%] Building CXX object CMakeFiles/rocksdb.dir/table/persistent_cache_helper.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:681:[ 44%] Building CXX object CMakeFiles/rocksdb.dir/table/table_properties.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:682:[ 44%] Building CXX object CMakeFiles/rocksdb.dir/table/two_level_iterator.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:683:[ 44%] Building CXX object CMakeFiles/rocksdb.dir/tools/sst_dump_tool.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:684:[ 44%] Building CXX object CMakeFiles/rocksdb.dir/tools/db_bench_tool.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:685:[ 48%] Building CXX object CMakeFiles/rocksdb.dir/tools/dump/db_dump_tool.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:686:[ 48%] Building CXX object CMakeFiles/rocksdb.dir/util/arena.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:687:[ 48%] Building CXX object CMakeFiles/rocksdb.dir/util/bloom.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:688:[ 48%] Building CXX object CMakeFiles/rocksdb.dir/util/cf_options.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:689:[ 48%] Building CXX object CMakeFiles/rocksdb.dir/util/clock_cache.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:690:[ 48%] Building CXX object CMakeFiles/rocksdb.dir/util/coding.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:691:[ 51%] Building CXX object CMakeFiles/rocksdb.dir/util/compaction_job_stats_impl.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:692:[ 51%] Building CXX object CMakeFiles/rocksdb.dir/util/comparator.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:693:[ 51%] Building CXX object CMakeFiles/rocksdb.dir/util/concurrent_arena.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:694:[ 51%] Building CXX object CMakeFiles/rocksdb.dir/util/crc32c.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:695:[ 51%] Building CXX object CMakeFiles/rocksdb.dir/util/db_options.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:696:[ 51%] Building CXX object CMakeFiles/rocksdb.dir/util/delete_scheduler.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:697:[ 51%] Building CXX object CMakeFiles/rocksdb.dir/util/dynamic_bloom.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:698:[ 55%] Building CXX object CMakeFiles/rocksdb.dir/util/env.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:699:[ 55%] Building CXX object CMakeFiles/rocksdb.dir/util/env_chroot.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:700:[ 55%] Building CXX object CMakeFiles/rocksdb.dir/util/env_hdfs.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:701:[ 55%] Building CXX object CMakeFiles/rocksdb.dir/util/event_logger.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:702:[ 55%] Building CXX object CMakeFiles/rocksdb.dir/util/file_util.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:703:[ 55%] Building CXX object CMakeFiles/rocksdb.dir/util/file_reader_writer.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:704:[ 58%] Building CXX object CMakeFiles/rocksdb.dir/util/sst_file_manager_impl.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:705:[ 58%] Building CXX object CMakeFiles/rocksdb.dir/util/filter_policy.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:706:[ 58%] Building CXX object CMakeFiles/rocksdb.dir/util/hash.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:707:[ 58%] Building CXX object CMakeFiles/rocksdb.dir/util/histogram.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:708:[ 58%] Building CXX object CMakeFiles/rocksdb.dir/util/histogram_windowing.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:709:[ 58%] Building CXX object CMakeFiles/rocksdb.dir/util/instrumented_mutex.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:710:[ 58%] Building CXX object CMakeFiles/rocksdb.dir/util/iostats_context.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:711:[ 62%] Building CXX object CMakeFiles/rocksdb.dir/util/lru_cache.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:712:[ 62%] Building CXX object CMakeFiles/rocksdb.dir/tools/ldb_cmd.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:713:[ 62%] Building CXX object CMakeFiles/rocksdb.dir/tools/ldb_tool.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:714:[ 62%] Building CXX object CMakeFiles/rocksdb.dir/util/logging.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:715:[ 62%] Building CXX object CMakeFiles/rocksdb.dir/util/log_buffer.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:716:[ 62%] Building CXX object CMakeFiles/rocksdb.dir/util/memenv.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:717:[ 62%] Building CXX object CMakeFiles/rocksdb.dir/util/murmurhash.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:718:[ 65%] Building CXX object CMakeFiles/rocksdb.dir/util/options.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:719:[ 65%] Building CXX object CMakeFiles/rocksdb.dir/util/options_helper.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:720:[ 65%] Building CXX object CMakeFiles/rocksdb.dir/util/options_parser.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:721:[ 65%] Building CXX object CMakeFiles/rocksdb.dir/util/options_sanity_check.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:722:[ 65%] Building CXX object CMakeFiles/rocksdb.dir/util/perf_context.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:723:[ 65%] Building CXX object CMakeFiles/rocksdb.dir/util/perf_level.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:724:[ 68%] Building CXX object CMakeFiles/rocksdb.dir/util/random.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:725:[ 68%] Building CXX object CMakeFiles/rocksdb.dir/util/rate_limiter.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:726:[ 68%] Building CXX object CMakeFiles/rocksdb.dir/util/sharded_cache.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:727:[ 68%] Building CXX object CMakeFiles/rocksdb.dir/util/slice.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:728:[ 68%] Building CXX object CMakeFiles/rocksdb.dir/util/statistics.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:729:[ 68%] Building CXX object CMakeFiles/rocksdb.dir/util/status.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:730:[ 68%] Building CXX object CMakeFiles/rocksdb.dir/util/status_message.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:731:[ 72%] Building CXX object CMakeFiles/rocksdb.dir/util/string_util.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:732:[ 72%] Building CXX object CMakeFiles/rocksdb.dir/util/sync_point.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:733:[ 72%] Building CXX object CMakeFiles/rocksdb.dir/util/testutil.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:734:[ 72%] Building CXX object CMakeFiles/rocksdb.dir/util/thread_local.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:735:[ 72%] Building CXX object CMakeFiles/rocksdb.dir/util/threadpool_imp.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:736:[ 72%] Building CXX object CMakeFiles/rocksdb.dir/util/thread_status_impl.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:737:[ 72%] Building CXX object CMakeFiles/rocksdb.dir/util/thread_status_updater.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:738:[ 75%] Building CXX object CMakeFiles/rocksdb.dir/util/thread_status_util.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:739:[ 75%] Building CXX object CMakeFiles/rocksdb.dir/util/thread_status_util_debug.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:740:[ 75%] Building CXX object CMakeFiles/rocksdb.dir/util/transaction_test_util.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:741:[ 75%] Building CXX object CMakeFiles/rocksdb.dir/util/xxhash.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:742:[ 75%] Building CXX object CMakeFiles/rocksdb.dir/utilities/backupable/backupable_db.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:743:[ 75%] Building CXX object CMakeFiles/rocksdb.dir/utilities/blob_db/blob_db.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:744:[ 79%] Building CXX object CMakeFiles/rocksdb.dir/utilities/checkpoint/checkpoint.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:745:[ 79%] Building CXX object CMakeFiles/rocksdb.dir/utilities/compaction_filters/remove_emptyvalue_compactionfilter.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:746:[ 79%] Building CXX object CMakeFiles/rocksdb.dir/utilities/date_tiered/date_tiered_db_impl.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:747:[ 79%] Building CXX object CMakeFiles/rocksdb.dir/utilities/document/document_db.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:748:[ 79%] Building CXX object CMakeFiles/rocksdb.dir/utilities/document/json_document.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:749:[ 79%] Building CXX object CMakeFiles/rocksdb.dir/utilities/document/json_document_builder.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:750:[ 79%] Building CXX object CMakeFiles/rocksdb.dir/utilities/env_mirror.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:751:[ 82%] Building CXX object CMakeFiles/rocksdb.dir/utilities/geodb/geodb_impl.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:752:[ 82%] Building CXX object CMakeFiles/rocksdb.dir/utilities/leveldb_options/leveldb_options.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:753:[ 82%] Building CXX object CMakeFiles/rocksdb.dir/utilities/lua/rocks_lua_compaction_filter.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:754:[ 82%] Building CXX object CMakeFiles/rocksdb.dir/utilities/memory/memory_util.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:755:[ 82%] Building CXX object CMakeFiles/rocksdb.dir/utilities/merge_operators/string_append/stringappend.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:756:[ 82%] Building CXX object CMakeFiles/rocksdb.dir/utilities/merge_operators/string_append/stringappend2.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:757:[ 82%] Building CXX object CMakeFiles/rocksdb.dir/utilities/merge_operators/put.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:758:[ 86%] Building CXX object CMakeFiles/rocksdb.dir/utilities/merge_operators/max.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:759:[ 86%] Building CXX object CMakeFiles/rocksdb.dir/utilities/merge_operators/uint64add.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:760:[ 86%] Building CXX object CMakeFiles/rocksdb.dir/utilities/option_change_migration/option_change_migration.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:761:[ 86%] Building CXX object CMakeFiles/rocksdb.dir/utilities/options/options_util.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:762:[ 86%] Building CXX object CMakeFiles/rocksdb.dir/utilities/persistent_cache/block_cache_tier.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:763:[ 86%] Building CXX object CMakeFiles/rocksdb.dir/utilities/persistent_cache/block_cache_tier_file.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:764:[ 89%] Building CXX object CMakeFiles/rocksdb.dir/utilities/persistent_cache/block_cache_tier_metadata.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:765:[ 89%] Building CXX object CMakeFiles/rocksdb.dir/utilities/persistent_cache/persistent_cache_tier.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:766:[ 89%] Building CXX object CMakeFiles/rocksdb.dir/utilities/persistent_cache/volatile_tier_impl.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:767:[ 89%] Building CXX object CMakeFiles/rocksdb.dir/utilities/redis/redis_lists.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:768:[ 89%] Building CXX object CMakeFiles/rocksdb.dir/utilities/simulator_cache/sim_cache.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:769:[ 89%] Building CXX object CMakeFiles/rocksdb.dir/utilities/spatialdb/spatial_db.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:770:[ 89%] Building CXX object CMakeFiles/rocksdb.dir/utilities/table_properties_collectors/compact_on_deletion_collector.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:771:[ 93%] Building CXX object CMakeFiles/rocksdb.dir/utilities/transactions/optimistic_transaction_impl.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:772:[ 93%] Building CXX object CMakeFiles/rocksdb.dir/utilities/transactions/optimistic_transaction_db_impl.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:773:[ 93%] Building CXX object CMakeFiles/rocksdb.dir/utilities/transactions/transaction_base.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:774:[ 93%] Building CXX object CMakeFiles/rocksdb.dir/utilities/transactions/transaction_impl.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:775:[ 93%] Building CXX object CMakeFiles/rocksdb.dir/utilities/transactions/transaction_db_impl.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:776:[ 93%] Building CXX object CMakeFiles/rocksdb.dir/utilities/transactions/transaction_db_mutex_impl.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:777:[ 93%] Building CXX object CMakeFiles/rocksdb.dir/utilities/transactions/transaction_lock_mgr.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:778:[ 96%] Building CXX object CMakeFiles/rocksdb.dir/utilities/transactions/transaction_util.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:779:[ 96%] Building CXX object CMakeFiles/rocksdb.dir/utilities/ttl/db_ttl_impl.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:780:[ 96%] Building CXX object CMakeFiles/rocksdb.dir/utilities/write_batch_with_index/write_batch_with_index.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:781:[ 96%] Building CXX object CMakeFiles/rocksdb.dir/utilities/write_batch_with_index/write_batch_with_index_internal.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:782:[ 96%] Building CXX object CMakeFiles/rocksdb.dir/utilities/col_buf_encoder.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:783:[ 96%] Building CXX object CMakeFiles/rocksdb.dir/utilities/col_buf_decoder.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:784:[100%] Building CXX object CMakeFiles/rocksdb.dir/utilities/column_aware_encoding_util.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:785:[100%] Building CXX object CMakeFiles/rocksdb.dir/port/port_posix.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:786:[100%] Building CXX object CMakeFiles/rocksdb.dir/util/env_posix.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:787:[100%] Building CXX object CMakeFiles/rocksdb.dir/util/io_posix.cc.o
./pkg/cmd/github-post/testdata/stress-fatal:788:[100%] Linking CXX static library librocksdb.a
./pkg/cmd/github-post/testdata/stress-fatal:789:[100%] Built target rocksdb
./pkg/cmd/github-post/testdata/stress-fatal:3238:I170517 07:32:12.707836 23433 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 21 (id=9a2be9c8, encoded size=8186, 1 rocksdb batches, 11 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3244:I170517 07:32:12.754893 23649 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 23 (id=83aedee2, encoded size=9734, 1 rocksdb batches, 13 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3251:I170517 07:32:13.062662 23692 storage/replica_raftstorage.go:597  [s2,r3/?:{-}] applying preemptive snapshot at index 11 (id=7a6b80b5, encoded size=459, 1 rocksdb batches, 1 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3257:I170517 07:32:13.083239 23551 storage/replica_raftstorage.go:597  [s4,r3/?:{-}] applying preemptive snapshot at index 13 (id=73b36888, encoded size=1969, 1 rocksdb batches, 3 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3263:I170517 07:32:13.166430 23748 storage/replica_raftstorage.go:597  [s2,r2/?:{-}] applying preemptive snapshot at index 11 (id=f0ce6081, encoded size=3537, 1 rocksdb batches, 1 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3269:I170517 07:32:13.196957 23734 storage/replica_raftstorage.go:597  [s3,r2/?:{-}] applying preemptive snapshot at index 13 (id=a33b3006, encoded size=5052, 1 rocksdb batches, 3 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3347:I170517 07:32:14.746637 24254 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=376af6d8, encoded size=5504, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3364:I170517 07:32:14.839394 25105 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=cbad1eb5, encoded size=5504, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3388:I170517 07:32:16.033165 25575 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 14 (id=0c00ffe0, encoded size=5779, 1 rocksdb batches, 4 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3394:I170517 07:32:16.052065 25120 storage/replica_raftstorage.go:597  [s2,r1/?:/M{in-ax}] applying preemptive snapshot at index 16 (id=d08c0dce, encoded size=7302, 1 rocksdb batches, 6 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3409:I170517 07:32:16.295847 25844 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 17 (id=7b36df72, encoded size=4696, 1 rocksdb batches, 2 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3427:I170517 07:32:16.543897 26202 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=bae04f15, encoded size=5574, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3434:I170517 07:32:16.559836 26156 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 17 (id=78d59278, encoded size=7121, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3456:I170517 07:32:17.017302 26378 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 16 (id=523b83f0, encoded size=5989, 1 rocksdb batches, 6 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3462:I170517 07:32:17.040190 26554 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 18 (id=1f309fd7, encoded size=7536, 1 rocksdb batches, 8 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3482:I170517 07:32:17.264583 26678 storage/replica_raftstorage.go:597  [s2,r1/2:/M{in-ax}] applying Raft snapshot at index 23 (id=b97f2250, encoded size=5298, 1 rocksdb batches, 2 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3498:I170517 07:32:17.416824 27157 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 16 (id=626d8c20, encoded size=5989, 1 rocksdb batches, 6 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3504:I170517 07:32:17.435749 27202 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 18 (id=451c6ace, encoded size=7536, 1 rocksdb batches, 8 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3528:I170517 07:32:17.980457 27361 storage/replica_raftstorage.go:597  [s2,r1/2:/M{in-ax}] applying Raft snapshot at index 27 (id=0ad02963, encoded size=6771, 1 rocksdb batches, 6 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3578:I170517 07:32:18.398083 28279 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 18 (id=9d8f84e2, encoded size=6963, 1 rocksdb batches, 8 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3584:I170517 07:32:18.416519 28393 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 20 (id=3799fa29, encoded size=8523, 1 rocksdb batches, 10 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3591:I170517 07:32:18.479226 28399 storage/replica_raftstorage.go:597  [s4,r1/?:{-}] applying preemptive snapshot at index 22 (id=b803023c, encoded size=10147, 1 rocksdb batches, 12 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3597:I170517 07:32:18.531586 28421 storage/replica_raftstorage.go:597  [s5,r1/?:{-}] applying preemptive snapshot at index 24 (id=4db3d8c1, encoded size=11835, 1 rocksdb batches, 14 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3621:I170517 07:32:18.757309 28787 storage/replica_raftstorage.go:597  [s2,r1/2:/M{in-ax}] applying Raft snapshot at index 28 (id=8475f3f5, encoded size=5459, 1 rocksdb batches, 1 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3625:I170517 07:32:18.767510 28898 storage/replica_raftstorage.go:597  [s3,r1/3:/M{in-ax}] applying Raft snapshot at index 30 (id=9a812c88, encoded size=6435, 1 rocksdb batches, 3 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3645:I170517 07:32:18.941344 28879 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=5e5aac3c, encoded size=5574, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3651:I170517 07:32:18.958810 29242 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 17 (id=6dc0d934, encoded size=7121, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3717:I170517 07:32:19.833548 29424 storage/replica_raftstorage.go:597  [s3,r2/?:{-}] applying preemptive snapshot at index 14 (id=c10f19fa, encoded size=4982, 1 rocksdb batches, 4 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3756:I170517 07:32:20.037643 29957 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=5f031803, encoded size=5574, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3762:I170517 07:32:20.067463 29600 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 17 (id=4698b668, encoded size=7121, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3784:I170517 07:32:20.596501 29711 storage/replica_raftstorage.go:597  [s3,r1/3:/M{in-ax}] applying Raft snapshot at index 23 (id=96f6f6c4, encoded size=4816, 1 rocksdb batches, 2 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3799:I170517 07:32:20.768774 30549 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=49599a4b, encoded size=5574, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3805:I170517 07:32:20.791957 30601 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 17 (id=5ac6a0ea, encoded size=7121, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3827:I170517 07:32:21.349805 30728 storage/replica_raftstorage.go:597  [s3,r1/3:/M{in-ax}] applying Raft snapshot at index 22 (id=6d7f2e70, encoded size=4810, 1 rocksdb batches, 1 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3844:I170517 07:32:21.763128 31180 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=38b4c13e, encoded size=5574, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3851:I170517 07:32:21.787500 31206 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 17 (id=c6bd4ca1, encoded size=7121, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3891:I170517 07:32:22.297755 32040 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 18 (id=19deab0f, encoded size=7035, 1 rocksdb batches, 8 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3897:I170517 07:32:22.320839 32085 storage/replica_raftstorage.go:597  [s6,r1/?:{-}] applying preemptive snapshot at index 20 (id=f6baa2e5, encoded size=8595, 1 rocksdb batches, 10 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3912:I170517 07:32:22.434604 32124 storage/replica_raftstorage.go:597  [s5,r1/?:{-}] applying preemptive snapshot at index 25 (id=aeff02f2, encoded size=12273, 1 rocksdb batches, 15 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3928:I170517 07:32:22.533993 32212 storage/replica_raftstorage.go:597  [s4,r1/?:{-}] applying preemptive snapshot at index 30 (id=c0ae6495, encoded size=15951, 1 rocksdb batches, 20 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3952:I170517 07:32:22.879317 32171 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 38 (id=7a08e7a2, encoded size=21093, 1 rocksdb batches, 28 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:3992:I170517 07:32:23.159953 32724 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=bacdee14, encoded size=5574, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4003:I170517 07:32:23.364803 32602 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 22 (id=e744e34e, encoded size=9585, 1 rocksdb batches, 12 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4021:I170517 07:32:23.785937 33082 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=52e80edc, encoded size=5574, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4027:I170517 07:32:23.804814 33176 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 17 (id=a9288ace, encoded size=7121, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4054:I170517 07:32:24.076437 33338 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=dceed1a6, encoded size=5574, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4060:I170517 07:32:24.120331 33342 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 17 (id=f3facd78, encoded size=7121, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4087:I170517 07:32:24.572808 33937 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=387483e0, encoded size=5574, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4093:I170517 07:32:24.594736 34104 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 17 (id=59affc10, encoded size=7121, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4116:I170517 07:32:24.874221 34166 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 26 (id=8563e7e1, encoded size=6415, 1 rocksdb batches, 4 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4137:I170517 07:32:25.324486 34433 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=6dd51a9f, encoded size=5574, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4143:I170517 07:32:25.351881 34525 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 17 (id=8eec099d, encoded size=7121, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4187:I170517 07:32:25.830050 35285 storage/replica_raftstorage.go:597  [s4,r1/?:{-}] applying preemptive snapshot at index 16 (id=a31a275d, encoded size=6059, 1 rocksdb batches, 6 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4193:I170517 07:32:25.854029 35304 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 18 (id=291df129, encoded size=7619, 1 rocksdb batches, 8 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4200:I170517 07:32:25.971435 35164 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 21 (id=def8208e, encoded size=9655, 1 rocksdb batches, 11 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4264:I170517 07:32:26.670397 36022 storage/replica_raftstorage.go:597  [s4,r1/?:{-}] applying preemptive snapshot at index 16 (id=cca95e63, encoded size=6059, 1 rocksdb batches, 6 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4269:I170517 07:32:26.696253 36042 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 18 (id=1c1adfd9, encoded size=7619, 1 rocksdb batches, 8 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4289:I170517 07:32:27.044087 36100 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 23 (id=b0610227, encoded size=11219, 1 rocksdb batches, 13 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4320:I170517 07:32:27.499040 36111 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=58c53712, encoded size=5574, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4326:I170517 07:32:27.516542 36343 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 17 (id=5301bf61, encoded size=7121, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4345:I170517 07:32:28.369519 37010 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=0c07b787, encoded size=5574, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4352:I170517 07:32:28.392709 37008 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 17 (id=9c4943bc, encoded size=7121, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4379:I170517 07:32:29.325728 37105 storage/replica_raftstorage.go:597  [s2,r2/?:{-}] applying preemptive snapshot at index 12 (id=8cf689f6, encoded size=3952, 1 rocksdb batches, 2 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4403:I170517 07:32:29.578888 37619 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 14 (id=99429904, encoded size=5089, 1 rocksdb batches, 4 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4423:I170517 07:32:30.911392 37657 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 14 (id=849d04e9, encoded size=5089, 1 rocksdb batches, 4 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4455:I170517 07:32:31.430271 38117 storage/replica_raftstorage.go:597  [s2,r2/?:{-}] applying preemptive snapshot at index 11 (id=20bffd86, encoded size=3537, 1 rocksdb batches, 1 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4461:I170517 07:32:31.470958 38059 storage/replica_raftstorage.go:597  [s3,r2/?:{-}] applying preemptive snapshot at index 13 (id=e7c2af1f, encoded size=5052, 1 rocksdb batches, 3 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4476:I170517 07:32:31.683660 38386 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 26 (id=f7b8bfe0, encoded size=9087, 1 rocksdb batches, 16 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4545:I170517 07:32:32.631020 39823 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 22 (id=07c8e96b, encoded size=8987, 1 rocksdb batches, 12 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4552:I170517 07:32:32.717629 39922 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 25 (id=c9bd1006, encoded size=11035, 1 rocksdb batches, 15 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4558:I170517 07:32:32.836015 39991 storage/replica_raftstorage.go:597  [s4,r1/?:{-}] applying preemptive snapshot at index 29 (id=613ba303, encoded size=13635, 1 rocksdb batches, 19 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4564:I170517 07:32:33.037823 40001 storage/replica_raftstorage.go:597  [s5,r1/?:{-}] applying preemptive snapshot at index 35 (id=7fa268d9, encoded size=17275, 1 rocksdb batches, 25 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4570:I170517 07:32:33.172750 40030 storage/replica_raftstorage.go:597  [s6,r1/?:{-}] applying preemptive snapshot at index 37 (id=4e07ca88, encoded size=19027, 1 rocksdb batches, 27 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4576:I170517 07:32:33.429492 40065 storage/replica_raftstorage.go:597  [s7,r1/?:{-}] applying preemptive snapshot at index 41 (id=780fe476, encoded size=21819, 1 rocksdb batches, 31 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4582:I170517 07:32:33.749367 40217 storage/replica_raftstorage.go:597  [s8,r1/?:{-}] applying preemptive snapshot at index 48 (id=a8fcfeed, encoded size=26139, 1 rocksdb batches, 38 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4588:I170517 07:32:34.028493 40351 storage/replica_raftstorage.go:597  [s9,r1/?:{-}] applying preemptive snapshot at index 55 (id=59f45f4c, encoded size=30523, 1 rocksdb batches, 45 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4594:I170517 07:32:34.608140 40531 storage/replica_raftstorage.go:597  [s10,r1/?:{-}] applying preemptive snapshot at index 61 (id=eb50eec7, encoded size=34483, 1 rocksdb batches, 51 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4605:I170517 07:32:35.841969 40829 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 82 (id=1b593167, encoded size=46861, 1 rocksdb batches, 72 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4616:I170517 07:32:37.194210 41252 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 107 (id=a477faaf, encoded size=61189, 1 rocksdb batches, 97 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4631:I170517 07:32:38.557684 41489 storage/replica_raftstorage.go:597  [s3,r1/13:{-}] applying Raft snapshot at index 131 (id=affa7185, encoded size=17095, 1 rocksdb batches, 4 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4641:I170517 07:32:39.188558 41765 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 144 (id=6e2d0951, encoded size=24489, 1 rocksdb batches, 17 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4656:I170517 07:32:40.397750 42073 storage/replica_raftstorage.go:597  [s3,r1/15:{-}] applying Raft snapshot at index 165 (id=30bc400a, encoded size=38003, 1 rocksdb batches, 38 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4665:I170517 07:32:40.764282 42144 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 173 (id=92c7f087, encoded size=42951, 1 rocksdb batches, 46 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4680:I170517 07:32:41.371961 42413 storage/replica_raftstorage.go:597  [s3,r1/17:{-}] applying Raft snapshot at index 190 (id=ed8e39bb, encoded size=54505, 1 rocksdb batches, 63 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4689:I170517 07:32:41.913947 42611 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 198 (id=876a09c9, encoded size=59457, 1 rocksdb batches, 71 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4700:I170517 07:32:42.460573 42727 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 210 (id=0a7e8a9a, encoded size=67465, 1 rocksdb batches, 83 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4711:I170517 07:32:42.897193 42849 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 220 (id=431513b9, encoded size=74493, 1 rocksdb batches, 93 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4754:I170517 07:32:43.575634 43411 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=c169475b, encoded size=5574, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4760:I170517 07:32:43.625724 43328 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 17 (id=3afcc742, encoded size=7121, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4771:I170517 07:32:43.843135 43477 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 21 (id=99b876de, encoded size=10305, 1 rocksdb batches, 11 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4783:I170517 07:32:44.026055 43507 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 25 (id=a42aac67, encoded size=13489, 1 rocksdb batches, 15 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4807:I170517 07:32:44.165430 43525 storage/replica_raftstorage.go:597  [s2,r1/6:{-}] applying Raft snapshot at index 31 (id=cbc407ef, encoded size=18293, 1 rocksdb batches, 21 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4813:I170517 07:32:44.185853 43498 storage/replica_raftstorage.go:597  [s2,r1/6:/M{in-ax}] applying preemptive snapshot at index 34 (id=fa8e9899, encoded size=20341, 1 rocksdb batches, 24 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4824:I170517 07:32:44.282875 43607 storage/replica_raftstorage.go:597  [s2,r1/7:{-}] applying Raft snapshot at index 38 (id=3f8d0ec8, encoded size=23395, 1 rocksdb batches, 28 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4832:I170517 07:32:44.331951 43623 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 40 (id=89065771, encoded size=24501, 1 rocksdb batches, 30 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4849:I170517 07:32:44.445160 43714 storage/replica_raftstorage.go:597  [s2,r1/9:{-}] applying Raft snapshot at index 47 (id=ba7b1ac1, encoded size=30251, 1 rocksdb batches, 37 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4853:I170517 07:32:44.483679 43708 storage/replica_raftstorage.go:597  [s2,r1/9:/M{in-ax}] applying preemptive snapshot at index 48 (id=deab1823, encoded size=30869, 1 rocksdb batches, 38 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4864:I170517 07:32:44.565876 43593 storage/replica_raftstorage.go:597  [s2,r1/10:{-}] applying Raft snapshot at index 51 (id=7814583a, encoded size=33435, 1 rocksdb batches, 41 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4876:I170517 07:32:44.654555 43741 storage/replica_raftstorage.go:597  [s2,r1/11:{-}] applying Raft snapshot at index 54 (id=7a5e9f57, encoded size=35677, 1 rocksdb batches, 44 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4895:I170517 07:32:44.741901 43811 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 56 (id=affad3bd, encoded size=37237, 1 rocksdb batches, 46 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4911:I170517 07:32:44.952304 43838 storage/replica_raftstorage.go:597  [s2,r1/13:{-}] applying Raft snapshot at index 65 (id=ebdd5185, encoded size=43039, 1 rocksdb batches, 55 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4925:I170517 07:32:45.096034 43792 storage/replica_raftstorage.go:597  [s2,r1/14:{-}] applying Raft snapshot at index 71 (id=6358d0de, encoded size=47653, 1 rocksdb batches, 61 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4934:I170517 07:32:45.134427 43884 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 72 (id=08062a66, encoded size=48271, 1 rocksdb batches, 62 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4944:I170517 07:32:45.252803 43803 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 77 (id=595c1a4c, encoded size=51472, 1 rocksdb batches, 67 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4957:I170517 07:32:45.372527 43950 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 81 (id=c15da561, encoded size=54657, 1 rocksdb batches, 71 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4968:I170517 07:32:45.467892 43777 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 85 (id=ca85bb12, encoded size=57841, 1 rocksdb batches, 75 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4984:I170517 07:32:45.651068 44043 storage/replica_raftstorage.go:597  [s2,r1/19:{-}] applying Raft snapshot at index 92 (id=9947faea, encoded size=63133, 1 rocksdb batches, 82 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:4992:I170517 07:32:45.695232 44069 storage/replica_raftstorage.go:597  [s2,r1/19:/M{in-ax}] applying preemptive snapshot at index 94 (id=a9138756, encoded size=64693, 1 rocksdb batches, 84 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5005:I170517 07:32:45.844605 44132 storage/replica_raftstorage.go:597  [s2,r1/20:{-}] applying Raft snapshot at index 99 (id=067ff4fd, encoded size=68239, 1 rocksdb batches, 89 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5015:I170517 07:32:45.933435 44101 storage/replica_raftstorage.go:597  [s2,r1/20:/M{in-ax}] applying preemptive snapshot at index 100 (id=7c6b752b, encoded size=68857, 1 rocksdb batches, 90 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5027:I170517 07:32:46.027322 44183 storage/replica_raftstorage.go:597  [s2,r1/21:{-}] applying preemptive snapshot at index 104 (id=0ac9b937, encoded size=72041, 1 rocksdb batches, 94 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5040:I170517 07:32:46.133403 44244 storage/replica_raftstorage.go:597  [s2,r1/22:{-}] applying Raft snapshot at index 108 (id=0889dd4e, encoded size=15021, 1 rocksdb batches, 3 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5045:I170517 07:32:46.151256 44156 storage/replica_raftstorage.go:597  [s2,r1/22:/M{in-ax}] applying preemptive snapshot at index 109 (id=f74c788e, encoded size=15639, 1 rocksdb batches, 4 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5056:I170517 07:32:46.233002 44261 storage/replica_raftstorage.go:597  [s2,r1/23:{-}] applying Raft snapshot at index 112 (id=bf50b2e9, encoded size=18205, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5066:I170517 07:32:46.264158 44122 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 113 (id=886c4559, encoded size=18823, 1 rocksdb batches, 8 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5082:I170517 07:32:46.453324 44256 storage/replica_raftstorage.go:597  [s2,r1/25:{-}] applying Raft snapshot at index 122 (id=ac7c5941, encoded size=25095, 1 rocksdb batches, 17 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5090:I170517 07:32:46.481317 44338 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 124 (id=87d941e6, encoded size=26655, 1 rocksdb batches, 19 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5107:I170517 07:32:46.642491 44347 storage/replica_raftstorage.go:597  [s2,r1/27:{-}] applying Raft snapshot at index 130 (id=bfba73fa, encoded size=31466, 1 rocksdb batches, 25 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5112:I170517 07:32:46.673781 44406 storage/replica_raftstorage.go:597  [s2,r1/27:/M{in-ax}] applying preemptive snapshot at index 132 (id=3920be3b, encoded size=33028, 1 rocksdb batches, 27 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5122:I170517 07:32:46.735074 44333 storage/replica_raftstorage.go:597  [s2,r1/28:{-}] applying Raft snapshot at index 135 (id=ab6b6479, encoded size=35597, 1 rocksdb batches, 30 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5131:I170517 07:32:46.769003 44453 storage/replica_raftstorage.go:597  [s2,r1/28:/M{in-ax}] applying preemptive snapshot at index 136 (id=6f8d1327, encoded size=36216, 1 rocksdb batches, 31 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5141:I170517 07:32:46.857364 44482 storage/replica_raftstorage.go:597  [s2,r1/29:{-}] applying Raft snapshot at index 139 (id=009498f5, encoded size=38785, 1 rocksdb batches, 34 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5147:I170517 07:32:46.884167 44428 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 140 (id=05e7ed6b, encoded size=39404, 1 rocksdb batches, 35 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5162:I170517 07:32:46.973474 44382 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 144 (id=9ac60502, encoded size=42595, 1 rocksdb batches, 39 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5178:I170517 07:32:47.140589 44520 storage/replica_raftstorage.go:597  [s2,r1/32:{-}] applying Raft snapshot at index 152 (id=38532e29, encoded size=48391, 1 rocksdb batches, 47 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5186:I170517 07:32:47.213347 44527 storage/replica_raftstorage.go:597  [s2,r1/32:/M{in-ax}] applying preemptive snapshot at index 155 (id=8170ffb6, encoded size=50445, 1 rocksdb batches, 50 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5196:I170517 07:32:47.287857 44627 storage/replica_raftstorage.go:597  [s2,r1/33:{-}] applying Raft snapshot at index 158 (id=d0effd49, encoded size=53013, 1 rocksdb batches, 53 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5201:I170517 07:32:47.311116 44643 storage/replica_raftstorage.go:597  [s2,r1/33:/M{in-ax}] applying preemptive snapshot at index 159 (id=8b804101, encoded size=53633, 1 rocksdb batches, 54 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5213:I170517 07:32:47.414003 44661 storage/replica_raftstorage.go:597  [s2,r1/34:{-}] applying Raft snapshot at index 162 (id=740eecf5, encoded size=56205, 1 rocksdb batches, 57 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5219:I170517 07:32:47.444697 44653 storage/replica_raftstorage.go:597  [s2,r1/34:/M{in-ax}] applying preemptive snapshot at index 163 (id=02559a8d, encoded size=56825, 1 rocksdb batches, 58 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5229:I170517 07:32:47.514130 44677 storage/replica_raftstorage.go:597  [s2,r1/35:{-}] applying preemptive snapshot at index 168 (id=a98070eb, encoded size=60039, 1 rocksdb batches, 63 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5240:I170517 07:32:47.610827 44712 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 172 (id=38f487ba, encoded size=63231, 1 rocksdb batches, 67 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5252:I170517 07:32:47.677701 44704 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 176 (id=0e1e38b2, encoded size=66423, 1 rocksdb batches, 71 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5264:I170517 07:32:47.765151 44756 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 180 (id=a23f5b65, encoded size=69615, 1 rocksdb batches, 75 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5273:I170517 07:32:47.851916 44760 storage/replica_raftstorage.go:597  [s2,r1/39:/M{in-ax}] applying preemptive snapshot at index 186 (id=d52e5bda, encoded size=73787, 1 rocksdb batches, 81 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5283:I170517 07:32:48.004011 44807 storage/replica_raftstorage.go:597  [s2,r1/40:{-}] applying Raft snapshot at index 190 (id=397ea6dd, encoded size=76849, 1 rocksdb batches, 85 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5304:I170517 07:32:48.098708 44875 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 191 (id=be51ad86, encoded size=77469, 1 rocksdb batches, 86 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5321:I170517 07:32:48.311929 44938 storage/replica_raftstorage.go:597  [s2,r1/42:{-}] applying Raft snapshot at index 198 (id=a1b9e60b, encoded size=21937, 1 rocksdb batches, 3 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5327:I170517 07:32:48.336781 44860 storage/replica_raftstorage.go:597  [s2,r1/42:/M{in-ax}] applying preemptive snapshot at index 200 (id=5392570a, encoded size=23501, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5337:I170517 07:32:48.428112 44864 storage/replica_raftstorage.go:597  [s2,r1/43:{-}] applying Raft snapshot at index 202 (id=d07d9033, encoded size=25129, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5346:I170517 07:32:48.504806 45012 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 204 (id=44790fd5, encoded size=26693, 1 rocksdb batches, 9 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5358:I170517 07:32:48.591552 44971 storage/replica_raftstorage.go:597  [s2,r1/44:{-}] applying Raft snapshot at index 208 (id=be902c0a, encoded size=29301, 1 rocksdb batches, 13 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5364:I170517 07:32:48.629202 45055 storage/replica_raftstorage.go:597  [s2,r1/44:/M{in-ax}] applying preemptive snapshot at index 210 (id=e469103d, encoded size=30865, 1 rocksdb batches, 15 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5373:I170517 07:32:48.714594 45035 storage/replica_raftstorage.go:597  [s2,r1/45:{-}] applying Raft snapshot at index 215 (id=65d87b8b, encoded size=33941, 1 rocksdb batches, 20 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5381:I170517 07:32:48.747065 45078 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 216 (id=f72bc5ee, encoded size=34561, 1 rocksdb batches, 21 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5399:I170517 07:32:48.895121 45170 storage/replica_raftstorage.go:597  [s2,r1/47:{-}] applying preemptive snapshot at index 224 (id=e6791d4d, encoded size=40941, 1 rocksdb batches, 29 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5417:I170517 07:32:49.068294 45214 storage/replica_raftstorage.go:597  [s2,r1/49:{-}] applying preemptive snapshot at index 232 (id=f89c35f5, encoded size=47325, 1 rocksdb batches, 37 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5433:I170517 07:32:49.208939 45268 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 236 (id=ff2dbc41, encoded size=50517, 1 rocksdb batches, 41 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5442:I170517 07:32:49.288290 45153 storage/replica_raftstorage.go:597  [s2,r1/51:/M{in-ax}] applying preemptive snapshot at index 242 (id=fe16431f, encoded size=54689, 1 rocksdb batches, 47 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5454:I170517 07:32:49.421449 45296 storage/replica_raftstorage.go:597  [s2,r1/52:{-}] applying Raft snapshot at index 246 (id=d81b740b, encoded size=57751, 1 rocksdb batches, 51 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5459:I170517 07:32:49.444806 45349 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 247 (id=8d2f5f64, encoded size=58371, 1 rocksdb batches, 52 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5478:I170517 07:32:49.669379 45411 storage/replica_raftstorage.go:597  [s2,r1/54:{-}] applying preemptive snapshot at index 255 (id=f365b5b7, encoded size=64755, 1 rocksdb batches, 60 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5493:I170517 07:32:49.778319 45343 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 259 (id=09b1cff0, encoded size=67947, 1 rocksdb batches, 64 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5515:I170517 07:32:49.977369 45377 storage/replica_raftstorage.go:597  [s2,r1/57:{-}] applying Raft snapshot at index 267 (id=58425982, encoded size=74197, 1 rocksdb batches, 72 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5526:I170517 07:32:50.032213 45473 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 269 (id=2ce8d6e3, encoded size=75307, 1 rocksdb batches, 74 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5544:I170517 07:32:50.198425 45547 storage/replica_raftstorage.go:597  [s2,r1/59:{-}] applying preemptive snapshot at index 278 (id=88f41665, encoded size=82181, 1 rocksdb batches, 83 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5555:I170517 07:32:50.311988 45551 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 282 (id=93b8fc94, encoded size=85373, 1 rocksdb batches, 87 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5571:I170517 07:32:50.498223 45611 storage/replica_raftstorage.go:597  [s2,r1/62:{-}] applying Raft snapshot at index 289 (id=4fa9cee9, encoded size=29966, 1 rocksdb batches, 4 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5586:I170517 07:32:50.583236 45691 storage/replica_raftstorage.go:597  [s2,r1/63:{-}] applying preemptive snapshot at index 295 (id=819eb8c0, encoded size=34722, 1 rocksdb batches, 10 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5598:I170517 07:32:50.657589 45599 storage/replica_raftstorage.go:597  [s2,r1/64:{-}] applying Raft snapshot at index 297 (id=f64919a7, encoded size=36350, 1 rocksdb batches, 12 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5606:I170517 07:32:50.681323 45738 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 300 (id=662e59c1, encoded size=38404, 1 rocksdb batches, 15 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5618:I170517 07:32:50.772564 45782 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 305 (id=172254b2, encoded size=42086, 1 rocksdb batches, 20 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5637:I170517 07:32:50.957106 45823 storage/replica_raftstorage.go:597  [s2,r1/67:{-}] applying Raft snapshot at index 313 (id=e4061d2e, encoded size=48340, 1 rocksdb batches, 28 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5646:I170517 07:32:50.997882 45874 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 314 (id=98f72f08, encoded size=48960, 1 rocksdb batches, 29 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5662:I170517 07:32:51.178354 45920 storage/replica_raftstorage.go:597  [s2,r1/69:{-}] applying Raft snapshot at index 320 (id=aea9bb64, encoded size=53780, 1 rocksdb batches, 35 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5670:I170517 07:32:51.228253 45893 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 322 (id=b932199f, encoded size=55344, 1 rocksdb batches, 37 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5681:I170517 07:32:51.322498 45851 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 326 (id=050b8804, encoded size=58536, 1 rocksdb batches, 41 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5697:I170517 07:32:51.485051 46000 storage/replica_raftstorage.go:597  [s2,r1/72:{-}] applying Raft snapshot at index 334 (id=9273ad4d, encoded size=64336, 1 rocksdb batches, 49 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5703:I170517 07:32:51.555546 46036 storage/replica_raftstorage.go:597  [s2,r1/72:/M{in-ax}] applying preemptive snapshot at index 337 (id=4faac6d9, encoded size=66390, 1 rocksdb batches, 52 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5716:I170517 07:32:51.632145 45981 storage/replica_raftstorage.go:597  [s2,r1/73:{-}] applying Raft snapshot at index 340 (id=7257f983, encoded size=68962, 1 rocksdb batches, 55 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5731:I170517 07:32:51.682959 45985 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 341 (id=af2d8bd2, encoded size=69582, 1 rocksdb batches, 56 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5745:I170517 07:32:51.809643 46078 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 346 (id=ebf59e0f, encoded size=72792, 1 rocksdb batches, 61 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5755:I170517 07:32:51.920633 46064 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 350 (id=89fb84b3, encoded size=75984, 1 rocksdb batches, 65 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5775:I170517 07:32:52.161028 46227 storage/replica_raftstorage.go:597  [s2,r1/77:{-}] applying Raft snapshot at index 357 (id=9206dec7, encoded size=81294, 1 rocksdb batches, 72 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5783:I170517 07:32:52.198310 46203 storage/replica_raftstorage.go:597  [s2,r1/77:/M{in-ax}] applying preemptive snapshot at index 359 (id=2efa34f4, encoded size=82858, 1 rocksdb batches, 74 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5794:I170517 07:32:52.320750 46293 storage/replica_raftstorage.go:597  [s2,r1/78:{-}] applying Raft snapshot at index 363 (id=1804068f, encoded size=85466, 1 rocksdb batches, 78 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5800:I170517 07:32:52.361562 46223 storage/replica_raftstorage.go:597  [s2,r1/78:/M{in-ax}] applying preemptive snapshot at index 365 (id=ef19e625, encoded size=87030, 1 rocksdb batches, 80 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5811:I170517 07:32:52.424906 46343 storage/replica_raftstorage.go:597  [s2,r1/79:{-}] applying Raft snapshot at index 368 (id=1805ec89, encoded size=89602, 1 rocksdb batches, 83 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5821:I170517 07:32:52.490749 46286 storage/replica_raftstorage.go:597  [s2,r1/79:/M{in-ax}] applying preemptive snapshot at index 369 (id=a2534adb, encoded size=90222, 1 rocksdb batches, 84 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5830:I170517 07:32:52.577938 46311 storage/replica_raftstorage.go:597  [s2,r1/80:{-}] applying Raft snapshot at index 372 (id=f07c9160, encoded size=92794, 1 rocksdb batches, 87 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5839:I170517 07:32:52.612253 46383 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 373 (id=8e16e89f, encoded size=93414, 1 rocksdb batches, 88 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5859:I170517 07:32:52.790289 46467 storage/replica_raftstorage.go:597  [s2,r1/82:{-}] applying Raft snapshot at index 381 (id=df404587, encoded size=38848, 1 rocksdb batches, 6 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5865:I170517 07:32:52.814435 46391 storage/replica_raftstorage.go:597  [s2,r1/82:/M{in-ax}] applying preemptive snapshot at index 383 (id=cf9050cc, encoded size=39958, 1 rocksdb batches, 8 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5877:I170517 07:32:52.929544 46461 storage/replica_raftstorage.go:597  [s2,r1/83:{-}] applying Raft snapshot at index 387 (id=edd47432, encoded size=43020, 1 rocksdb batches, 12 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5883:I170517 07:32:52.957645 46442 storage/replica_raftstorage.go:597  [s2,r1/83:/M{in-ax}] applying preemptive snapshot at index 388 (id=5b4bb0f4, encoded size=43640, 1 rocksdb batches, 13 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5897:I170517 07:32:53.063892 46512 storage/replica_raftstorage.go:597  [s2,r1/84:{-}] applying Raft snapshot at index 392 (id=183b220b, encoded size=46702, 1 rocksdb batches, 17 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5904:I170517 07:32:53.095344 46550 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 393 (id=0e698b9c, encoded size=47322, 1 rocksdb batches, 18 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5917:I170517 07:32:53.160370 46594 storage/replica_raftstorage.go:597  [s2,r1/85:{-}] applying Raft snapshot at index 396 (id=6384b1fa, encoded size=49894, 1 rocksdb batches, 21 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5926:I170517 07:32:53.181769 46581 storage/replica_raftstorage.go:597  [s2,r1/85:/M{in-ax}] applying preemptive snapshot at index 397 (id=3e8788b2, encoded size=50514, 1 rocksdb batches, 22 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5937:I170517 07:32:53.336884 46647 storage/replica_raftstorage.go:597  [s2,r1/86:{-}] applying preemptive snapshot at index 401 (id=55420006, encoded size=53702, 1 rocksdb batches, 26 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5956:I170517 07:32:53.495834 46621 storage/replica_raftstorage.go:597  [s2,r1/88:{-}] applying preemptive snapshot at index 409 (id=0c6a480f, encoded size=60086, 1 rocksdb batches, 34 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5974:I170517 07:32:53.691584 46777 storage/replica_raftstorage.go:597  [s2,r1/90:{-}] applying preemptive snapshot at index 420 (id=c7e2db2a, encoded size=67940, 1 rocksdb batches, 45 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:5985:I170517 07:32:53.789473 46763 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 424 (id=680d8a22, encoded size=71132, 1 rocksdb batches, 49 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6003:I170517 07:32:54.035428 46883 storage/replica_raftstorage.go:597  [s2,r1/93:{-}] applying preemptive snapshot at index 432 (id=c02abdb0, encoded size=77516, 1 rocksdb batches, 57 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6029:I170517 07:32:54.250623 46874 storage/replica_raftstorage.go:597  [s2,r1/95:{-}] applying Raft snapshot at index 439 (id=2aa8155e, encoded size=83280, 1 rocksdb batches, 64 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6036:I170517 07:32:54.313203 46951 storage/replica_raftstorage.go:597  [s2,r1/95:/M{in-ax}] applying preemptive snapshot at index 441 (id=bf3b7f0c, encoded size=84390, 1 rocksdb batches, 66 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6048:I170517 07:32:54.404163 47030 storage/replica_raftstorage.go:597  [s2,r1/96:{-}] applying Raft snapshot at index 446 (id=cb43b9bf, encoded size=87942, 1 rocksdb batches, 71 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6056:I170517 07:32:54.471796 46953 storage/replica_raftstorage.go:597  [s2,r1/96:/M{in-ax}] applying preemptive snapshot at index 447 (id=99131625, encoded size=88562, 1 rocksdb batches, 72 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6070:I170517 07:32:54.584354 47066 storage/replica_raftstorage.go:597  [s2,r1/97:{-}] applying Raft snapshot at index 451 (id=cb5b1486, encoded size=91152, 1 rocksdb batches, 76 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6087:I170517 07:32:54.651721 47138 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 452 (id=67b3a30e, encoded size=91772, 1 rocksdb batches, 77 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6100:I170517 07:32:54.758846 47125 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 457 (id=a746b41d, encoded size=94982, 1 rocksdb batches, 82 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6120:I170517 07:32:54.943556 47205 storage/replica_raftstorage.go:597  [s2,r1/100:{-}] applying Raft snapshot at index 463 (id=8d9d6f20, encoded size=99802, 1 rocksdb batches, 88 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6125:I170517 07:32:54.970714 47133 storage/replica_raftstorage.go:597  [s2,r1/100:/M{in-ax}] applying preemptive snapshot at index 465 (id=f9df8ea9, encoded size=101366, 1 rocksdb batches, 90 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6133:I170517 07:32:55.117731 47223 storage/replica_raftstorage.go:597  [s2,r1/101:{-}] applying Raft snapshot at index 470 (id=18dcf421, encoded size=43574, 1 rocksdb batches, 3 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6140:I170517 07:32:55.149915 47253 storage/replica_raftstorage.go:597  [s2,r1/101:/M{in-ax}] applying preemptive snapshot at index 473 (id=47a1a2d5, encoded size=45628, 1 rocksdb batches, 6 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6151:I170517 07:32:55.233824 47022 storage/replica_raftstorage.go:597  [s2,r1/102:{-}] applying Raft snapshot at index 476 (id=1d80ff52, encoded size=48200, 1 rocksdb batches, 9 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6156:I170517 07:32:55.267795 47285 storage/replica_raftstorage.go:597  [s2,r1/102:/M{in-ax}] applying preemptive snapshot at index 477 (id=b2c9a6bf, encoded size=48820, 1 rocksdb batches, 10 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6180:I170517 07:32:55.572828 47551 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=dd83f3d4, encoded size=5574, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6187:I170517 07:32:55.871826 47338 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 17 (id=43b69d4c, encoded size=7121, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6217:I170517 07:32:56.469764 47726 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=07900e7c, encoded size=5574, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6223:I170517 07:32:56.497035 48101 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 17 (id=aed32b49, encoded size=7121, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6255:I170517 07:32:57.038351 48449 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=3d9f50a8, encoded size=5574, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6261:I170517 07:32:57.064438 48567 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 17 (id=03415c80, encoded size=7121, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6326:I170517 07:32:57.920256 49268 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 16 (id=1759c322, encoded size=6059, 1 rocksdb batches, 6 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6332:I170517 07:32:57.941700 49108 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 18 (id=383a6c6f, encoded size=7619, 1 rocksdb batches, 8 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6339:I170517 07:32:57.999852 49134 storage/replica_raftstorage.go:597  [s4,r1/?:{-}] applying preemptive snapshot at index 20 (id=9a7d80a1, encoded size=9243, 1 rocksdb batches, 10 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6372:I170517 07:32:58.759918 49744 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 16 (id=9a47e346, encoded size=6059, 1 rocksdb batches, 6 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6377:I170517 07:32:58.800408 49922 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 18 (id=2f81a697, encoded size=7619, 1 rocksdb batches, 8 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6385:I170517 07:32:58.843884 49896 storage/replica_raftstorage.go:597  [s4,r1/?:{-}] applying preemptive snapshot at index 20 (id=82cf5889, encoded size=9243, 1 rocksdb batches, 10 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6435:I170517 07:33:00.270481 50303 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=4cf1633b, encoded size=5574, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6441:I170517 07:33:00.323644 50456 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 17 (id=2f4c2014, encoded size=7121, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6460:I170517 07:33:00.720681 50712 storage/replica_raftstorage.go:597  [s3,r1/3:/M{in-ax}] applying preemptive snapshot at index 23 (id=9ed714de, encoded size=11133, 1 rocksdb batches, 13 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6481:I170517 07:33:01.032764 50991 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 14 (id=5726e63f, encoded size=5089, 1 rocksdb batches, 4 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6502:I170517 07:33:01.394829 51160 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 14 (id=f0e92207, encoded size=5089, 1 rocksdb batches, 4 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6525:I170517 07:33:01.800544 51617 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 14 (id=922f3ff8, encoded size=5089, 1 rocksdb batches, 4 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6561:I170517 07:33:02.379523 52180 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=ff04e8e4, encoded size=5574, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6567:I170517 07:33:02.420223 51585 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 17 (id=118bf5f9, encoded size=7121, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6594:I170517 07:33:02.866420 52614 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=2ac85c37, encoded size=5574, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6600:I170517 07:33:02.889422 52629 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 17 (id=d0e5b526, encoded size=7121, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6644:I170517 07:33:03.393015 52684 storage/replica_raftstorage.go:597  [s2,r2/?:{-}] applying preemptive snapshot at index 11 (id=e7535d01, encoded size=3537, 1 rocksdb batches, 1 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6652:I170517 07:33:03.448279 53050 storage/replica_raftstorage.go:597  [s3,r2/?:{-}] applying preemptive snapshot at index 13 (id=0c4be746, encoded size=5048, 1 rocksdb batches, 3 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6668:I170517 07:33:03.952396 53336 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 14 (id=ba2e85a4, encoded size=5089, 1 rocksdb batches, 4 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6699:I170517 07:33:04.436790 53740 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 18 (id=ddacca84, encoded size=5315, 1 rocksdb batches, 8 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6706:I170517 07:33:04.482086 53580 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 20 (id=a0148c04, encoded size=6863, 1 rocksdb batches, 10 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6730:I170517 07:33:05.238348 54146 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=4df2bba1, encoded size=5574, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6736:I170517 07:33:05.268141 54165 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 17 (id=158a7ae3, encoded size=7121, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6757:I170517 07:33:06.245764 54434 storage/replica_raftstorage.go:597  [s2,r2/?:{-}] applying preemptive snapshot at index 11 (id=5f4bc580, encoded size=460, 1 rocksdb batches, 1 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6792:I170517 07:33:06.708121 55026 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=724b135a, encoded size=5574, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6799:I170517 07:33:06.814422 55044 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 17 (id=c8ac35c4, encoded size=7121, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6823:I170517 07:33:07.216858 55084 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=b49b8cac, encoded size=6552, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6829:I170517 07:33:07.242371 55442 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 17 (id=5e7eb689, encoded size=8689, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6851:I170517 07:33:07.691289 55853 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=1e447268, encoded size=5574, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6858:I170517 07:33:07.755172 55860 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 17 (id=d7db84c0, encoded size=7121, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6896:I170517 07:33:08.280547 56279 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=80d6109f, encoded size=5566, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6902:I170517 07:33:08.321242 55505 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 17 (id=b3deb0e1, encoded size=7113, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6939:I170517 07:33:09.194593 56465 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=d24706ce, encoded size=6244, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:6977:I170517 07:33:09.713038 56636 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 14 (id=c9b9da0b, encoded size=5779, 1 rocksdb batches, 4 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:7109:I170517 07:33:13.231549 58854 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 14 (id=35fc0c93, encoded size=5089, 1 rocksdb batches, 4 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:7357:I170517 07:33:20.956472 61425 storage/replica_raftstorage.go:597  [s2,r2/?:{-}] applying preemptive snapshot at index 11 (id=1697ac67, encoded size=3585, 1 rocksdb batches, 1 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:7364:I170517 07:33:20.989105 61460 storage/replica_raftstorage.go:597  [s3,r2/?:{-}] applying preemptive snapshot at index 13 (id=1692f352, encoded size=5100, 1 rocksdb batches, 3 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:7370:I170517 07:33:21.118479 61514 storage/replica_raftstorage.go:597  [s4,r2/?:{-}] applying preemptive snapshot at index 16 (id=3416596e, encoded size=7015, 1 rocksdb batches, 6 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:7406:I170517 07:33:21.738974 61575 storage/replica_raftstorage.go:597  [s5,r11/?:{-}] applying preemptive snapshot at index 10 (id=cc0b6afb, encoded size=3570, 1 rocksdb batches, 0 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:7425:I170517 07:33:21.878297 61342 storage/replica_raftstorage.go:597  [s6,r11/?:{-}] applying preemptive snapshot at index 14 (id=fc631d8c, encoded size=5916, 1 rocksdb batches, 4 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:7526:I170517 07:33:25.176768 63193 storage/replica_raftstorage.go:597  [s2,r2/?:{-}] applying preemptive snapshot at index 11 (id=2df960ca, encoded size=3585, 1 rocksdb batches, 1 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:7533:I170517 07:33:25.218279 63226 storage/replica_raftstorage.go:597  [s3,r2/?:{-}] applying preemptive snapshot at index 13 (id=b36637b3, encoded size=5100, 1 rocksdb batches, 3 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:7539:I170517 07:33:25.275335 63268 storage/replica_raftstorage.go:597  [s4,r2/?:{-}] applying preemptive snapshot at index 16 (id=1be926c2, encoded size=7015, 1 rocksdb batches, 6 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:7578:I170517 07:33:25.815343 63179 storage/replica_raftstorage.go:597  [s5,r11/?:{-}] applying preemptive snapshot at index 10 (id=12370a20, encoded size=3570, 1 rocksdb batches, 0 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:7594:I170517 07:33:25.910217 63376 storage/replica_raftstorage.go:597  [s6,r11/?:{-}] applying preemptive snapshot at index 14 (id=6ed41f39, encoded size=5916, 1 rocksdb batches, 4 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:7661:I170517 07:33:27.805419 64179 storage/replica_raftstorage.go:597  [s4,r11/1:{m-/Max}] applying Raft snapshot at index 32 (id=26c23b08, encoded size=15225, 1 rocksdb batches, 22 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:7744:I170517 07:33:29.606136 64814 storage/replica_raftstorage.go:597  [n2,s2,r2/?:{-}] applying preemptive snapshot at index 16 (id=60c40581, encoded size=7480, 1 rocksdb batches, 6 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:7768:I170517 07:33:30.038625 65115 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 14 (id=77d68522, encoded size=5778, 1 rocksdb batches, 4 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:8082:I170517 07:33:31.648572 65287 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=62bb6b2b, encoded size=5574, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:8088:I170517 07:33:31.683044 65295 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 17 (id=dd01e599, encoded size=7121, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:8235:I170517 07:33:35.537105 66721 storage/replica_raftstorage.go:597  [s2,r1/?:{-}] applying preemptive snapshot at index 15 (id=715abe3e, encoded size=5574, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:8242:I170517 07:33:35.558561 67384 storage/replica_raftstorage.go:597  [s3,r1/?:{-}] applying preemptive snapshot at index 17 (id=29ff3980, encoded size=7121, 1 rocksdb batches, 7 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:8326:I170517 07:33:37.228727 68227 storage/replica_raftstorage.go:597  [n2,s2,r1/?:{-}] applying preemptive snapshot at index 59 (id=4a6a3165, encoded size=125926, 1 rocksdb batches, 5 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:8333:I170517 07:33:38.524992 68253 storage/replica_raftstorage.go:597  [n3,s3,r1/?:{-}] applying preemptive snapshot at index 67 (id=689436ce, encoded size=207859, 1 rocksdb batches, 13 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:8421:I170517 07:33:41.128076 69158 storage/replica_raftstorage.go:597  [n2,s2,r1/?:{-}] applying preemptive snapshot at index 61 (id=9f400e8d, encoded size=125222, 1 rocksdb batches, 3 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:8427:I170517 07:33:41.319052 69186 storage/replica_raftstorage.go:597  [n3,s3,r1/?:{-}] applying preemptive snapshot at index 67 (id=a8e09998, encoded size=185384, 1 rocksdb batches, 9 log entries)
./pkg/cmd/github-post/testdata/stress-fatal:8982:	/go/src/github.com/cockroachdb/cockroach/pkg/storage/engine/rocksdb.go:430 +0x64
./pkg/cmd/github-post/testdata/stress-fatal:8984:	/go/src/github.com/cockroachdb/cockroach/pkg/storage/engine/rocksdb.go:431 +0x6d1
./pkg/cmd/github-post/testdata/stress-fatal:9316:	/go/src/github.com/cockroachdb/cockroach/pkg/storage/engine/rocksdb.go:430 +0x64
./pkg/cmd/github-post/testdata/stress-fatal:9318:	/go/src/github.com/cockroachdb/cockroach/pkg/storage/engine/rocksdb.go:431 +0x6d1
./pkg/cmd/github-post/testdata/stress-fatal:9952:	/go/src/github.com/cockroachdb/cockroach/pkg/storage/engine/rocksdb.go:430 +0x64
./pkg/cmd/github-post/testdata/stress-fatal:9954:	/go/src/github.com/cockroachdb/cockroach/pkg/storage/engine/rocksdb.go:431 +0x6d1
./pkg/cmd/github-pull-request-make/testdata/10305.diff:1017:diff --git a/pkg/storage/engine/rocksdb/cockroach/pkg/roachpb/data.pb.cc b/pkg/storage/engine/rocksdb/cockroach/pkg/roachpb/data.pb.cc
./pkg/cmd/github-pull-request-make/testdata/10305.diff:1019:--- a/pkg/storage/engine/rocksdb/cockroach/pkg/roachpb/data.pb.cc
./pkg/cmd/github-pull-request-make/testdata/10305.diff:1020:+++ b/pkg/storage/engine/rocksdb/cockroach/pkg/roachpb/data.pb.cc
./pkg/cmd/github-pull-request-make/testdata/10305.diff:1294:diff --git a/pkg/storage/engine/rocksdb/cockroach/pkg/roachpb/data.pb.h b/pkg/storage/engine/rocksdb/cockroach/pkg/roachpb/data.pb.h
./pkg/cmd/github-pull-request-make/testdata/10305.diff:1296:--- a/pkg/storage/engine/rocksdb/cockroach/pkg/roachpb/data.pb.h
./pkg/cmd/github-pull-request-make/testdata/10305.diff:1297:+++ b/pkg/storage/engine/rocksdb/cockroach/pkg/roachpb/data.pb.h
./pkg/ccl/storageccl/engineccl/rocksdb.go:20:// TODO(tamird): why does rocksdb not link jemalloc,snappy statically?
./pkg/ccl/storageccl/engineccl/rocksdb.go:26:// #cgo LDFLAGS: -lrocksdb
./pkg/ccl/storageccl/engineccl/rocksdb.go:83:// TODO(dan): The following are all duplicated from storage/engine/rocksdb.go,
./pkg/ccl/storageccl/engineccl/multi_iterator_test.go:26:	rocksDB := engine.NewInMem(roachpb.Attributes{}, 1<<20)
./pkg/ccl/storageccl/engineccl/multi_iterator_test.go:27:	defer rocksDB.Close()
./pkg/ccl/storageccl/engineccl/multi_iterator_test.go:80:				batch := rocksDB.NewBatch()
./pkg/ccl/storageccl/engineccl/sst_iterator.go:122:	rocksdbInternalKey := r.iter.Key()
./pkg/ccl/storageccl/engineccl/sst_iterator.go:123:	if len(rocksdbInternalKey) < 8 {
./pkg/ccl/storageccl/engineccl/sst_iterator.go:124:		r.err = errors.Errorf("invalid rocksdb InternalKey: %x", rocksdbInternalKey)
./pkg/ccl/storageccl/engineccl/sst_iterator.go:127:	seqAndValueType := binary.LittleEndian.Uint64(rocksdbInternalKey[len(rocksdbInternalKey)-8:])
./pkg/ccl/storageccl/engineccl/sst_iterator.go:133:	key := rocksdbInternalKey[:len(rocksdbInternalKey)-8]
./pkg/ccl/storageccl/writebatch.go:115:	// ClearIterRange needs a plain rocksdb iterator (and can't unwrap
./pkg/ccl/storageccl/add_sstable_test.go:210:			// The second time though we had to make a copy of the SST since rocks saw
./pkg/base/store_spec_test.go:120:		{"path=/,rocksdb=key1=val1;key2=val2", "", StoreSpec{Path: "/", RocksDBOptions: "key1=val1;key2=val2"}},
./pkg/base/store_spec.go:130:// - path=xxx The directory in which to the rocks db instance should be
./pkg/base/store_spec.go:231:		case "rocksdb":
./pkg/cli/debug_test.go:71:			expErr: `could not open rocksdb instance: .* does not exist \(create_if_missing is false\)`,
./pkg/cli/debug.go:773:	Use:   "rocksdb",
./pkg/cli/debug.go:777:raw store data. 'cockroach debug rocksdb' accepts the same arguments and flags
./pkg/cli/debug.go:780:https://github.com/facebook/rocksdb/wiki/Administration-and-Data-Access-Tool#ldb-tool
./pkg/keys/constants.go:112:	// in storage/engine/rocksdb/db.cc.
./pkg/keys/constants.go:177:	// storage/engine/rocksdb/db.cc.
./pkg/keys/constants.go:186:	// (storage/engine/rocksdb/db.cc).
./pkg/keys/gen_cpp_keys.go:29:func rocksdbSlice(key []byte) string {
./pkg/keys/gen_cpp_keys.go:68:	fmt.Fprintf(f, "const rocksdb::Slice kLocalMax(%s);\n", rocksdbSlice(keys.LocalMax))
./pkg/keys/gen_cpp_keys.go:69:	fmt.Fprintf(f, "const rocksdb::Slice kMeta2KeyMax(%s);\n", rocksdbSlice(keys.Meta2KeyMax))
./pkg/keys/gen_cpp_keys.go:80:		fmt.Fprintf(f, "const std::vector<std::pair<rocksdb::Slice, rocksdb::Slice> > kSorted%s = {\n", name)
./pkg/keys/gen_cpp_keys.go:82:			fmt.Fprintf(f, "  std::make_pair(rocksdb::Slice(%s), rocksdb::Slice(%s)),\n",
./pkg/keys/gen_cpp_keys.go:83:				rocksdbSlice(span.Key), rocksdbSlice(span.EndKey))
./pkg/testutils/lint/lint_test.go:604:			stream.GrepNot(`^storage\/engine\/rocksdb_error_dict\.go$`),
./pkg/server/config.go:518:			rocksDBConfig := engine.RocksDBConfig{
./pkg/server/config.go:530:			eng, err := engine.NewRocksDB(rocksDBConfig, cache)
./monitoring/grafana-dashboards/storage.json:550:              "expr": "avg(avg(rocksdb_read_amplification{cluster=\"$cluster\",instance=~\"$node\"}) by (instance))",
./monitoring/grafana-dashboards/storage.json:646:              "expr": "avg(rocksdb_read_amplification{cluster=\"$cluster\",instance=~\"$node\"}) by (instance)",
./monitoring/grafana-dashboards/storage.json:705:              "expr": "sum(sum(rocksdb_num_sstables{cluster=\"$cluster\",instance=~\"$node\"}) by (instance))",
./monitoring/grafana-dashboards/storage.json:796:              "expr": "sum(rocksdb_num_sstables{cluster=\"$cluster\",instance=~\"$node\"}) by (instance)",
./.gitmodules:7:[submodule "c-deps/rocksdb"]
./.gitmodules:8:	path = c-deps/rocksdb
./.gitmodules:9:	url = https://github.com/cockroachdb/rocksdb.git
./Makefile:420:ROCKSDB_SRC_DIR  := $(C_DEPS_DIR)/rocksdb
./Makefile:498:ROCKSDB_DIR  := $(BUILD_DIR)/rocksdb$(STDMALLOC_SUFFIX)$(if $(ENABLE_ROCKSDB_ASSERTIONS),_assert)
./Makefile:505:C_LIBS_COMMON = $(if $(USE_STDMALLOC),,libjemalloc) libprotobuf libsnappy librocksdb
./Makefile:611:$(ROCKSDB_DIR)/Makefile: $(C_DEPS_DIR)/rocksdb-rebuild | $(SUBMODULES_TARGET) libsnappy $(if $(USE_STDMALLOC),,libjemalloc)
./Makefile:615:	@# $(C_DEPS_DIR)/rocksdb-rebuild. See above for rationale.
./Makefile:639:		-DPROTOBUF_LIB=$(PROTOBUF_DIR)/libprotobuf.a -DROCKSDB_LIB=$(ROCKSDB_DIR)/librocksdb.a \
./Makefile:668:.PHONY: librocksdb
./Makefile:669:librocksdb: $(ROCKSDB_DIR)/Makefile
./Makefile:670:	@$(MAKE) --no-print-directory -C $(ROCKSDB_DIR) rocksdb
./Makefile:682:check-libroach: $(LIBROACH_DIR)/Makefile libjemalloc libprotobuf libsnappy librocksdb libcryptopp
./Makefile:989:CPP_PROTOS := $(filter %/roachpb/metadata.proto %/roachpb/data.proto %/roachpb/internal.proto %/engine/enginepb/mvcc.proto %/engine/enginepb/mvcc3.proto %/engine/enginepb/file_registry.proto %/engine/enginepb/rocksdb.proto %/hlc/legacy_timestamp.proto %/hlc/timestamp.proto %/unresolved_addr.proto,$(GO_PROTOS))
./docs/first-pr.md:634:[RocksDB]: http://rocksdb.org
./docs/generated/settings/settings.md:25:| `rocksdb.min_wal_sync_interval`                     | duration          | `0s`       | minimum duration between syncs of the RocksDB WAL                                                                                               |
./docs/tech-notes/life_of_a_query.md:983: [RocksDB](http://rocksdb.org/) database. Before we dig a bit into
./docs/tech-notes/life_of_a_query.md:1007:[`RocksDB`](https://github.com/cockroachdb/cockroach/blob/33c18ad1bcdb37ed6ed428b7527148977a8c566a/pkg/storage/engine/rocksdb.go#L265),
./docs/tech-notes/encoding.md:174:`cockroach debug rocksdb scan --value_hex`, with annotations.
./docs/design.md:28:use [RocksDB](http://rocksdb.org/), a variant of
./docs/RFCS/20160420_proposer_evaluated_kv.md:217:format](https://github.com/facebook/rocksdb/blob/f38540b12ada4fe06598c42d4c084f9d920289ff/db/write_batch.cc#L10)
./docs/RFCS/20151214_sql_column_families.md:203:map some families to an alternative storage model (perhaps using rocksdb
./docs/RFCS/20171020_inverted_indexes.md:49:  me all rows whose text column contain the words “CockroachDB rocks”.
./docs/RFCS/20170601_raft_sstable_sideloading.md:272:raft log out of rocksdb likely already addresses that suitably.
./docs/RFCS/20160720_backup_restore.md:383:format](https://github.com/facebook/rocksdb/blob/v4.9/db/write_batch.cc#L10-L30)
./docs/RFCS/20160720_backup_restore.md:439:[AddFile]: https://github.com/facebook/rocksdb/wiki/Creating-and-Ingesting-SST-files
./docs/RFCS/20160720_backup_restore.md:440:[LevelDB sstable format]: https://github.com/facebook/rocksdb/wiki/A-Tutorial-of-RocksDB-SST-formats
./docs/RFCS/20170605_dedicated_raft_storage.md:79:// pkg/storage/engine/bench_rocksdb_test.go
./docs/RFCS/20170605_dedicated_raft_storage.md:506:\[2\]: https://github.com/facebook/rocksdb/wiki/RocksDB-FAQ </br>
./docs/RFCS/20170605_dedicated_raft_storage.md:507:\[3\]: https://github.com/facebook/rocksdb/wiki/Basic-Operations#asynchronous-writes </br>
./docs/RFCS/20170605_dedicated_raft_storage.md:516:\[5\]: https://github.com/facebook/rocksdb/wiki/RocksDB-Basics#support-for-multiple-embedded-databases-in-the-same-process </br>
./docs/RFCS/20170605_dedicated_raft_storage.md:522:[2]: https://github.com/facebook/rocksdb/wiki/RocksDB-FAQ
./docs/RFCS/20170605_dedicated_raft_storage.md:523:[3]: https://github.com/facebook/rocksdb/wiki/Basic-Operations#asynchronous-writes
./docs/RFCS/20170605_dedicated_raft_storage.md:524:[5]: https://github.com/facebook/rocksdb/wiki/RocksDB-Basics#support-for-multiple-embedded-databases-in-the-same-process
./docs/RFCS/20171220_encryption_at_rest.md:46:         * [Directs us towards rocksdb-level encryption](#directs-us-towards-rocksdb-level-encryption)
./docs/RFCS/20171220_encryption_at_rest.md:47:         * [Lack of correctness testing of rocksdb encryption layer](#lack-of-correctness-testing-of-rocksdb-encryption-layer)
./docs/RFCS/20171220_encryption_at_rest.md:50:         * [Non-live rocksdb files will rot](#non-live-rocksdb-files-will-rot)
./docs/RFCS/20171220_encryption_at_rest.md:67:encryption being done at the rocksdb layer for each file.
./docs/RFCS/20171220_encryption_at_rest.md:69:We provide CTR-mode AES encryption for all files written through rocksdb.
./docs/RFCS/20171220_encryption_at_rest.md:74:on a regular schedule, relying on rocksdb churn to re-encrypt data.
./docs/RFCS/20171220_encryption_at_rest.md:76:Plaintext files go through the regular rocksdb interface to the filesystem. Encrypted files
./docs/RFCS/20171220_encryption_at_rest.md:96:* [rocksdb PR adding env_encryption](https://github.com/facebook/rocksdb/pull/2424)
./docs/RFCS/20171220_encryption_at_rest.md:102:* encryption of non-rocksdb data (eg: log files)
./docs/RFCS/20171220_encryption_at_rest.md:134:raw rocksdb files.
./docs/RFCS/20171220_encryption_at_rest.md:159:This would add complexity and cost to filesystem-level operations in rocksdb as we would need to read entire
./docs/RFCS/20171220_encryption_at_rest.md:175:when just starting rocksdb with very little disk/network utilization.
./docs/RFCS/20171220_encryption_at_rest.md:226:* **Env**: rocksdb terminology for the layer between rocksdb and the filesystem.
./docs/RFCS/20171220_encryption_at_rest.md:370:* using the store rocksdb instance: encryption is done automatically
./docs/RFCS/20171220_encryption_at_rest.md:371:* using a separate rocksdb instance: encryption settings **must** be given to the new instance. Care must be taken to ensure that users know not to place store keys on the same disks as the rocksdb directory
./docs/RFCS/20171220_encryption_at_rest.md:372:* using anything other than rocksdb: logs (written at the Go level) are marked out of scope for this document. However, any raw data written to disk should use the same encryption settings as the store
./docs/RFCS/20171220_encryption_at_rest.md:390:Rocksdb performs filesystem-level operations through an [`Env`](https://github.com/facebook/rocksdb/blob/master/include/rocksdb/env.h).
./docs/RFCS/20171220_encryption_at_rest.md:395:* hdfs: for HDFS-backed rocksdb instances
./docs/RFCS/20171220_encryption_at_rest.md:439:It will also gather entries that are never deleted by rocksdb (eg: archives). We can clean these up
./docs/RFCS/20171220_encryption_at_rest.md:444:The registry is a new file containing encryption status information for files written through rocksdb.
./docs/RFCS/20171220_encryption_at_rest.md:445:This is similar to rocksdb's `MANIFEST`. We intentionally do not call it manifest to avoid confusion.
./docs/RFCS/20171220_encryption_at_rest.md:447:It is stored in the base rocksdb directory for the store and written using a `write/close/rename` method.
./docs/RFCS/20171220_encryption_at_rest.md:497:Rocksdb has an `EncryptedEnv` introduced in [PR 2424](https://github.com/facebook/rocksdb/pull/2424).
./docs/RFCS/20171220_encryption_at_rest.md:586:If rotation is done through a flag (as opposed to other signal), this is done before starting rocksdb.
./docs/RFCS/20171220_encryption_at_rest.md:721:We can find the list of all in-use files the same way rocksdb's backup does, by calling:
./docs/RFCS/20171220_encryption_at_rest.md:722:* `rocksdb::GetLiveFiles`: retrieve the list of all files in the database
./docs/RFCS/20171220_encryption_at_rest.md:723:* `rocksdb::GetSortedWalFiles`: retrieve the sorted list of all wal files
./docs/RFCS/20171220_encryption_at_rest.md:731:Data tied to a specific store should use the store's rocksdb instance for encryption.
./docs/RFCS/20171220_encryption_at_rest.md:737:1. temporary work space for dist SQL: written through a temporary instance of rocksdb. This data does not need
./docs/RFCS/20171220_encryption_at_rest.md:738:to be used by another rocksdb instance and does not survive node restart. We propose to use dynamically-generated
./docs/RFCS/20171220_encryption_at_rest.md:739:keys to encrypt the temporary rocksdb instance.
./docs/RFCS/20171220_encryption_at_rest.md:740:1. sideloading for restore. Local SSTables are generated using an in-memory rocksdb instance then written in go
./docs/RFCS/20171220_encryption_at_rest.md:741:to local disk. We must change this to either be written directly by rocksdb, or move encryption to Go. The former
./docs/RFCS/20171220_encryption_at_rest.md:746:1. reduce the number of entry points into rocksdb to make it harder to miss encryption setup
./docs/RFCS/20171220_encryption_at_rest.md:770:### Directs us towards rocksdb-level encryption
./docs/RFCS/20171220_encryption_at_rest.md:772:While rocksdb-level encryption does not force us to keep encryption-at-rest at this level,
./docs/RFCS/20171220_encryption_at_rest.md:778:### Lack of correctness testing of rocksdb encryption layer
./docs/RFCS/20171220_encryption_at_rest.md:780:The rocksdb `env_encryption` functionality is barely tested and has no known open-source uses.
./docs/RFCS/20171220_encryption_at_rest.md:783:We can improve testing of this functionality at the rocksdb level as well as within cockroach.
./docs/RFCS/20171220_encryption_at_rest.md:805:### Non-live rocksdb files will rot
./docs/RFCS/20171220_encryption_at_rest.md:807:Any files not included in rocksdb's "Live files" will still be encrypted. However, due to not being rewritten,
./docs/RFCS/20171220_encryption_at_rest.md:837:Filesystem encryption can be used without requiring coordination with cockroach or rocksdb.
./docs/RFCS/20171220_encryption_at_rest.md:850:The solution proposed here allows encryption to be enabled or not for individual rocksdb instances.
./docs/RFCS/20171220_encryption_at_rest.md:897:The previous version of this RFC proposed using the `rocksdb::EncryptedEnv` for all files, with encryption state
./docs/RFCS/20171220_encryption_at_rest.md:929:While rocksdb regularly creates new files, we may need to force rewrite for less-frequently
./docs/RFCS/20171220_encryption_at_rest.md:939:* patches to rocksdb to force rotation even if nothing has changed (may be the safest)
./docs/RFCS/20171220_encryption_at_rest.md:957:All encrypted files are stored in the registry. Live rocksdb files will automatically be removed as they are
./docs/RFCS/20171220_encryption_at_rest.md:958:deleted, but any other files will remain forever if not deleted through rocksdb.
./docs/RFCS/20171220_encryption_at_rest.md:967:Guidance on key rotation period would also be helpful. This is dependent on the rocksdb churn, so will depend
./docs/RFCS/20171220_encryption_at_rest.md:999:We should examine which rocksdb-provided tools may need modification as well, possibly involving patches
./docs/RFCS/20171220_encryption_at_rest.md:1000:to rocksdb.
./docs/RFCS/20160730_streaming_snapshots.md:147:rocksdb `Batch`, keyed by the UUID from the header `raftpb.Message`.
